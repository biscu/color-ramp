/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/chroma-js";
exports.ids = ["vendor-chunks/chroma-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/chroma-js/dist/chroma.cjs":
/*!************************************************!*\
  !*** ./node_modules/chroma-js/dist/chroma.cjs ***!
  \************************************************/
/***/ (function(module) {

eval("/**\n * chroma.js - JavaScript library for color conversions\n *\n * Copyright (c) 2011-2024, Gregor Aisch\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n * list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. The name Gregor Aisch may not be used to endorse or promote products\n * derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * -------------------------------------------------------\n *\n * chroma.js includes colors from colorbrewer2.org, which are released under\n * the following license:\n *\n * Copyright (c) 2002 Cynthia Brewer, Mark Harrower,\n * and The Pennsylvania State University.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n *\n * ------------------------------------------------------\n *\n * Named colors are taken from X11 Color Names.\n * http://www.w3.org/TR/css3-color/#svg-color\n *\n * @preserve\n */\n\n(function (global, factory) {\n     true ? module.exports = factory() :\n    0;\n})(this, (function () { 'use strict';\n\n    var min$4 = Math.min;\n    var max$4 = Math.max;\n\n    function limit (x, low, high) {\n        if ( low === void 0 ) low = 0;\n        if ( high === void 0 ) high = 1;\n\n        return min$4(max$4(low, x), high);\n    }\n\n    function clip_rgb (rgb) {\n        rgb._clipped = false;\n        rgb._unclipped = rgb.slice(0);\n        for (var i = 0; i <= 3; i++) {\n            if (i < 3) {\n                if (rgb[i] < 0 || rgb[i] > 255) { rgb._clipped = true; }\n                rgb[i] = limit(rgb[i], 0, 255);\n            } else if (i === 3) {\n                rgb[i] = limit(rgb[i], 0, 1);\n            }\n        }\n        return rgb;\n    }\n\n    // ported from jQuery's $.type\n    var classToType = {};\n    for (var i = 0, list = [\n        'Boolean',\n        'Number',\n        'String',\n        'Function',\n        'Array',\n        'Date',\n        'RegExp',\n        'Undefined',\n        'Null'\n    ]; i < list.length; i += 1) {\n        var name = list[i];\n\n        classToType[(\"[object \" + name + \"]\")] = name.toLowerCase();\n    }\n    function type (obj) {\n        return classToType[Object.prototype.toString.call(obj)] || 'object';\n    }\n\n    function unpack (args, keyOrder) {\n        if ( keyOrder === void 0 ) keyOrder = null;\n\n        // if called with more than 3 arguments, we return the arguments\n        if (args.length >= 3) { return Array.prototype.slice.call(args); }\n        // with less than 3 args we check if first arg is object\n        // and use the keyOrder string to extract and sort properties\n        if (type(args[0]) == 'object' && keyOrder) {\n            return keyOrder\n                .split('')\n                .filter(function (k) { return args[0][k] !== undefined; })\n                .map(function (k) { return args[0][k]; });\n        }\n        // otherwise we just return the first argument\n        // (which we suppose is an array of args)\n        return args[0].slice(0);\n    }\n\n    function last (args) {\n        if (args.length < 2) { return null; }\n        var l = args.length - 1;\n        if (type(args[l]) == 'string') { return args[l].toLowerCase(); }\n        return null;\n    }\n\n    var PI$2 = Math.PI;\n    var min$3 = Math.min;\n    var max$3 = Math.max;\n\n    var rnd2 = function (a) { return Math.round(a * 100) / 100; };\n    var rnd3 = function (a) { return Math.round(a * 100) / 100; };\n\n    var TWOPI = PI$2 * 2;\n    var PITHIRD = PI$2 / 3;\n    var DEG2RAD = PI$2 / 180;\n    var RAD2DEG = 180 / PI$2;\n\n    /**\n     * Reverse the first three elements of an array\n     *\n     * @param {any[]} arr\n     * @returns {any[]}\n     */\n    function reverse3(arr) {\n        return arr.slice(0, 3).reverse().concat( arr.slice(3));\n    }\n\n    var input = {\n        format: {},\n        autodetect: []\n    };\n\n    var Color = function Color() {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var me = this;\n        if (\n            type(args[0]) === 'object' &&\n            args[0].constructor &&\n            args[0].constructor === this.constructor\n        ) {\n            // the argument is already a Color instance\n            return args[0];\n        }\n        // last argument could be the mode\n        var mode = last(args);\n        var autodetect = false;\n        if (!mode) {\n            autodetect = true;\n\n            if (!input.sorted) {\n                input.autodetect = input.autodetect.sort(function (a, b) { return b.p - a.p; });\n                input.sorted = true;\n            }\n\n            // auto-detect format\n            for (var i = 0, list = input.autodetect; i < list.length; i += 1) {\n                var chk = list[i];\n\n                mode = chk.test.apply(chk, args);\n                if (mode) { break; }\n            }\n        }\n        if (input.format[mode]) {\n            var rgb = input.format[mode].apply(\n                null,\n                autodetect ? args : args.slice(0, -1)\n            );\n            me._rgb = clip_rgb(rgb);\n        } else {\n            throw new Error('unknown format: ' + args);\n        }\n        // add alpha channel\n        if (me._rgb.length === 3) { me._rgb.push(1); }\n    };\n    Color.prototype.toString = function toString () {\n        if (type(this.hex) == 'function') { return this.hex(); }\n        return (\"[\" + (this._rgb.join(',')) + \"]\");\n    };\n\n    // this gets updated automatically\n    var version = '3.1.2';\n\n    var chroma = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args) ));\n    };\n\n    chroma.version = version;\n\n    var cmyk2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack(args, 'cmyk');\n        var c = args[0];\n        var m = args[1];\n        var y = args[2];\n        var k = args[3];\n        var alpha = args.length > 4 ? args[4] : 1;\n        if (k === 1) { return [0, 0, 0, alpha]; }\n        return [\n            c >= 1 ? 0 : 255 * (1 - c) * (1 - k), // r\n            m >= 1 ? 0 : 255 * (1 - m) * (1 - k), // g\n            y >= 1 ? 0 : 255 * (1 - y) * (1 - k), // b\n            alpha\n        ];\n    };\n\n    var max$2 = Math.max;\n\n    var rgb2cmyk = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        r = r / 255;\n        g = g / 255;\n        b = b / 255;\n        var k = 1 - max$2(r, max$2(g, b));\n        var f = k < 1 ? 1 / (1 - k) : 0;\n        var c = (1 - r - k) * f;\n        var m = (1 - g - k) * f;\n        var y = (1 - b - k) * f;\n        return [c, m, y, k];\n    };\n\n    Color.prototype.cmyk = function () {\n        return rgb2cmyk(this._rgb);\n    };\n\n    var cmyk = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['cmyk']) ));\n    };\n    Object.assign(chroma, { cmyk: cmyk });\n\n    input.format.cmyk = cmyk2rgb;\n\n    input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack(args, 'cmyk');\n            if (type(args) === 'array' && args.length === 4) {\n                return 'cmyk';\n            }\n        }\n    });\n\n    /*\n     * supported arguments:\n     * - hsl2css(h,s,l)\n     * - hsl2css(h,s,l,a)\n     * - hsl2css([h,s,l], mode)\n     * - hsl2css([h,s,l,a], mode)\n     * - hsl2css({h,s,l,a}, mode)\n     */\n    var hsl2css = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var hsla = unpack(args, 'hsla');\n        var mode = last(args) || 'lsa';\n        hsla[0] = rnd2(hsla[0] || 0) + 'deg';\n        hsla[1] = rnd2(hsla[1] * 100) + '%';\n        hsla[2] = rnd2(hsla[2] * 100) + '%';\n        if (mode === 'hsla' || (hsla.length > 3 && hsla[3] < 1)) {\n            hsla[3] = '/ ' + (hsla.length > 3 ? hsla[3] : 1);\n            mode = 'hsla';\n        } else {\n            hsla.length = 3;\n        }\n        return ((mode.substr(0, 3)) + \"(\" + (hsla.join(' ')) + \")\");\n    };\n\n    /*\n     * supported arguments:\n     * - rgb2hsl(r,g,b)\n     * - rgb2hsl(r,g,b,a)\n     * - rgb2hsl([r,g,b])\n     * - rgb2hsl([r,g,b,a])\n     * - rgb2hsl({r,g,b,a})\n     */\n    var rgb2hsl$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack(args, 'rgba');\n        var r = args[0];\n        var g = args[1];\n        var b = args[2];\n\n        r /= 255;\n        g /= 255;\n        b /= 255;\n\n        var minRgb = min$3(r, g, b);\n        var maxRgb = max$3(r, g, b);\n\n        var l = (maxRgb + minRgb) / 2;\n        var s, h;\n\n        if (maxRgb === minRgb) {\n            s = 0;\n            h = Number.NaN;\n        } else {\n            s =\n                l < 0.5\n                    ? (maxRgb - minRgb) / (maxRgb + minRgb)\n                    : (maxRgb - minRgb) / (2 - maxRgb - minRgb);\n        }\n\n        if (r == maxRgb) { h = (g - b) / (maxRgb - minRgb); }\n        else if (g == maxRgb) { h = 2 + (b - r) / (maxRgb - minRgb); }\n        else if (b == maxRgb) { h = 4 + (r - g) / (maxRgb - minRgb); }\n\n        h *= 60;\n        if (h < 0) { h += 360; }\n        if (args.length > 3 && args[3] !== undefined) { return [h, s, l, args[3]]; }\n        return [h, s, l];\n    };\n\n    /*\n     * supported arguments:\n     * - lab2css(l,a,b)\n     * - lab2css(l,a,b,alpha)\n     * - lab2css([l,a,b], mode)\n     * - lab2css([l,a,b,alpha], mode)\n     */\n    var lab2css = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var laba = unpack(args, 'lab');\n        var mode = last(args) || 'lab';\n        laba[0] = rnd2(laba[0]) + '%';\n        laba[1] = rnd2(laba[1]);\n        laba[2] = rnd2(laba[2]);\n        if (mode === 'laba' || (laba.length > 3 && laba[3] < 1)) {\n            laba[3] = '/ ' + (laba.length > 3 ? laba[3] : 1);\n        } else {\n            laba.length = 3;\n        }\n        return (\"lab(\" + (laba.join(' ')) + \")\");\n    };\n\n    var labConstants = {\n        // Corresponds roughly to RGB brighter/darker\n        Kn: 18,\n\n        // D65 standard referent\n        labWhitePoint: 'd65',\n        Xn: 0.95047,\n        Yn: 1,\n        Zn: 1.08883,\n\n        t0: 0.137931034, // 4 / 29\n        t1: 0.206896552, // 6 / 29\n        t2: 0.12841855, // 3 * t1 * t1\n        t3: 0.008856452, // t1 * t1 * t1,\n\n        kE: 216.0 / 24389.0,\n        kKE: 8.0,\n        kK: 24389.0 / 27.0,\n\n        RefWhiteRGB: {\n            // sRGB\n            X: 0.95047,\n            Y: 1,\n            Z: 1.08883\n        },\n\n        MtxRGB2XYZ: {\n            m00: 0.4124564390896922,\n            m01: 0.21267285140562253,\n            m02: 0.0193338955823293,\n            m10: 0.357576077643909,\n            m11: 0.715152155287818,\n            m12: 0.11919202588130297,\n            m20: 0.18043748326639894,\n            m21: 0.07217499330655958,\n            m22: 0.9503040785363679\n        },\n\n        MtxXYZ2RGB: {\n            m00: 3.2404541621141045,\n            m01: -0.9692660305051868,\n            m02: 0.055643430959114726,\n            m10: -1.5371385127977166,\n            m11: 1.8760108454466942,\n            m12: -0.2040259135167538,\n            m20: -0.498531409556016,\n            m21: 0.041556017530349834,\n            m22: 1.0572251882231791\n        },\n\n        // used in rgb2xyz\n        As: 0.9414285350000001,\n        Bs: 1.040417467,\n        Cs: 1.089532651,\n\n        MtxAdaptMa: {\n            m00: 0.8951,\n            m01: -0.7502,\n            m02: 0.0389,\n            m10: 0.2664,\n            m11: 1.7135,\n            m12: -0.0685,\n            m20: -0.1614,\n            m21: 0.0367,\n            m22: 1.0296\n        },\n\n        MtxAdaptMaI: {\n            m00: 0.9869929054667123,\n            m01: 0.43230526972339456,\n            m02: -0.008528664575177328,\n            m10: -0.14705425642099013,\n            m11: 0.5183602715367776,\n            m12: 0.04004282165408487,\n            m20: 0.15996265166373125,\n            m21: 0.0492912282128556,\n            m22: 0.9684866957875502\n        }\n    };\n\n    // taken from https://de.mathworks.com/help/images/ref/whitepoint.html\n    var ILLUMINANTS = new Map([\n        // ASTM E308-01\n        ['a', [1.0985, 0.35585]],\n        // Wyszecki & Stiles, p. 769\n        ['b', [1.0985, 0.35585]],\n        // C ASTM E308-01\n        ['c', [0.98074, 1.18232]],\n        // D50 (ASTM E308-01)\n        ['d50', [0.96422, 0.82521]],\n        // D55 (ASTM E308-01)\n        ['d55', [0.95682, 0.92149]],\n        // D65 (ASTM E308-01)\n        ['d65', [0.95047, 1.08883]],\n        // E (ASTM E308-01)\n        ['e', [1, 1, 1]],\n        // F2 (ASTM E308-01)\n        ['f2', [0.99186, 0.67393]],\n        // F7 (ASTM E308-01)\n        ['f7', [0.95041, 1.08747]],\n        // F11 (ASTM E308-01)\n        ['f11', [1.00962, 0.6435]],\n        ['icc', [0.96422, 0.82521]]\n    ]);\n\n    function setLabWhitePoint(name) {\n        var ill = ILLUMINANTS.get(String(name).toLowerCase());\n        if (!ill) {\n            throw new Error('unknown Lab illuminant ' + name);\n        }\n        labConstants.labWhitePoint = name;\n        labConstants.Xn = ill[0];\n        labConstants.Zn = ill[1];\n    }\n\n    function getLabWhitePoint() {\n        return labConstants.labWhitePoint;\n    }\n\n    var rgb2lab = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var rest = ref.slice(3);\n        var ref$1 = rgb2xyz(r, g, b);\n        var x = ref$1[0];\n        var y = ref$1[1];\n        var z = ref$1[2];\n        var ref$2 = xyz2lab(x, y, z);\n        var L = ref$2[0];\n        var a = ref$2[1];\n        var b_ = ref$2[2];\n        return [L, a, b_ ].concat( (rest.length > 0 && rest[0] < 1 ? [rest[0]] : []));\n    };\n\n    function xyz2lab(x, y, z) {\n        var Xn = labConstants.Xn;\n        var Yn = labConstants.Yn;\n        var Zn = labConstants.Zn;\n        var kE = labConstants.kE;\n        var kK = labConstants.kK;\n        var xr = x / Xn;\n        var yr = y / Yn;\n        var zr = z / Zn;\n\n        var fx = xr > kE ? Math.pow(xr, 1.0 / 3.0) : (kK * xr + 16.0) / 116.0;\n        var fy = yr > kE ? Math.pow(yr, 1.0 / 3.0) : (kK * yr + 16.0) / 116.0;\n        var fz = zr > kE ? Math.pow(zr, 1.0 / 3.0) : (kK * zr + 16.0) / 116.0;\n\n        return [116.0 * fy - 16.0, 500.0 * (fx - fy), 200.0 * (fy - fz)];\n    }\n\n    function gammaAdjustSRGB(companded) {\n        var sign = Math.sign(companded);\n        companded = Math.abs(companded);\n        var linear =\n            companded <= 0.04045\n                ? companded / 12.92\n                : Math.pow((companded + 0.055) / 1.055, 2.4);\n        return linear * sign;\n    }\n\n    var rgb2xyz = function (r, g, b) {\n        // normalize and gamma adjust\n        r = gammaAdjustSRGB(r / 255);\n        g = gammaAdjustSRGB(g / 255);\n        b = gammaAdjustSRGB(b / 255);\n\n        var MtxRGB2XYZ = labConstants.MtxRGB2XYZ;\n        var MtxAdaptMa = labConstants.MtxAdaptMa;\n        var MtxAdaptMaI = labConstants.MtxAdaptMaI;\n        var Xn = labConstants.Xn;\n        var Yn = labConstants.Yn;\n        var Zn = labConstants.Zn;\n        var As = labConstants.As;\n        var Bs = labConstants.Bs;\n        var Cs = labConstants.Cs;\n\n        var x = r * MtxRGB2XYZ.m00 + g * MtxRGB2XYZ.m10 + b * MtxRGB2XYZ.m20;\n        var y = r * MtxRGB2XYZ.m01 + g * MtxRGB2XYZ.m11 + b * MtxRGB2XYZ.m21;\n        var z = r * MtxRGB2XYZ.m02 + g * MtxRGB2XYZ.m12 + b * MtxRGB2XYZ.m22;\n\n        var Ad = Xn * MtxAdaptMa.m00 + Yn * MtxAdaptMa.m10 + Zn * MtxAdaptMa.m20;\n        var Bd = Xn * MtxAdaptMa.m01 + Yn * MtxAdaptMa.m11 + Zn * MtxAdaptMa.m21;\n        var Cd = Xn * MtxAdaptMa.m02 + Yn * MtxAdaptMa.m12 + Zn * MtxAdaptMa.m22;\n\n        var X = x * MtxAdaptMa.m00 + y * MtxAdaptMa.m10 + z * MtxAdaptMa.m20;\n        var Y = x * MtxAdaptMa.m01 + y * MtxAdaptMa.m11 + z * MtxAdaptMa.m21;\n        var Z = x * MtxAdaptMa.m02 + y * MtxAdaptMa.m12 + z * MtxAdaptMa.m22;\n\n        X *= Ad / As;\n        Y *= Bd / Bs;\n        Z *= Cd / Cs;\n\n        x = X * MtxAdaptMaI.m00 + Y * MtxAdaptMaI.m10 + Z * MtxAdaptMaI.m20;\n        y = X * MtxAdaptMaI.m01 + Y * MtxAdaptMaI.m11 + Z * MtxAdaptMaI.m21;\n        z = X * MtxAdaptMaI.m02 + Y * MtxAdaptMaI.m12 + Z * MtxAdaptMaI.m22;\n\n        return [x, y, z];\n    };\n\n    /*\n     * supported arguments:\n     * - lab2css(l,a,b)\n     * - lab2css(l,a,b,alpha)\n     * - lab2css([l,a,b], mode)\n     * - lab2css([l,a,b,alpha], mode)\n     */\n    var lch2css = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var lcha = unpack(args, 'lch');\n        var mode = last(args) || 'lab';\n        lcha[0] = rnd2(lcha[0]) + '%';\n        lcha[1] = rnd2(lcha[1]);\n        lcha[2] = isNaN(lcha[2]) ? 'none' : rnd2(lcha[2]) + 'deg'; // add deg unit to hue\n        if (mode === 'lcha' || (lcha.length > 3 && lcha[3] < 1)) {\n            lcha[3] = '/ ' + (lcha.length > 3 ? lcha[3] : 1);\n        } else {\n            lcha.length = 3;\n        }\n        return (\"lch(\" + (lcha.join(' ')) + \")\");\n    };\n\n    var sqrt$4 = Math.sqrt;\n    var atan2$2 = Math.atan2;\n    var round$5 = Math.round;\n\n    var lab2lch = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack(args, 'lab');\n        var l = ref[0];\n        var a = ref[1];\n        var b = ref[2];\n        var c = sqrt$4(a * a + b * b);\n        var h = (atan2$2(b, a) * RAD2DEG + 360) % 360;\n        if (round$5(c * 10000) === 0) { h = Number.NaN; }\n        return [l, c, h];\n    };\n\n    var rgb2lch = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var rest = ref.slice(3);\n        var ref$1 = rgb2lab(r, g, b);\n        var l = ref$1[0];\n        var a = ref$1[1];\n        var b_ = ref$1[2];\n        var ref$2 = lab2lch(l, a, b_);\n        var L = ref$2[0];\n        var c = ref$2[1];\n        var h = ref$2[2];\n        return [L, c, h ].concat( (rest.length > 0 && rest[0] < 1 ? [rest[0]] : []));\n    };\n\n    // from https://www.w3.org/TR/css-color-4/multiply-matrices.js\n    function multiplyMatrices(A, B) {\n        var m = A.length;\n\n        if (!Array.isArray(A[0])) {\n            // A is vector, convert to [[a, b, c, ...]]\n            A = [A];\n        }\n\n        if (!Array.isArray(B[0])) {\n            // B is vector, convert to [[a], [b], [c], ...]]\n            B = B.map(function (x) { return [x]; });\n        }\n\n        var p = B[0].length;\n        var B_cols = B[0].map(function (_, i) { return B.map(function (x) { return x[i]; }); }); // transpose B\n        var product = A.map(function (row) { return B_cols.map(function (col) {\n                if (!Array.isArray(row)) {\n                    return col.reduce(function (a, c) { return a + c * row; }, 0);\n                }\n\n                return row.reduce(function (a, c, i) { return a + c * (col[i] || 0); }, 0);\n            }); }\n        );\n\n        if (m === 1) {\n            product = product[0]; // Avoid [[a, b, c, ...]]\n        }\n\n        if (p === 1) {\n            return product.map(function (x) { return x[0]; }); // Avoid [[a], [b], [c], ...]]\n        }\n\n        return product;\n    }\n\n    var rgb2oklab = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var rest = ref.slice(3);\n        var xyz = rgb2xyz(r, g, b);\n        var oklab = XYZ_to_OKLab(xyz);\n        return oklab.concat( (rest.length > 0 && rest[0] < 1 ? [rest[0]] : []));\n    };\n\n    // from https://www.w3.org/TR/css-color-4/#color-conversion-code\n    function XYZ_to_OKLab(XYZ) {\n        // Given XYZ relative to D65, convert to OKLab\n        var XYZtoLMS = [\n            [0.819022437996703, 0.3619062600528904, -0.1288737815209879],\n            [0.0329836539323885, 0.9292868615863434, 0.0361446663506424],\n            [0.0481771893596242, 0.2642395317527308, 0.6335478284694309]\n        ];\n        var LMStoOKLab = [\n            [0.210454268309314, 0.7936177747023054, -0.0040720430116193],\n            [1.9779985324311684, -2.4285922420485799, 0.450593709617411],\n            [0.0259040424655478, 0.7827717124575296, -0.8086757549230774]\n        ];\n\n        var LMS = multiplyMatrices(XYZtoLMS, XYZ);\n        // JavaScript Math.cbrt returns a sign-matched cube root\n        // beware if porting to other languages\n        // especially if tempted to use a general power function\n        return multiplyMatrices(\n            LMStoOKLab,\n            LMS.map(function (c) { return Math.cbrt(c); })\n        );\n        // L in range [0,1]. For use in CSS, multiply by 100 and add a percent\n    }\n\n    var oklab2css = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var laba = unpack(args, 'lab');\n        laba[0] = rnd2(laba[0] * 100) + '%';\n        laba[1] = rnd3(laba[1]);\n        laba[2] = rnd3(laba[2]);\n        if (laba.length > 3 && laba[3] < 1) {\n            laba[3] = '/ ' + (laba.length > 3 ? laba[3] : 1);\n        } else {\n            laba.length = 3;\n        }\n        return (\"oklab(\" + (laba.join(' ')) + \")\");\n    };\n\n    var rgb2oklch = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var rest = ref.slice(3);\n        var ref$1 = rgb2oklab(r, g, b);\n        var l = ref$1[0];\n        var a = ref$1[1];\n        var b_ = ref$1[2];\n        var ref$2 = lab2lch(l, a, b_);\n        var L = ref$2[0];\n        var c = ref$2[1];\n        var h = ref$2[2];\n        return [L, c, h ].concat( (rest.length > 0 && rest[0] < 1 ? [rest[0]] : []));\n    };\n\n    var oklch2css = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var lcha = unpack(args, 'lch');\n        lcha[0] = rnd2(lcha[0] * 100) + '%';\n        lcha[1] = rnd3(lcha[1]);\n        lcha[2] = isNaN(lcha[2]) ? 'none' : rnd2(lcha[2]) + 'deg'; // add deg unit to hue\n        if (lcha.length > 3 && lcha[3] < 1) {\n            lcha[3] = '/ ' + (lcha.length > 3 ? lcha[3] : 1);\n        } else {\n            lcha.length = 3;\n        }\n        return (\"oklch(\" + (lcha.join(' ')) + \")\");\n    };\n\n    var round$4 = Math.round;\n\n    /*\n     * supported arguments:\n     * - rgb2css(r,g,b)\n     * - rgb2css(r,g,b,a)\n     * - rgb2css([r,g,b], mode)\n     * - rgb2css([r,g,b,a], mode)\n     * - rgb2css({r,g,b,a}, mode)\n     */\n    var rgb2css = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var rgba = unpack(args, 'rgba');\n        var mode = last(args) || 'rgb';\n        if (mode.substr(0, 3) === 'hsl') {\n            return hsl2css(rgb2hsl$1(rgba), mode);\n        }\n        if (mode.substr(0, 3) === 'lab') {\n            // change to D50 lab whitepoint since this is what W3C is using for CSS Lab colors\n            var prevWhitePoint = getLabWhitePoint();\n            setLabWhitePoint('d50');\n            var cssColor = lab2css(rgb2lab(rgba), mode);\n            setLabWhitePoint(prevWhitePoint);\n            return cssColor;\n        }\n        if (mode.substr(0, 3) === 'lch') {\n            // change to D50 lab whitepoint since this is what W3C is using for CSS Lab colors\n            var prevWhitePoint$1 = getLabWhitePoint();\n            setLabWhitePoint('d50');\n            var cssColor$1 = lch2css(rgb2lch(rgba), mode);\n            setLabWhitePoint(prevWhitePoint$1);\n            return cssColor$1;\n        }\n        if (mode.substr(0, 5) === 'oklab') {\n            return oklab2css(rgb2oklab(rgba));\n        }\n        if (mode.substr(0, 5) === 'oklch') {\n            return oklch2css(rgb2oklch(rgba));\n        }\n        rgba[0] = round$4(rgba[0]);\n        rgba[1] = round$4(rgba[1]);\n        rgba[2] = round$4(rgba[2]);\n        if (mode === 'rgba' || (rgba.length > 3 && rgba[3] < 1)) {\n            rgba[3] = '/ ' + (rgba.length > 3 ? rgba[3] : 1);\n            mode = 'rgba';\n        }\n        return ((mode.substr(0, 3)) + \"(\" + (rgba.slice(0, mode === 'rgb' ? 3 : 4).join(' ')) + \")\");\n    };\n\n    var hsl2rgb = function () {\n        var assign;\n\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n        args = unpack(args, 'hsl');\n        var h = args[0];\n        var s = args[1];\n        var l = args[2];\n        var r, g, b;\n        if (s === 0) {\n            r = g = b = l * 255;\n        } else {\n            var t3 = [0, 0, 0];\n            var c = [0, 0, 0];\n            var t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            var t1 = 2 * l - t2;\n            var h_ = h / 360;\n            t3[0] = h_ + 1 / 3;\n            t3[1] = h_;\n            t3[2] = h_ - 1 / 3;\n            for (var i = 0; i < 3; i++) {\n                if (t3[i] < 0) { t3[i] += 1; }\n                if (t3[i] > 1) { t3[i] -= 1; }\n                if (6 * t3[i] < 1) { c[i] = t1 + (t2 - t1) * 6 * t3[i]; }\n                else if (2 * t3[i] < 1) { c[i] = t2; }\n                else if (3 * t3[i] < 2) { c[i] = t1 + (t2 - t1) * (2 / 3 - t3[i]) * 6; }\n                else { c[i] = t1; }\n            }\n            (assign = [c[0] * 255, c[1] * 255, c[2] * 255], r = assign[0], g = assign[1], b = assign[2]);\n        }\n        if (args.length > 3) {\n            // keep alpha channel\n            return [r, g, b, args[3]];\n        }\n        return [r, g, b, 1];\n    };\n\n    /*\n     * L* [0..100]\n     * a [-100..100]\n     * b [-100..100]\n     */\n    var lab2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack(args, 'lab');\n        var L = args[0];\n        var a = args[1];\n        var b = args[2];\n        var ref = lab2xyz(L, a, b);\n        var x = ref[0];\n        var y = ref[1];\n        var z = ref[2];\n        var ref$1 = xyz2rgb(x, y, z);\n        var r = ref$1[0];\n        var g = ref$1[1];\n        var b_ = ref$1[2];\n        return [r, g, b_, args.length > 3 ? args[3] : 1];\n    };\n\n    var lab2xyz = function (L, a, b) {\n        var kE = labConstants.kE;\n        var kK = labConstants.kK;\n        var kKE = labConstants.kKE;\n        var Xn = labConstants.Xn;\n        var Yn = labConstants.Yn;\n        var Zn = labConstants.Zn;\n\n        var fy = (L + 16.0) / 116.0;\n        var fx = 0.002 * a + fy;\n        var fz = fy - 0.005 * b;\n\n        var fx3 = fx * fx * fx;\n        var fz3 = fz * fz * fz;\n\n        var xr = fx3 > kE ? fx3 : (116.0 * fx - 16.0) / kK;\n        var yr = L > kKE ? Math.pow((L + 16.0) / 116.0, 3.0) : L / kK;\n        var zr = fz3 > kE ? fz3 : (116.0 * fz - 16.0) / kK;\n\n        var x = xr * Xn;\n        var y = yr * Yn;\n        var z = zr * Zn;\n\n        return [x, y, z];\n    };\n\n    var compand = function (linear) {\n        /* sRGB */\n        var sign = Math.sign(linear);\n        linear = Math.abs(linear);\n        return (\n            (linear <= 0.0031308\n                ? linear * 12.92\n                : 1.055 * Math.pow(linear, 1.0 / 2.4) - 0.055) * sign\n        );\n    };\n\n    var xyz2rgb = function (x, y, z) {\n        var MtxAdaptMa = labConstants.MtxAdaptMa;\n        var MtxAdaptMaI = labConstants.MtxAdaptMaI;\n        var MtxXYZ2RGB = labConstants.MtxXYZ2RGB;\n        var RefWhiteRGB = labConstants.RefWhiteRGB;\n        var Xn = labConstants.Xn;\n        var Yn = labConstants.Yn;\n        var Zn = labConstants.Zn;\n\n        var As = Xn * MtxAdaptMa.m00 + Yn * MtxAdaptMa.m10 + Zn * MtxAdaptMa.m20;\n        var Bs = Xn * MtxAdaptMa.m01 + Yn * MtxAdaptMa.m11 + Zn * MtxAdaptMa.m21;\n        var Cs = Xn * MtxAdaptMa.m02 + Yn * MtxAdaptMa.m12 + Zn * MtxAdaptMa.m22;\n\n        var Ad =\n            RefWhiteRGB.X * MtxAdaptMa.m00 +\n            RefWhiteRGB.Y * MtxAdaptMa.m10 +\n            RefWhiteRGB.Z * MtxAdaptMa.m20;\n        var Bd =\n            RefWhiteRGB.X * MtxAdaptMa.m01 +\n            RefWhiteRGB.Y * MtxAdaptMa.m11 +\n            RefWhiteRGB.Z * MtxAdaptMa.m21;\n        var Cd =\n            RefWhiteRGB.X * MtxAdaptMa.m02 +\n            RefWhiteRGB.Y * MtxAdaptMa.m12 +\n            RefWhiteRGB.Z * MtxAdaptMa.m22;\n\n        var X1 =\n            (x * MtxAdaptMa.m00 + y * MtxAdaptMa.m10 + z * MtxAdaptMa.m20) *\n            (Ad / As);\n        var Y1 =\n            (x * MtxAdaptMa.m01 + y * MtxAdaptMa.m11 + z * MtxAdaptMa.m21) *\n            (Bd / Bs);\n        var Z1 =\n            (x * MtxAdaptMa.m02 + y * MtxAdaptMa.m12 + z * MtxAdaptMa.m22) *\n            (Cd / Cs);\n\n        var X2 =\n            X1 * MtxAdaptMaI.m00 + Y1 * MtxAdaptMaI.m10 + Z1 * MtxAdaptMaI.m20;\n        var Y2 =\n            X1 * MtxAdaptMaI.m01 + Y1 * MtxAdaptMaI.m11 + Z1 * MtxAdaptMaI.m21;\n        var Z2 =\n            X1 * MtxAdaptMaI.m02 + Y1 * MtxAdaptMaI.m12 + Z1 * MtxAdaptMaI.m22;\n\n        var r = compand(\n            X2 * MtxXYZ2RGB.m00 + Y2 * MtxXYZ2RGB.m10 + Z2 * MtxXYZ2RGB.m20\n        );\n        var g = compand(\n            X2 * MtxXYZ2RGB.m01 + Y2 * MtxXYZ2RGB.m11 + Z2 * MtxXYZ2RGB.m21\n        );\n        var b = compand(\n            X2 * MtxXYZ2RGB.m02 + Y2 * MtxXYZ2RGB.m12 + Z2 * MtxXYZ2RGB.m22\n        );\n\n        return [r * 255, g * 255, b * 255];\n    };\n\n    var sin$3 = Math.sin;\n    var cos$4 = Math.cos;\n\n    var lch2lab = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        /*\n        Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.\n        These formulas were invented by David Dalrymple to obtain maximum contrast without going\n        out of gamut if the parameters are in the range 0-1.\n\n        A saturation multiplier was added by Gregor Aisch\n        */\n        var ref = unpack(args, 'lch');\n        var l = ref[0];\n        var c = ref[1];\n        var h = ref[2];\n        if (isNaN(h)) { h = 0; }\n        h = h * DEG2RAD;\n        return [l, cos$4(h) * c, sin$3(h) * c];\n    };\n\n    var lch2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack(args, 'lch');\n        var l = args[0];\n        var c = args[1];\n        var h = args[2];\n        var ref = lch2lab(l, c, h);\n        var L = ref[0];\n        var a = ref[1];\n        var b_ = ref[2];\n        var ref$1 = lab2rgb(L, a, b_);\n        var r = ref$1[0];\n        var g = ref$1[1];\n        var b = ref$1[2];\n        return [r, g, b, args.length > 3 ? args[3] : 1];\n    };\n\n    var oklab2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack(args, 'lab');\n        var L = args[0];\n        var a = args[1];\n        var b = args[2];\n        var rest = args.slice(3);\n        var ref = OKLab_to_XYZ([L, a, b]);\n        var X = ref[0];\n        var Y = ref[1];\n        var Z = ref[2];\n        var ref$1 = xyz2rgb(X, Y, Z);\n        var r = ref$1[0];\n        var g = ref$1[1];\n        var b_ = ref$1[2];\n        return [r, g, b_ ].concat( (rest.length > 0 && rest[0] < 1 ? [rest[0]] : []));\n    };\n\n    // from https://www.w3.org/TR/css-color-4/#color-conversion-code\n    function OKLab_to_XYZ(OKLab) {\n        // Given OKLab, convert to XYZ relative to D65\n        var LMStoXYZ = [\n            [1.2268798758459243, -0.5578149944602171, 0.2813910456659647],\n            [-0.0405757452148008, 1.112286803280317, -0.0717110580655164],\n            [-0.0763729366746601, -0.4214933324022432, 1.5869240198367816]\n        ];\n        var OKLabtoLMS = [\n            [1.0, 0.3963377773761749, 0.2158037573099136],\n            [1.0, -0.1055613458156586, -0.0638541728258133],\n            [1.0, -0.0894841775298119, -1.2914855480194092]\n        ];\n\n        var LMSnl = multiplyMatrices(OKLabtoLMS, OKLab);\n        return multiplyMatrices(\n            LMStoXYZ,\n            LMSnl.map(function (c) { return Math.pow( c, 3 ); })\n        );\n    }\n\n    var oklch2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack(args, 'lch');\n        var l = args[0];\n        var c = args[1];\n        var h = args[2];\n        var rest = args.slice(3);\n        var ref = lch2lab(l, c, h);\n        var L = ref[0];\n        var a = ref[1];\n        var b_ = ref[2];\n        var ref$1 = oklab2rgb(L, a, b_);\n        var r = ref$1[0];\n        var g = ref$1[1];\n        var b = ref$1[2];\n        return [r, g, b ].concat( (rest.length > 0 && rest[0] < 1 ? [rest[0]] : []));\n    };\n\n    var INT_OR_PCT = /((?:-?\\d+)|(?:-?\\d+(?:\\.\\d+)?)%|none)/.source;\n    var FLOAT_OR_PCT = /((?:-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)%?)|none)/.source;\n    var PCT = /((?:-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)%)|none)/.source;\n    var RE_S = /\\s*/.source;\n    var SEP = /\\s+/.source;\n    var COMMA = /\\s*,\\s*/.source;\n    var ANLGE = /((?:-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:deg)?)|none)/.source;\n    var ALPHA = /\\s*(?:\\/\\s*((?:[01]|[01]?\\.\\d+)|\\d+(?:\\.\\d+)?%))?/.source;\n\n    // e.g. rgb(250 20 0), rgb(100% 50% 20%), rgb(100% 50% 20% / 0.5)\n    var RE_RGB = new RegExp(\n        '^rgba?\\\\(' +\n            RE_S +\n            [INT_OR_PCT, INT_OR_PCT, INT_OR_PCT].join(SEP) +\n            ALPHA +\n            '\\\\)$'\n    );\n    var RE_RGB_LEGACY = new RegExp(\n        '^rgb\\\\(' +\n            RE_S +\n            [INT_OR_PCT, INT_OR_PCT, INT_OR_PCT].join(COMMA) +\n            RE_S +\n            '\\\\)$'\n    );\n    var RE_RGBA_LEGACY = new RegExp(\n        '^rgba\\\\(' +\n            RE_S +\n            [INT_OR_PCT, INT_OR_PCT, INT_OR_PCT, FLOAT_OR_PCT].join(COMMA) +\n            RE_S +\n            '\\\\)$'\n    );\n\n    var RE_HSL = new RegExp(\n        '^hsla?\\\\(' + RE_S + [ANLGE, PCT, PCT].join(SEP) + ALPHA + '\\\\)$'\n    );\n    var RE_HSL_LEGACY = new RegExp(\n        '^hsl?\\\\(' + RE_S + [ANLGE, PCT, PCT].join(COMMA) + RE_S + '\\\\)$'\n    );\n    var RE_HSLA_LEGACY =\n        /^hsla\\(\\s*(-?\\d+(?:\\.\\d+)?),\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)$/;\n\n    var RE_LAB = new RegExp(\n        '^lab\\\\(' +\n            RE_S +\n            [FLOAT_OR_PCT, FLOAT_OR_PCT, FLOAT_OR_PCT].join(SEP) +\n            ALPHA +\n            '\\\\)$'\n    );\n    var RE_LCH = new RegExp(\n        '^lch\\\\(' +\n            RE_S +\n            [FLOAT_OR_PCT, FLOAT_OR_PCT, ANLGE].join(SEP) +\n            ALPHA +\n            '\\\\)$'\n    );\n    var RE_OKLAB = new RegExp(\n        '^oklab\\\\(' +\n            RE_S +\n            [FLOAT_OR_PCT, FLOAT_OR_PCT, FLOAT_OR_PCT].join(SEP) +\n            ALPHA +\n            '\\\\)$'\n    );\n    var RE_OKLCH = new RegExp(\n        '^oklch\\\\(' +\n            RE_S +\n            [FLOAT_OR_PCT, FLOAT_OR_PCT, ANLGE].join(SEP) +\n            ALPHA +\n            '\\\\)$'\n    );\n\n    var round$3 = Math.round;\n\n    var roundRGB = function (rgb) {\n        return rgb.map(function (v, i) { return (i <= 2 ? limit(round$3(v), 0, 255) : v); });\n    };\n\n    var percentToAbsolute = function (pct, min, max, signed) {\n        if ( min === void 0 ) min = 0;\n        if ( max === void 0 ) max = 100;\n        if ( signed === void 0 ) signed = false;\n\n        if (typeof pct === 'string' && pct.endsWith('%')) {\n            pct = parseFloat(pct.substring(0, pct.length - 1)) / 100;\n            if (signed) {\n                // signed percentages are in the range -100% to 100%\n                pct = min + (pct + 1) * 0.5 * (max - min);\n            } else {\n                pct = min + pct * (max - min);\n            }\n        }\n        return +pct;\n    };\n\n    var noneToValue = function (v, noneValue) {\n        return v === 'none' ? noneValue : v;\n    };\n\n    var css2rgb = function (css) {\n        css = css.toLowerCase().trim();\n\n        if (css === 'transparent') {\n            return [0, 0, 0, 0];\n        }\n\n        var m;\n\n        if (input.format.named) {\n            try {\n                return input.format.named(css);\n                // eslint-disable-next-line\n            } catch (e) {}\n        }\n\n        // rgb(250 20 0) or rgb(250,20,0)\n        if ((m = css.match(RE_RGB)) || (m = css.match(RE_RGB_LEGACY))) {\n            var rgb = m.slice(1, 4);\n            for (var i = 0; i < 3; i++) {\n                rgb[i] = +percentToAbsolute(noneToValue(rgb[i], 0), 0, 255);\n            }\n            rgb = roundRGB(rgb);\n            var alpha = m[4] !== undefined ? +percentToAbsolute(m[4], 0, 1) : 1;\n            rgb[3] = alpha; // default alpha\n            return rgb;\n        }\n\n        // rgba(250,20,0,0.4)\n        if ((m = css.match(RE_RGBA_LEGACY))) {\n            var rgb$1 = m.slice(1, 5);\n            for (var i$1 = 0; i$1 < 4; i$1++) {\n                rgb$1[i$1] = +percentToAbsolute(rgb$1[i$1], 0, 255);\n            }\n            return rgb$1;\n        }\n\n        // hsl(0,100%,50%)\n        if ((m = css.match(RE_HSL)) || (m = css.match(RE_HSL_LEGACY))) {\n            var hsl = m.slice(1, 4);\n            hsl[0] = +noneToValue(hsl[0].replace('deg', ''), 0);\n            hsl[1] = +percentToAbsolute(noneToValue(hsl[1], 0), 0, 100) * 0.01;\n            hsl[2] = +percentToAbsolute(noneToValue(hsl[2], 0), 0, 100) * 0.01;\n            var rgb$2 = roundRGB(hsl2rgb(hsl));\n            var alpha$1 = m[4] !== undefined ? +percentToAbsolute(m[4], 0, 1) : 1;\n            rgb$2[3] = alpha$1;\n            return rgb$2;\n        }\n\n        // hsla(0,100%,50%,0.5)\n        if ((m = css.match(RE_HSLA_LEGACY))) {\n            var hsl$1 = m.slice(1, 4);\n            hsl$1[1] *= 0.01;\n            hsl$1[2] *= 0.01;\n            var rgb$3 = hsl2rgb(hsl$1);\n            for (var i$2 = 0; i$2 < 3; i$2++) {\n                rgb$3[i$2] = round$3(rgb$3[i$2]);\n            }\n            rgb$3[3] = +m[4]; // default alpha = 1\n            return rgb$3;\n        }\n\n        if ((m = css.match(RE_LAB))) {\n            var lab = m.slice(1, 4);\n            lab[0] = percentToAbsolute(noneToValue(lab[0], 0), 0, 100);\n            lab[1] = percentToAbsolute(noneToValue(lab[1], 0), -125, 125, true);\n            lab[2] = percentToAbsolute(noneToValue(lab[2], 0), -125, 125, true);\n            // convert to D50 Lab whitepoint\n            var wp = getLabWhitePoint();\n            setLabWhitePoint('d50');\n            var rgb$4 = roundRGB(lab2rgb(lab));\n            // convert back to original Lab whitepoint\n            setLabWhitePoint(wp);\n            var alpha$2 = m[4] !== undefined ? +percentToAbsolute(m[4], 0, 1) : 1;\n            rgb$4[3] = alpha$2;\n            return rgb$4;\n        }\n\n        if ((m = css.match(RE_LCH))) {\n            var lch = m.slice(1, 4);\n            lch[0] = percentToAbsolute(lch[0], 0, 100);\n            lch[1] = percentToAbsolute(noneToValue(lch[1], 0), 0, 150, false);\n            lch[2] = +noneToValue(lch[2].replace('deg', ''), 0);\n            // convert to D50 Lab whitepoint\n            var wp$1 = getLabWhitePoint();\n            setLabWhitePoint('d50');\n            var rgb$5 = roundRGB(lch2rgb(lch));\n            // convert back to original Lab whitepoint\n            setLabWhitePoint(wp$1);\n            var alpha$3 = m[4] !== undefined ? +percentToAbsolute(m[4], 0, 1) : 1;\n            rgb$5[3] = alpha$3;\n            return rgb$5;\n        }\n\n        if ((m = css.match(RE_OKLAB))) {\n            var oklab = m.slice(1, 4);\n            oklab[0] = percentToAbsolute(noneToValue(oklab[0], 0), 0, 1);\n            oklab[1] = percentToAbsolute(noneToValue(oklab[1], 0), -0.4, 0.4, true);\n            oklab[2] = percentToAbsolute(noneToValue(oklab[2], 0), -0.4, 0.4, true);\n            var rgb$6 = roundRGB(oklab2rgb(oklab));\n            var alpha$4 = m[4] !== undefined ? +percentToAbsolute(m[4], 0, 1) : 1;\n            rgb$6[3] = alpha$4;\n            return rgb$6;\n        }\n\n        if ((m = css.match(RE_OKLCH))) {\n            var oklch = m.slice(1, 4);\n            oklch[0] = percentToAbsolute(noneToValue(oklch[0], 0), 0, 1);\n            oklch[1] = percentToAbsolute(noneToValue(oklch[1], 0), 0, 0.4, false);\n            oklch[2] = +noneToValue(oklch[2].replace('deg', ''), 0);\n            var rgb$7 = roundRGB(oklch2rgb(oklch));\n            var alpha$5 = m[4] !== undefined ? +percentToAbsolute(m[4], 0, 1) : 1;\n            rgb$7[3] = alpha$5;\n            return rgb$7;\n        }\n    };\n\n    css2rgb.test = function (s) {\n        return (\n            // modern\n            RE_RGB.test(s) ||\n            RE_HSL.test(s) ||\n            RE_LAB.test(s) ||\n            RE_LCH.test(s) ||\n            RE_OKLAB.test(s) ||\n            RE_OKLCH.test(s) ||\n            // legacy\n            RE_RGB_LEGACY.test(s) ||\n            RE_RGBA_LEGACY.test(s) ||\n            RE_HSL_LEGACY.test(s) ||\n            RE_HSLA_LEGACY.test(s) ||\n            s === 'transparent'\n        );\n    };\n\n    Color.prototype.css = function (mode) {\n        return rgb2css(this._rgb, mode);\n    };\n\n    var css = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['css']) ));\n    };\n    chroma.css = css;\n\n    input.format.css = css2rgb;\n\n    input.autodetect.push({\n        p: 5,\n        test: function (h) {\n            var rest = [], len = arguments.length - 1;\n            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];\n\n            if (!rest.length && type(h) === 'string' && css2rgb.test(h)) {\n                return 'css';\n            }\n        }\n    });\n\n    input.format.gl = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var rgb = unpack(args, 'rgba');\n        rgb[0] *= 255;\n        rgb[1] *= 255;\n        rgb[2] *= 255;\n        return rgb;\n    };\n\n    var gl = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['gl']) ));\n    };\n    chroma.gl = gl;\n\n    Color.prototype.gl = function () {\n        var rgb = this._rgb;\n        return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255, rgb[3]];\n    };\n\n    var floor$3 = Math.floor;\n\n    /*\n     * this is basically just HSV with some minor tweaks\n     *\n     * hue.. [0..360]\n     * chroma .. [0..1]\n     * grayness .. [0..1]\n     */\n\n    var hcg2rgb = function () {\n        var assign, assign$1, assign$2, assign$3, assign$4, assign$5;\n\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n        args = unpack(args, 'hcg');\n        var h = args[0];\n        var c = args[1];\n        var _g = args[2];\n        var r, g, b;\n        _g = _g * 255;\n        var _c = c * 255;\n        if (c === 0) {\n            r = g = b = _g;\n        } else {\n            if (h === 360) { h = 0; }\n            if (h > 360) { h -= 360; }\n            if (h < 0) { h += 360; }\n            h /= 60;\n            var i = floor$3(h);\n            var f = h - i;\n            var p = _g * (1 - c);\n            var q = p + _c * (1 - f);\n            var t = p + _c * f;\n            var v = p + _c;\n            switch (i) {\n                case 0:\n                    (assign = [v, t, p], r = assign[0], g = assign[1], b = assign[2]);\n                    break;\n                case 1:\n                    (assign$1 = [q, v, p], r = assign$1[0], g = assign$1[1], b = assign$1[2]);\n                    break;\n                case 2:\n                    (assign$2 = [p, v, t], r = assign$2[0], g = assign$2[1], b = assign$2[2]);\n                    break;\n                case 3:\n                    (assign$3 = [p, q, v], r = assign$3[0], g = assign$3[1], b = assign$3[2]);\n                    break;\n                case 4:\n                    (assign$4 = [t, p, v], r = assign$4[0], g = assign$4[1], b = assign$4[2]);\n                    break;\n                case 5:\n                    (assign$5 = [v, p, q], r = assign$5[0], g = assign$5[1], b = assign$5[2]);\n                    break;\n            }\n        }\n        return [r, g, b, args.length > 3 ? args[3] : 1];\n    };\n\n    var rgb2hcg = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var minRgb = min$3(r, g, b);\n        var maxRgb = max$3(r, g, b);\n        var delta = maxRgb - minRgb;\n        var c = (delta * 100) / 255;\n        var _g = (minRgb / (255 - delta)) * 100;\n        var h;\n        if (delta === 0) {\n            h = Number.NaN;\n        } else {\n            if (r === maxRgb) { h = (g - b) / delta; }\n            if (g === maxRgb) { h = 2 + (b - r) / delta; }\n            if (b === maxRgb) { h = 4 + (r - g) / delta; }\n            h *= 60;\n            if (h < 0) { h += 360; }\n        }\n        return [h, c, _g];\n    };\n\n    Color.prototype.hcg = function () {\n        return rgb2hcg(this._rgb);\n    };\n\n    var hcg$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['hcg']) ));\n    };\n    chroma.hcg = hcg$1;\n\n    input.format.hcg = hcg2rgb;\n\n    input.autodetect.push({\n        p: 1,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack(args, 'hcg');\n            if (type(args) === 'array' && args.length === 3) {\n                return 'hcg';\n            }\n        }\n    });\n\n    var RE_HEX = /^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n    var RE_HEXA = /^#?([A-Fa-f0-9]{8}|[A-Fa-f0-9]{4})$/;\n\n    var hex2rgb = function (hex) {\n        if (hex.match(RE_HEX)) {\n            // remove optional leading #\n            if (hex.length === 4 || hex.length === 7) {\n                hex = hex.substr(1);\n            }\n            // expand short-notation to full six-digit\n            if (hex.length === 3) {\n                hex = hex.split('');\n                hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n            }\n            var u = parseInt(hex, 16);\n            var r = u >> 16;\n            var g = (u >> 8) & 0xff;\n            var b = u & 0xff;\n            return [r, g, b, 1];\n        }\n\n        // match rgba hex format, eg #FF000077\n        if (hex.match(RE_HEXA)) {\n            if (hex.length === 5 || hex.length === 9) {\n                // remove optional leading #\n                hex = hex.substr(1);\n            }\n            // expand short-notation to full eight-digit\n            if (hex.length === 4) {\n                hex = hex.split('');\n                hex =\n                    hex[0] +\n                    hex[0] +\n                    hex[1] +\n                    hex[1] +\n                    hex[2] +\n                    hex[2] +\n                    hex[3] +\n                    hex[3];\n            }\n            var u$1 = parseInt(hex, 16);\n            var r$1 = (u$1 >> 24) & 0xff;\n            var g$1 = (u$1 >> 16) & 0xff;\n            var b$1 = (u$1 >> 8) & 0xff;\n            var a = Math.round(((u$1 & 0xff) / 0xff) * 100) / 100;\n            return [r$1, g$1, b$1, a];\n        }\n\n        // we used to check for css colors here\n        // if _input.css? and rgb = _input.css hex\n        //     return rgb\n\n        throw new Error((\"unknown hex color: \" + hex));\n    };\n\n    var round$2 = Math.round;\n\n    var rgb2hex = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack(args, 'rgba');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var a = ref[3];\n        var mode = last(args) || 'auto';\n        if (a === undefined) { a = 1; }\n        if (mode === 'auto') {\n            mode = a < 1 ? 'rgba' : 'rgb';\n        }\n        r = round$2(r);\n        g = round$2(g);\n        b = round$2(b);\n        var u = (r << 16) | (g << 8) | b;\n        var str = '000000' + u.toString(16); //#.toUpperCase();\n        str = str.substr(str.length - 6);\n        var hxa = '0' + round$2(a * 255).toString(16);\n        hxa = hxa.substr(hxa.length - 2);\n        switch (mode.toLowerCase()) {\n            case 'rgba':\n                return (\"#\" + str + hxa);\n            case 'argb':\n                return (\"#\" + hxa + str);\n            default:\n                return (\"#\" + str);\n        }\n    };\n\n    Color.prototype.hex = function (mode) {\n        return rgb2hex(this._rgb, mode);\n    };\n\n    var hex = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['hex']) ));\n    };\n    chroma.hex = hex;\n\n    input.format.hex = hex2rgb;\n    input.autodetect.push({\n        p: 4,\n        test: function (h) {\n            var rest = [], len = arguments.length - 1;\n            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];\n\n            if (\n                !rest.length &&\n                type(h) === 'string' &&\n                [3, 4, 5, 6, 7, 8, 9].indexOf(h.length) >= 0\n            ) {\n                return 'hex';\n            }\n        }\n    });\n\n    var cos$3 = Math.cos;\n\n    /*\n     * hue [0..360]\n     * saturation [0..1]\n     * intensity [0..1]\n     */\n    var hsi2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        /*\n        borrowed from here:\n        http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp\n        */\n        args = unpack(args, 'hsi');\n        var h = args[0];\n        var s = args[1];\n        var i = args[2];\n        var r, g, b;\n\n        if (isNaN(h)) { h = 0; }\n        if (isNaN(s)) { s = 0; }\n        // normalize hue\n        if (h > 360) { h -= 360; }\n        if (h < 0) { h += 360; }\n        h /= 360;\n        if (h < 1 / 3) {\n            b = (1 - s) / 3;\n            r = (1 + (s * cos$3(TWOPI * h)) / cos$3(PITHIRD - TWOPI * h)) / 3;\n            g = 1 - (b + r);\n        } else if (h < 2 / 3) {\n            h -= 1 / 3;\n            r = (1 - s) / 3;\n            g = (1 + (s * cos$3(TWOPI * h)) / cos$3(PITHIRD - TWOPI * h)) / 3;\n            b = 1 - (r + g);\n        } else {\n            h -= 2 / 3;\n            g = (1 - s) / 3;\n            b = (1 + (s * cos$3(TWOPI * h)) / cos$3(PITHIRD - TWOPI * h)) / 3;\n            r = 1 - (g + b);\n        }\n        r = limit(i * r * 3);\n        g = limit(i * g * 3);\n        b = limit(i * b * 3);\n        return [r * 255, g * 255, b * 255, args.length > 3 ? args[3] : 1];\n    };\n\n    var min$2 = Math.min;\n    var sqrt$3 = Math.sqrt;\n    var acos = Math.acos;\n\n    var rgb2hsi = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        /*\n        borrowed from here:\n        http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp\n        */\n        var ref = unpack(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        r /= 255;\n        g /= 255;\n        b /= 255;\n        var h;\n        var min_ = min$2(r, g, b);\n        var i = (r + g + b) / 3;\n        var s = i > 0 ? 1 - min_ / i : 0;\n        if (s === 0) {\n            h = NaN;\n        } else {\n            h = (r - g + (r - b)) / 2;\n            h /= sqrt$3((r - g) * (r - g) + (r - b) * (g - b));\n            h = acos(h);\n            if (b > g) {\n                h = TWOPI - h;\n            }\n            h /= TWOPI;\n        }\n        return [h * 360, s, i];\n    };\n\n    Color.prototype.hsi = function () {\n        return rgb2hsi(this._rgb);\n    };\n\n    var hsi$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['hsi']) ));\n    };\n    chroma.hsi = hsi$1;\n\n    input.format.hsi = hsi2rgb;\n\n    input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack(args, 'hsi');\n            if (type(args) === 'array' && args.length === 3) {\n                return 'hsi';\n            }\n        }\n    });\n\n    Color.prototype.hsl = function () {\n        return rgb2hsl$1(this._rgb);\n    };\n\n    var hsl$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['hsl']) ));\n    };\n    chroma.hsl = hsl$1;\n\n    input.format.hsl = hsl2rgb;\n\n    input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack(args, 'hsl');\n            if (type(args) === 'array' && args.length === 3) {\n                return 'hsl';\n            }\n        }\n    });\n\n    var floor$2 = Math.floor;\n\n    var hsv2rgb = function () {\n        var assign, assign$1, assign$2, assign$3, assign$4, assign$5;\n\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n        args = unpack(args, 'hsv');\n        var h = args[0];\n        var s = args[1];\n        var v = args[2];\n        var r, g, b;\n        v *= 255;\n        if (s === 0) {\n            r = g = b = v;\n        } else {\n            if (h === 360) { h = 0; }\n            if (h > 360) { h -= 360; }\n            if (h < 0) { h += 360; }\n            h /= 60;\n\n            var i = floor$2(h);\n            var f = h - i;\n            var p = v * (1 - s);\n            var q = v * (1 - s * f);\n            var t = v * (1 - s * (1 - f));\n\n            switch (i) {\n                case 0:\n                    (assign = [v, t, p], r = assign[0], g = assign[1], b = assign[2]);\n                    break;\n                case 1:\n                    (assign$1 = [q, v, p], r = assign$1[0], g = assign$1[1], b = assign$1[2]);\n                    break;\n                case 2:\n                    (assign$2 = [p, v, t], r = assign$2[0], g = assign$2[1], b = assign$2[2]);\n                    break;\n                case 3:\n                    (assign$3 = [p, q, v], r = assign$3[0], g = assign$3[1], b = assign$3[2]);\n                    break;\n                case 4:\n                    (assign$4 = [t, p, v], r = assign$4[0], g = assign$4[1], b = assign$4[2]);\n                    break;\n                case 5:\n                    (assign$5 = [v, p, q], r = assign$5[0], g = assign$5[1], b = assign$5[2]);\n                    break;\n            }\n        }\n        return [r, g, b, args.length > 3 ? args[3] : 1];\n    };\n\n    var min$1 = Math.min;\n    var max$1 = Math.max;\n\n    /*\n     * supported arguments:\n     * - rgb2hsv(r,g,b)\n     * - rgb2hsv([r,g,b])\n     * - rgb2hsv({r,g,b})\n     */\n    var rgb2hsl = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack(args, 'rgb');\n        var r = args[0];\n        var g = args[1];\n        var b = args[2];\n        var min_ = min$1(r, g, b);\n        var max_ = max$1(r, g, b);\n        var delta = max_ - min_;\n        var h, s, v;\n        v = max_ / 255.0;\n        if (max_ === 0) {\n            h = Number.NaN;\n            s = 0;\n        } else {\n            s = delta / max_;\n            if (r === max_) { h = (g - b) / delta; }\n            if (g === max_) { h = 2 + (b - r) / delta; }\n            if (b === max_) { h = 4 + (r - g) / delta; }\n            h *= 60;\n            if (h < 0) { h += 360; }\n        }\n        return [h, s, v];\n    };\n\n    Color.prototype.hsv = function () {\n        return rgb2hsl(this._rgb);\n    };\n\n    var hsv$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['hsv']) ));\n    };\n    chroma.hsv = hsv$1;\n\n    input.format.hsv = hsv2rgb;\n\n    input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack(args, 'hsv');\n            if (type(args) === 'array' && args.length === 3) {\n                return 'hsv';\n            }\n        }\n    });\n\n    Color.prototype.lab = function () {\n        return rgb2lab(this._rgb);\n    };\n\n    var lab$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['lab']) ));\n    };\n    Object.assign(chroma, { lab: lab$1, getLabWhitePoint: getLabWhitePoint, setLabWhitePoint: setLabWhitePoint });\n\n    input.format.lab = lab2rgb;\n\n    input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack(args, 'lab');\n            if (type(args) === 'array' && args.length === 3) {\n                return 'lab';\n            }\n        }\n    });\n\n    var hcl2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var hcl = reverse3(unpack(args, 'hcl'));\n        return lch2rgb.apply(void 0, hcl);\n    };\n\n    Color.prototype.lch = function () {\n        return rgb2lch(this._rgb);\n    };\n    Color.prototype.hcl = function () {\n        return reverse3(rgb2lch(this._rgb));\n    };\n\n    var lch$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['lch']) ));\n    };\n    var hcl = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['hcl']) ));\n    };\n\n    Object.assign(chroma, { lch: lch$1, hcl: hcl });\n\n    input.format.lch = lch2rgb;\n    input.format.hcl = hcl2rgb;\n    ['lch', 'hcl'].forEach(function (m) { return input.autodetect.push({\n            p: 2,\n            test: function () {\n                var args = [], len = arguments.length;\n                while ( len-- ) args[ len ] = arguments[ len ];\n\n                args = unpack(args, m);\n                if (type(args) === 'array' && args.length === 3) {\n                    return m;\n                }\n            }\n        }); }\n    );\n\n    var num2rgb = function (num) {\n        if (type(num) == 'number' && num >= 0 && num <= 0xffffff) {\n            var r = num >> 16;\n            var g = (num >> 8) & 0xff;\n            var b = num & 0xff;\n            return [r, g, b, 1];\n        }\n        throw new Error('unknown num color: ' + num);\n    };\n\n    var rgb2num = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        return (r << 16) + (g << 8) + b;\n    };\n\n    Color.prototype.num = function () {\n        return rgb2num(this._rgb);\n    };\n\n    var num$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['num']) ));\n    };\n\n    Object.assign(chroma, { num: num$1 });\n\n    input.format.num = num2rgb;\n\n    input.autodetect.push({\n        p: 5,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            if (\n                args.length === 1 &&\n                type(args[0]) === 'number' &&\n                args[0] >= 0 &&\n                args[0] <= 0xffffff\n            ) {\n                return 'num';\n            }\n        }\n    });\n\n    var round$1 = Math.round;\n\n    Color.prototype.rgb = function (rnd) {\n        if ( rnd === void 0 ) rnd = true;\n\n        if (rnd === false) { return this._rgb.slice(0, 3); }\n        return this._rgb.slice(0, 3).map(round$1);\n    };\n\n    Color.prototype.rgba = function (rnd) {\n        if ( rnd === void 0 ) rnd = true;\n\n        return this._rgb.slice(0, 4).map(function (v, i) {\n            return i < 3 ? (rnd === false ? v : round$1(v)) : v;\n        });\n    };\n\n    var rgb$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['rgb']) ));\n    };\n    Object.assign(chroma, { rgb: rgb$1 });\n\n    input.format.rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var rgba = unpack(args, 'rgba');\n        if (rgba[3] === undefined) { rgba[3] = 1; }\n        return rgba;\n    };\n\n    input.autodetect.push({\n        p: 3,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack(args, 'rgba');\n            if (\n                type(args) === 'array' &&\n                (args.length === 3 ||\n                    (args.length === 4 &&\n                        type(args[3]) == 'number' &&\n                        args[3] >= 0 &&\n                        args[3] <= 1))\n            ) {\n                return 'rgb';\n            }\n        }\n    });\n\n    /*\n     * Based on implementation by Neil Bartlett\n     * https://github.com/neilbartlett/color-temperature\n     */\n\n    var log$1 = Math.log;\n\n    var temperature2rgb = function (kelvin) {\n        var temp = kelvin / 100;\n        var r, g, b;\n        if (temp < 66) {\n            r = 255;\n            g =\n                temp < 6\n                    ? 0\n                    : -155.25485562709179 -\n                      0.44596950469579133 * (g = temp - 2) +\n                      104.49216199393888 * log$1(g);\n            b =\n                temp < 20\n                    ? 0\n                    : -254.76935184120902 +\n                      0.8274096064007395 * (b = temp - 10) +\n                      115.67994401066147 * log$1(b);\n        } else {\n            r =\n                351.97690566805693 +\n                0.114206453784165 * (r = temp - 55) -\n                40.25366309332127 * log$1(r);\n            g =\n                325.4494125711974 +\n                0.07943456536662342 * (g = temp - 50) -\n                28.0852963507957 * log$1(g);\n            b = 255;\n        }\n        return [r, g, b, 1];\n    };\n\n    /*\n     * Based on implementation by Neil Bartlett\n     * https://github.com/neilbartlett/color-temperature\n     **/\n\n    var round = Math.round;\n\n    var rgb2temperature = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var rgb = unpack(args, 'rgb');\n        var r = rgb[0],\n            b = rgb[2];\n        var minTemp = 1000;\n        var maxTemp = 40000;\n        var eps = 0.4;\n        var temp;\n        while (maxTemp - minTemp > eps) {\n            temp = (maxTemp + minTemp) * 0.5;\n            var rgb$1 = temperature2rgb(temp);\n            if (rgb$1[2] / rgb$1[0] >= b / r) {\n                maxTemp = temp;\n            } else {\n                minTemp = temp;\n            }\n        }\n        return round(temp);\n    };\n\n    Color.prototype.temp =\n        Color.prototype.kelvin =\n        Color.prototype.temperature =\n            function () {\n                return rgb2temperature(this._rgb);\n            };\n\n    var temp = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['temp']) ));\n    };\n    Object.assign(chroma, { temp: temp, kelvin: temp, temperature: temp });\n\n    input.format.temp =\n        input.format.kelvin =\n        input.format.temperature =\n            temperature2rgb;\n\n    Color.prototype.oklab = function () {\n        return rgb2oklab(this._rgb);\n    };\n\n    var oklab$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['oklab']) ));\n    };\n    Object.assign(chroma, { oklab: oklab$1 });\n\n    input.format.oklab = oklab2rgb;\n\n    input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack(args, 'oklab');\n            if (type(args) === 'array' && args.length === 3) {\n                return 'oklab';\n            }\n        }\n    });\n\n    Color.prototype.oklch = function () {\n        return rgb2oklch(this._rgb);\n    };\n\n    var oklch$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['oklch']) ));\n    };\n    Object.assign(chroma, { oklch: oklch$1 });\n\n    input.format.oklch = oklch2rgb;\n\n    input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack(args, 'oklch');\n            if (type(args) === 'array' && args.length === 3) {\n                return 'oklch';\n            }\n        }\n    });\n\n    /**\n    \tX11 color names\n\n    \thttp://www.w3.org/TR/css3-color/#svg-color\n    */\n\n    var w3cx11 = {\n        aliceblue: '#f0f8ff',\n        antiquewhite: '#faebd7',\n        aqua: '#00ffff',\n        aquamarine: '#7fffd4',\n        azure: '#f0ffff',\n        beige: '#f5f5dc',\n        bisque: '#ffe4c4',\n        black: '#000000',\n        blanchedalmond: '#ffebcd',\n        blue: '#0000ff',\n        blueviolet: '#8a2be2',\n        brown: '#a52a2a',\n        burlywood: '#deb887',\n        cadetblue: '#5f9ea0',\n        chartreuse: '#7fff00',\n        chocolate: '#d2691e',\n        coral: '#ff7f50',\n        cornflowerblue: '#6495ed',\n        cornsilk: '#fff8dc',\n        crimson: '#dc143c',\n        cyan: '#00ffff',\n        darkblue: '#00008b',\n        darkcyan: '#008b8b',\n        darkgoldenrod: '#b8860b',\n        darkgray: '#a9a9a9',\n        darkgreen: '#006400',\n        darkgrey: '#a9a9a9',\n        darkkhaki: '#bdb76b',\n        darkmagenta: '#8b008b',\n        darkolivegreen: '#556b2f',\n        darkorange: '#ff8c00',\n        darkorchid: '#9932cc',\n        darkred: '#8b0000',\n        darksalmon: '#e9967a',\n        darkseagreen: '#8fbc8f',\n        darkslateblue: '#483d8b',\n        darkslategray: '#2f4f4f',\n        darkslategrey: '#2f4f4f',\n        darkturquoise: '#00ced1',\n        darkviolet: '#9400d3',\n        deeppink: '#ff1493',\n        deepskyblue: '#00bfff',\n        dimgray: '#696969',\n        dimgrey: '#696969',\n        dodgerblue: '#1e90ff',\n        firebrick: '#b22222',\n        floralwhite: '#fffaf0',\n        forestgreen: '#228b22',\n        fuchsia: '#ff00ff',\n        gainsboro: '#dcdcdc',\n        ghostwhite: '#f8f8ff',\n        gold: '#ffd700',\n        goldenrod: '#daa520',\n        gray: '#808080',\n        green: '#008000',\n        greenyellow: '#adff2f',\n        grey: '#808080',\n        honeydew: '#f0fff0',\n        hotpink: '#ff69b4',\n        indianred: '#cd5c5c',\n        indigo: '#4b0082',\n        ivory: '#fffff0',\n        khaki: '#f0e68c',\n        laserlemon: '#ffff54',\n        lavender: '#e6e6fa',\n        lavenderblush: '#fff0f5',\n        lawngreen: '#7cfc00',\n        lemonchiffon: '#fffacd',\n        lightblue: '#add8e6',\n        lightcoral: '#f08080',\n        lightcyan: '#e0ffff',\n        lightgoldenrod: '#fafad2',\n        lightgoldenrodyellow: '#fafad2',\n        lightgray: '#d3d3d3',\n        lightgreen: '#90ee90',\n        lightgrey: '#d3d3d3',\n        lightpink: '#ffb6c1',\n        lightsalmon: '#ffa07a',\n        lightseagreen: '#20b2aa',\n        lightskyblue: '#87cefa',\n        lightslategray: '#778899',\n        lightslategrey: '#778899',\n        lightsteelblue: '#b0c4de',\n        lightyellow: '#ffffe0',\n        lime: '#00ff00',\n        limegreen: '#32cd32',\n        linen: '#faf0e6',\n        magenta: '#ff00ff',\n        maroon: '#800000',\n        maroon2: '#7f0000',\n        maroon3: '#b03060',\n        mediumaquamarine: '#66cdaa',\n        mediumblue: '#0000cd',\n        mediumorchid: '#ba55d3',\n        mediumpurple: '#9370db',\n        mediumseagreen: '#3cb371',\n        mediumslateblue: '#7b68ee',\n        mediumspringgreen: '#00fa9a',\n        mediumturquoise: '#48d1cc',\n        mediumvioletred: '#c71585',\n        midnightblue: '#191970',\n        mintcream: '#f5fffa',\n        mistyrose: '#ffe4e1',\n        moccasin: '#ffe4b5',\n        navajowhite: '#ffdead',\n        navy: '#000080',\n        oldlace: '#fdf5e6',\n        olive: '#808000',\n        olivedrab: '#6b8e23',\n        orange: '#ffa500',\n        orangered: '#ff4500',\n        orchid: '#da70d6',\n        palegoldenrod: '#eee8aa',\n        palegreen: '#98fb98',\n        paleturquoise: '#afeeee',\n        palevioletred: '#db7093',\n        papayawhip: '#ffefd5',\n        peachpuff: '#ffdab9',\n        peru: '#cd853f',\n        pink: '#ffc0cb',\n        plum: '#dda0dd',\n        powderblue: '#b0e0e6',\n        purple: '#800080',\n        purple2: '#7f007f',\n        purple3: '#a020f0',\n        rebeccapurple: '#663399',\n        red: '#ff0000',\n        rosybrown: '#bc8f8f',\n        royalblue: '#4169e1',\n        saddlebrown: '#8b4513',\n        salmon: '#fa8072',\n        sandybrown: '#f4a460',\n        seagreen: '#2e8b57',\n        seashell: '#fff5ee',\n        sienna: '#a0522d',\n        silver: '#c0c0c0',\n        skyblue: '#87ceeb',\n        slateblue: '#6a5acd',\n        slategray: '#708090',\n        slategrey: '#708090',\n        snow: '#fffafa',\n        springgreen: '#00ff7f',\n        steelblue: '#4682b4',\n        tan: '#d2b48c',\n        teal: '#008080',\n        thistle: '#d8bfd8',\n        tomato: '#ff6347',\n        turquoise: '#40e0d0',\n        violet: '#ee82ee',\n        wheat: '#f5deb3',\n        white: '#ffffff',\n        whitesmoke: '#f5f5f5',\n        yellow: '#ffff00',\n        yellowgreen: '#9acd32'\n    };\n\n    Color.prototype.name = function () {\n        var hex = rgb2hex(this._rgb, 'rgb');\n        for (var i = 0, list = Object.keys(w3cx11); i < list.length; i += 1) {\n            var n = list[i];\n\n            if (w3cx11[n] === hex) { return n.toLowerCase(); }\n        }\n        return hex;\n    };\n\n    input.format.named = function (name) {\n        name = name.toLowerCase();\n        if (w3cx11[name]) { return hex2rgb(w3cx11[name]); }\n        throw new Error('unknown color name: ' + name);\n    };\n\n    input.autodetect.push({\n        p: 5,\n        test: function (h) {\n            var rest = [], len = arguments.length - 1;\n            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];\n\n            if (!rest.length && type(h) === 'string' && w3cx11[h.toLowerCase()]) {\n                return 'named';\n            }\n        }\n    });\n\n    Color.prototype.alpha = function (a, mutate) {\n        if ( mutate === void 0 ) mutate = false;\n\n        if (a !== undefined && type(a) === 'number') {\n            if (mutate) {\n                this._rgb[3] = a;\n                return this;\n            }\n            return new Color([this._rgb[0], this._rgb[1], this._rgb[2], a], 'rgb');\n        }\n        return this._rgb[3];\n    };\n\n    Color.prototype.clipped = function () {\n        return this._rgb._clipped || false;\n    };\n\n    Color.prototype.darken = function (amount) {\n        if ( amount === void 0 ) amount = 1;\n\n        var me = this;\n        var lab = me.lab();\n        lab[0] -= labConstants.Kn * amount;\n        return new Color(lab, 'lab').alpha(me.alpha(), true);\n    };\n\n    Color.prototype.brighten = function (amount) {\n        if ( amount === void 0 ) amount = 1;\n\n        return this.darken(-amount);\n    };\n\n    Color.prototype.darker = Color.prototype.darken;\n    Color.prototype.brighter = Color.prototype.brighten;\n\n    Color.prototype.get = function (mc) {\n        var ref = mc.split('.');\n        var mode = ref[0];\n        var channel = ref[1];\n        var src = this[mode]();\n        if (channel) {\n            var i = mode.indexOf(channel) - (mode.substr(0, 2) === 'ok' ? 2 : 0);\n            if (i > -1) { return src[i]; }\n            throw new Error((\"unknown channel \" + channel + \" in mode \" + mode));\n        } else {\n            return src;\n        }\n    };\n\n    var pow$6 = Math.pow;\n\n    var EPS = 1e-7;\n    var MAX_ITER = 20;\n\n    Color.prototype.luminance = function (lum, mode) {\n        if ( mode === void 0 ) mode = 'rgb';\n\n        if (lum !== undefined && type(lum) === 'number') {\n            if (lum === 0) {\n                // return pure black\n                return new Color([0, 0, 0, this._rgb[3]], 'rgb');\n            }\n            if (lum === 1) {\n                // return pure white\n                return new Color([255, 255, 255, this._rgb[3]], 'rgb');\n            }\n            // compute new color using...\n            var cur_lum = this.luminance();\n            var max_iter = MAX_ITER;\n\n            var test = function (low, high) {\n                var mid = low.interpolate(high, 0.5, mode);\n                var lm = mid.luminance();\n                if (Math.abs(lum - lm) < EPS || !max_iter--) {\n                    // close enough\n                    return mid;\n                }\n                return lm > lum ? test(low, mid) : test(mid, high);\n            };\n\n            var rgb = (\n                cur_lum > lum\n                    ? test(new Color([0, 0, 0]), this)\n                    : test(this, new Color([255, 255, 255]))\n            ).rgb();\n            return new Color(rgb.concat( [this._rgb[3]]));\n        }\n        return rgb2luminance.apply(void 0, this._rgb.slice(0, 3));\n    };\n\n    var rgb2luminance = function (r, g, b) {\n        // relative luminance\n        // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        r = luminance_x(r);\n        g = luminance_x(g);\n        b = luminance_x(b);\n        return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n    };\n\n    var luminance_x = function (x) {\n        x /= 255;\n        return x <= 0.03928 ? x / 12.92 : pow$6((x + 0.055) / 1.055, 2.4);\n    };\n\n    var index = {};\n\n    function mix (col1, col2, f) {\n        if ( f === void 0 ) f = 0.5;\n        var rest = [], len = arguments.length - 3;\n        while ( len-- > 0 ) rest[ len ] = arguments[ len + 3 ];\n\n        var mode = rest[0] || 'lrgb';\n        if (!index[mode] && !rest.length) {\n            // fall back to the first supported mode\n            mode = Object.keys(index)[0];\n        }\n        if (!index[mode]) {\n            throw new Error((\"interpolation mode \" + mode + \" is not defined\"));\n        }\n        if (type(col1) !== 'object') { col1 = new Color(col1); }\n        if (type(col2) !== 'object') { col2 = new Color(col2); }\n        return index[mode](col1, col2, f).alpha(\n            col1.alpha() + f * (col2.alpha() - col1.alpha())\n        );\n    }\n\n    Color.prototype.mix = Color.prototype.interpolate = function (\n        col2,\n        f\n    ) {\n        if ( f === void 0 ) f = 0.5;\n        var rest = [], len = arguments.length - 2;\n        while ( len-- > 0 ) rest[ len ] = arguments[ len + 2 ];\n\n        return mix.apply(void 0, [ this, col2, f ].concat( rest ));\n    };\n\n    Color.prototype.premultiply = function (mutate) {\n        if ( mutate === void 0 ) mutate = false;\n\n        var rgb = this._rgb;\n        var a = rgb[3];\n        if (mutate) {\n            this._rgb = [rgb[0] * a, rgb[1] * a, rgb[2] * a, a];\n            return this;\n        } else {\n            return new Color([rgb[0] * a, rgb[1] * a, rgb[2] * a, a], 'rgb');\n        }\n    };\n\n    Color.prototype.saturate = function (amount) {\n        if ( amount === void 0 ) amount = 1;\n\n        var me = this;\n        var lch = me.lch();\n        lch[1] += labConstants.Kn * amount;\n        if (lch[1] < 0) { lch[1] = 0; }\n        return new Color(lch, 'lch').alpha(me.alpha(), true);\n    };\n\n    Color.prototype.desaturate = function (amount) {\n        if ( amount === void 0 ) amount = 1;\n\n        return this.saturate(-amount);\n    };\n\n    Color.prototype.set = function (mc, value, mutate) {\n        if ( mutate === void 0 ) mutate = false;\n\n        var ref = mc.split('.');\n        var mode = ref[0];\n        var channel = ref[1];\n        var src = this[mode]();\n        if (channel) {\n            var i = mode.indexOf(channel) - (mode.substr(0, 2) === 'ok' ? 2 : 0);\n            if (i > -1) {\n                if (type(value) == 'string') {\n                    switch (value.charAt(0)) {\n                        case '+':\n                            src[i] += +value;\n                            break;\n                        case '-':\n                            src[i] += +value;\n                            break;\n                        case '*':\n                            src[i] *= +value.substr(1);\n                            break;\n                        case '/':\n                            src[i] /= +value.substr(1);\n                            break;\n                        default:\n                            src[i] = +value;\n                    }\n                } else if (type(value) === 'number') {\n                    src[i] = value;\n                } else {\n                    throw new Error(\"unsupported value for Color.set\");\n                }\n                var out = new Color(src, mode);\n                if (mutate) {\n                    this._rgb = out._rgb;\n                    return this;\n                }\n                return out;\n            }\n            throw new Error((\"unknown channel \" + channel + \" in mode \" + mode));\n        } else {\n            return src;\n        }\n    };\n\n    Color.prototype.tint = function (f) {\n        if ( f === void 0 ) f = 0.5;\n        var rest = [], len = arguments.length - 1;\n        while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];\n\n        return mix.apply(void 0, [ this, 'white', f ].concat( rest ));\n    };\n\n    Color.prototype.shade = function (f) {\n        if ( f === void 0 ) f = 0.5;\n        var rest = [], len = arguments.length - 1;\n        while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];\n\n        return mix.apply(void 0, [ this, 'black', f ].concat( rest ));\n    };\n\n    var rgb = function (col1, col2, f) {\n        var xyz0 = col1._rgb;\n        var xyz1 = col2._rgb;\n        return new Color(\n            xyz0[0] + f * (xyz1[0] - xyz0[0]),\n            xyz0[1] + f * (xyz1[1] - xyz0[1]),\n            xyz0[2] + f * (xyz1[2] - xyz0[2]),\n            'rgb'\n        );\n    };\n\n    // register interpolator\n    index.rgb = rgb;\n\n    var sqrt$2 = Math.sqrt;\n    var pow$5 = Math.pow;\n\n    var lrgb = function (col1, col2, f) {\n        var ref = col1._rgb;\n        var x1 = ref[0];\n        var y1 = ref[1];\n        var z1 = ref[2];\n        var ref$1 = col2._rgb;\n        var x2 = ref$1[0];\n        var y2 = ref$1[1];\n        var z2 = ref$1[2];\n        return new Color(\n            sqrt$2(pow$5(x1, 2) * (1 - f) + pow$5(x2, 2) * f),\n            sqrt$2(pow$5(y1, 2) * (1 - f) + pow$5(y2, 2) * f),\n            sqrt$2(pow$5(z1, 2) * (1 - f) + pow$5(z2, 2) * f),\n            'rgb'\n        );\n    };\n\n    // register interpolator\n    index.lrgb = lrgb;\n\n    var lab = function (col1, col2, f) {\n        var xyz0 = col1.lab();\n        var xyz1 = col2.lab();\n        return new Color(\n            xyz0[0] + f * (xyz1[0] - xyz0[0]),\n            xyz0[1] + f * (xyz1[1] - xyz0[1]),\n            xyz0[2] + f * (xyz1[2] - xyz0[2]),\n            'lab'\n        );\n    };\n\n    // register interpolator\n    index.lab = lab;\n\n    function interpolate_hsx (col1, col2, f, m) {\n        var assign, assign$1;\n\n        var xyz0, xyz1;\n        if (m === 'hsl') {\n            xyz0 = col1.hsl();\n            xyz1 = col2.hsl();\n        } else if (m === 'hsv') {\n            xyz0 = col1.hsv();\n            xyz1 = col2.hsv();\n        } else if (m === 'hcg') {\n            xyz0 = col1.hcg();\n            xyz1 = col2.hcg();\n        } else if (m === 'hsi') {\n            xyz0 = col1.hsi();\n            xyz1 = col2.hsi();\n        } else if (m === 'lch' || m === 'hcl') {\n            m = 'hcl';\n            xyz0 = col1.hcl();\n            xyz1 = col2.hcl();\n        } else if (m === 'oklch') {\n            xyz0 = col1.oklch().reverse();\n            xyz1 = col2.oklch().reverse();\n        }\n\n        var hue0, hue1, sat0, sat1, lbv0, lbv1;\n        if (m.substr(0, 1) === 'h' || m === 'oklch') {\n            (assign = xyz0, hue0 = assign[0], sat0 = assign[1], lbv0 = assign[2]);\n            (assign$1 = xyz1, hue1 = assign$1[0], sat1 = assign$1[1], lbv1 = assign$1[2]);\n        }\n\n        var sat, hue, lbv, dh;\n\n        if (!isNaN(hue0) && !isNaN(hue1)) {\n            // both colors have hue\n            if (hue1 > hue0 && hue1 - hue0 > 180) {\n                dh = hue1 - (hue0 + 360);\n            } else if (hue1 < hue0 && hue0 - hue1 > 180) {\n                dh = hue1 + 360 - hue0;\n            } else {\n                dh = hue1 - hue0;\n            }\n            hue = hue0 + f * dh;\n        } else if (!isNaN(hue0)) {\n            hue = hue0;\n            if ((lbv1 == 1 || lbv1 == 0) && m != 'hsv') { sat = sat0; }\n        } else if (!isNaN(hue1)) {\n            hue = hue1;\n            if ((lbv0 == 1 || lbv0 == 0) && m != 'hsv') { sat = sat1; }\n        } else {\n            hue = Number.NaN;\n        }\n\n        if (sat === undefined) { sat = sat0 + f * (sat1 - sat0); }\n        lbv = lbv0 + f * (lbv1 - lbv0);\n        return m === 'oklch'\n            ? new Color([lbv, sat, hue], m)\n            : new Color([hue, sat, lbv], m);\n    }\n\n    var lch = function (col1, col2, f) {\n        return interpolate_hsx(col1, col2, f, 'lch');\n    };\n\n    // register interpolator\n    index.lch = lch;\n    index.hcl = lch;\n\n    var num = function (col1, col2, f) {\n        var c1 = col1.num();\n        var c2 = col2.num();\n        return new Color(c1 + f * (c2 - c1), 'num');\n    };\n\n    // register interpolator\n    index.num = num;\n\n    var hcg = function (col1, col2, f) {\n        return interpolate_hsx(col1, col2, f, 'hcg');\n    };\n\n    // register interpolator\n    index.hcg = hcg;\n\n    var hsi = function (col1, col2, f) {\n        return interpolate_hsx(col1, col2, f, 'hsi');\n    };\n\n    // register interpolator\n    index.hsi = hsi;\n\n    var hsl = function (col1, col2, f) {\n        return interpolate_hsx(col1, col2, f, 'hsl');\n    };\n\n    // register interpolator\n    index.hsl = hsl;\n\n    var hsv = function (col1, col2, f) {\n        return interpolate_hsx(col1, col2, f, 'hsv');\n    };\n\n    // register interpolator\n    index.hsv = hsv;\n\n    var oklab = function (col1, col2, f) {\n        var xyz0 = col1.oklab();\n        var xyz1 = col2.oklab();\n        return new Color(\n            xyz0[0] + f * (xyz1[0] - xyz0[0]),\n            xyz0[1] + f * (xyz1[1] - xyz0[1]),\n            xyz0[2] + f * (xyz1[2] - xyz0[2]),\n            'oklab'\n        );\n    };\n\n    // register interpolator\n    index.oklab = oklab;\n\n    var oklch = function (col1, col2, f) {\n        return interpolate_hsx(col1, col2, f, 'oklch');\n    };\n\n    // register interpolator\n    index.oklch = oklch;\n\n    var pow$4 = Math.pow;\n    var sqrt$1 = Math.sqrt;\n    var PI$1 = Math.PI;\n    var cos$2 = Math.cos;\n    var sin$2 = Math.sin;\n    var atan2$1 = Math.atan2;\n\n    function average (colors, mode, weights) {\n        if ( mode === void 0 ) mode = 'lrgb';\n        if ( weights === void 0 ) weights = null;\n\n        var l = colors.length;\n        if (!weights) { weights = Array.from(new Array(l)).map(function () { return 1; }); }\n        // normalize weights\n        var k =\n            l /\n            weights.reduce(function (a, b) {\n                return a + b;\n            });\n        weights.forEach(function (w, i) {\n            weights[i] *= k;\n        });\n        // convert colors to Color objects\n        colors = colors.map(function (c) { return new Color(c); });\n        if (mode === 'lrgb') {\n            return _average_lrgb(colors, weights);\n        }\n        var first = colors.shift();\n        var xyz = first.get(mode);\n        var cnt = [];\n        var dx = 0;\n        var dy = 0;\n        // initial color\n        for (var i = 0; i < xyz.length; i++) {\n            xyz[i] = (xyz[i] || 0) * weights[0];\n            cnt.push(isNaN(xyz[i]) ? 0 : weights[0]);\n            if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {\n                var A = (xyz[i] / 180) * PI$1;\n                dx += cos$2(A) * weights[0];\n                dy += sin$2(A) * weights[0];\n            }\n        }\n\n        var alpha = first.alpha() * weights[0];\n        colors.forEach(function (c, ci) {\n            var xyz2 = c.get(mode);\n            alpha += c.alpha() * weights[ci + 1];\n            for (var i = 0; i < xyz.length; i++) {\n                if (!isNaN(xyz2[i])) {\n                    cnt[i] += weights[ci + 1];\n                    if (mode.charAt(i) === 'h') {\n                        var A = (xyz2[i] / 180) * PI$1;\n                        dx += cos$2(A) * weights[ci + 1];\n                        dy += sin$2(A) * weights[ci + 1];\n                    } else {\n                        xyz[i] += xyz2[i] * weights[ci + 1];\n                    }\n                }\n            }\n        });\n\n        for (var i$1 = 0; i$1 < xyz.length; i$1++) {\n            if (mode.charAt(i$1) === 'h') {\n                var A$1 = (atan2$1(dy / cnt[i$1], dx / cnt[i$1]) / PI$1) * 180;\n                while (A$1 < 0) { A$1 += 360; }\n                while (A$1 >= 360) { A$1 -= 360; }\n                xyz[i$1] = A$1;\n            } else {\n                xyz[i$1] = xyz[i$1] / cnt[i$1];\n            }\n        }\n        alpha /= l;\n        return new Color(xyz, mode).alpha(alpha > 0.99999 ? 1 : alpha, true);\n    }\n    var _average_lrgb = function (colors, weights) {\n        var l = colors.length;\n        var xyz = [0, 0, 0, 0];\n        for (var i = 0; i < colors.length; i++) {\n            var col = colors[i];\n            var f = weights[i] / l;\n            var rgb = col._rgb;\n            xyz[0] += pow$4(rgb[0], 2) * f;\n            xyz[1] += pow$4(rgb[1], 2) * f;\n            xyz[2] += pow$4(rgb[2], 2) * f;\n            xyz[3] += rgb[3] * f;\n        }\n        xyz[0] = sqrt$1(xyz[0]);\n        xyz[1] = sqrt$1(xyz[1]);\n        xyz[2] = sqrt$1(xyz[2]);\n        if (xyz[3] > 0.9999999) { xyz[3] = 1; }\n        return new Color(clip_rgb(xyz));\n    };\n\n    // minimal multi-purpose interface\n\n\n    var pow$3 = Math.pow;\n\n    function scale (colors) {\n        // constructor\n        var _mode = 'rgb';\n        var _nacol = chroma('#ccc');\n        var _spread = 0;\n        // const _fixed = false;\n        var _domain = [0, 1];\n        var _pos = [];\n        var _padding = [0, 0];\n        var _classes = false;\n        var _colors = [];\n        var _out = false;\n        var _min = 0;\n        var _max = 1;\n        var _correctLightness = false;\n        var _colorCache = {};\n        var _useCache = true;\n        var _gamma = 1;\n\n        // private methods\n\n        var setColors = function (colors) {\n            colors = colors || ['#fff', '#000'];\n            if (\n                colors &&\n                type(colors) === 'string' &&\n                chroma.brewer &&\n                chroma.brewer[colors.toLowerCase()]\n            ) {\n                colors = chroma.brewer[colors.toLowerCase()];\n            }\n            if (type(colors) === 'array') {\n                // handle single color\n                if (colors.length === 1) {\n                    colors = [colors[0], colors[0]];\n                }\n                // make a copy of the colors\n                colors = colors.slice(0);\n                // convert to chroma classes\n                for (var c = 0; c < colors.length; c++) {\n                    colors[c] = chroma(colors[c]);\n                }\n                // auto-fill color position\n                _pos.length = 0;\n                for (var c$1 = 0; c$1 < colors.length; c$1++) {\n                    _pos.push(c$1 / (colors.length - 1));\n                }\n            }\n            resetCache();\n            return (_colors = colors);\n        };\n\n        var getClass = function (value) {\n            if (_classes != null) {\n                var n = _classes.length - 1;\n                var i = 0;\n                while (i < n && value >= _classes[i]) {\n                    i++;\n                }\n                return i - 1;\n            }\n            return 0;\n        };\n\n        var tMapLightness = function (t) { return t; };\n        var tMapDomain = function (t) { return t; };\n\n        // const classifyValue = function(value) {\n        //     let val = value;\n        //     if (_classes.length > 2) {\n        //         const n = _classes.length-1;\n        //         const i = getClass(value);\n        //         const minc = _classes[0] + ((_classes[1]-_classes[0]) * (0 + (_spread * 0.5)));  // center of 1st class\n        //         const maxc = _classes[n-1] + ((_classes[n]-_classes[n-1]) * (1 - (_spread * 0.5)));  // center of last class\n        //         val = _min + ((((_classes[i] + ((_classes[i+1] - _classes[i]) * 0.5)) - minc) / (maxc-minc)) * (_max - _min));\n        //     }\n        //     return val;\n        // };\n\n        var getColor = function (val, bypassMap) {\n            var col, t;\n            if (bypassMap == null) {\n                bypassMap = false;\n            }\n            if (isNaN(val) || val === null) {\n                return _nacol;\n            }\n            if (!bypassMap) {\n                if (_classes && _classes.length > 2) {\n                    // find the class\n                    var c = getClass(val);\n                    t = c / (_classes.length - 2);\n                } else if (_max !== _min) {\n                    // just interpolate between min/max\n                    t = (val - _min) / (_max - _min);\n                } else {\n                    t = 1;\n                }\n            } else {\n                t = val;\n            }\n\n            // domain map\n            t = tMapDomain(t);\n\n            if (!bypassMap) {\n                t = tMapLightness(t); // lightness correction\n            }\n\n            if (_gamma !== 1) {\n                t = pow$3(t, _gamma);\n            }\n\n            t = _padding[0] + t * (1 - _padding[0] - _padding[1]);\n\n            t = limit(t, 0, 1);\n\n            var k = Math.floor(t * 10000);\n\n            if (_useCache && _colorCache[k]) {\n                col = _colorCache[k];\n            } else {\n                if (type(_colors) === 'array') {\n                    //for i in [0.._pos.length-1]\n                    for (var i = 0; i < _pos.length; i++) {\n                        var p = _pos[i];\n                        if (t <= p) {\n                            col = _colors[i];\n                            break;\n                        }\n                        if (t >= p && i === _pos.length - 1) {\n                            col = _colors[i];\n                            break;\n                        }\n                        if (t > p && t < _pos[i + 1]) {\n                            t = (t - p) / (_pos[i + 1] - p);\n                            col = chroma.interpolate(\n                                _colors[i],\n                                _colors[i + 1],\n                                t,\n                                _mode\n                            );\n                            break;\n                        }\n                    }\n                } else if (type(_colors) === 'function') {\n                    col = _colors(t);\n                }\n                if (_useCache) {\n                    _colorCache[k] = col;\n                }\n            }\n            return col;\n        };\n\n        var resetCache = function () { return (_colorCache = {}); };\n\n        setColors(colors);\n\n        // public interface\n\n        var f = function (v) {\n            var c = chroma(getColor(v));\n            if (_out && c[_out]) {\n                return c[_out]();\n            } else {\n                return c;\n            }\n        };\n\n        f.classes = function (classes) {\n            if (classes != null) {\n                if (type(classes) === 'array') {\n                    _classes = classes;\n                    _domain = [classes[0], classes[classes.length - 1]];\n                } else {\n                    var d = chroma.analyze(_domain);\n                    if (classes === 0) {\n                        _classes = [d.min, d.max];\n                    } else {\n                        _classes = chroma.limits(d, 'e', classes);\n                    }\n                }\n                return f;\n            }\n            return _classes;\n        };\n\n        f.domain = function (domain) {\n            if (!arguments.length) {\n                return _domain;\n            }\n            _min = domain[0];\n            _max = domain[domain.length - 1];\n            _pos = [];\n            var k = _colors.length;\n            if (domain.length === k && _min !== _max) {\n                // update positions\n                for (var i = 0, list = Array.from(domain); i < list.length; i += 1) {\n                    var d = list[i];\n\n                    _pos.push((d - _min) / (_max - _min));\n                }\n            } else {\n                for (var c = 0; c < k; c++) {\n                    _pos.push(c / (k - 1));\n                }\n                if (domain.length > 2) {\n                    // set domain map\n                    var tOut = domain.map(function (d, i) { return i / (domain.length - 1); });\n                    var tBreaks = domain.map(function (d) { return (d - _min) / (_max - _min); });\n                    if (!tBreaks.every(function (val, i) { return tOut[i] === val; })) {\n                        tMapDomain = function (t) {\n                            if (t <= 0 || t >= 1) { return t; }\n                            var i = 0;\n                            while (t >= tBreaks[i + 1]) { i++; }\n                            var f =\n                                (t - tBreaks[i]) / (tBreaks[i + 1] - tBreaks[i]);\n                            var out = tOut[i] + f * (tOut[i + 1] - tOut[i]);\n                            return out;\n                        };\n                    }\n                }\n            }\n            _domain = [_min, _max];\n            return f;\n        };\n\n        f.mode = function (_m) {\n            if (!arguments.length) {\n                return _mode;\n            }\n            _mode = _m;\n            resetCache();\n            return f;\n        };\n\n        f.range = function (colors, _pos) {\n            setColors(colors);\n            return f;\n        };\n\n        f.out = function (_o) {\n            _out = _o;\n            return f;\n        };\n\n        f.spread = function (val) {\n            if (!arguments.length) {\n                return _spread;\n            }\n            _spread = val;\n            return f;\n        };\n\n        f.correctLightness = function (v) {\n            if (v == null) {\n                v = true;\n            }\n            _correctLightness = v;\n            resetCache();\n            if (_correctLightness) {\n                tMapLightness = function (t) {\n                    var L0 = getColor(0, true).lab()[0];\n                    var L1 = getColor(1, true).lab()[0];\n                    var pol = L0 > L1;\n                    var L_actual = getColor(t, true).lab()[0];\n                    var L_ideal = L0 + (L1 - L0) * t;\n                    var L_diff = L_actual - L_ideal;\n                    var t0 = 0;\n                    var t1 = 1;\n                    var max_iter = 20;\n                    while (Math.abs(L_diff) > 1e-2 && max_iter-- > 0) {\n                        (function () {\n                            if (pol) {\n                                L_diff *= -1;\n                            }\n                            if (L_diff < 0) {\n                                t0 = t;\n                                t += (t1 - t) * 0.5;\n                            } else {\n                                t1 = t;\n                                t += (t0 - t) * 0.5;\n                            }\n                            L_actual = getColor(t, true).lab()[0];\n                            return (L_diff = L_actual - L_ideal);\n                        })();\n                    }\n                    return t;\n                };\n            } else {\n                tMapLightness = function (t) { return t; };\n            }\n            return f;\n        };\n\n        f.padding = function (p) {\n            if (p != null) {\n                if (type(p) === 'number') {\n                    p = [p, p];\n                }\n                _padding = p;\n                return f;\n            } else {\n                return _padding;\n            }\n        };\n\n        f.colors = function (numColors, out) {\n            // If no arguments are given, return the original colors that were provided\n            if (arguments.length < 2) {\n                out = 'hex';\n            }\n            var result = [];\n\n            if (arguments.length === 0) {\n                result = _colors.slice(0);\n            } else if (numColors === 1) {\n                result = [f(0.5)];\n            } else if (numColors > 1) {\n                var dm = _domain[0];\n                var dd = _domain[1] - dm;\n                result = __range__(0, numColors).map(function (i) { return f(dm + (i / (numColors - 1)) * dd); }\n                );\n            } else {\n                // returns all colors based on the defined classes\n                colors = [];\n                var samples = [];\n                if (_classes && _classes.length > 2) {\n                    for (\n                        var i = 1, end = _classes.length, asc = 1 <= end;\n                        asc ? i < end : i > end;\n                        asc ? i++ : i--\n                    ) {\n                        samples.push((_classes[i - 1] + _classes[i]) * 0.5);\n                    }\n                } else {\n                    samples = _domain;\n                }\n                result = samples.map(function (v) { return f(v); });\n            }\n\n            if (chroma[out]) {\n                result = result.map(function (c) { return c[out](); });\n            }\n            return result;\n        };\n\n        f.cache = function (c) {\n            if (c != null) {\n                _useCache = c;\n                return f;\n            } else {\n                return _useCache;\n            }\n        };\n\n        f.gamma = function (g) {\n            if (g != null) {\n                _gamma = g;\n                return f;\n            } else {\n                return _gamma;\n            }\n        };\n\n        f.nodata = function (d) {\n            if (d != null) {\n                _nacol = chroma(d);\n                return f;\n            } else {\n                return _nacol;\n            }\n        };\n\n        return f;\n    }\n\n    function __range__(left, right, inclusive) {\n        var range = [];\n        var ascending = left < right;\n        var end = right ;\n        for (var i = left; ascending ? i < end : i > end; ascending ? i++ : i--) {\n            range.push(i);\n        }\n        return range;\n    }\n\n    //\n    // interpolates between a set of colors uzing a bezier spline\n    //\n\n\n    // nth row of the pascal triangle\n    var binom_row = function (n) {\n        var row = [1, 1];\n        for (var i = 1; i < n; i++) {\n            var newrow = [1];\n            for (var j = 1; j <= row.length; j++) {\n                newrow[j] = (row[j] || 0) + row[j - 1];\n            }\n            row = newrow;\n        }\n        return row;\n    };\n\n    var bezier = function (colors) {\n        var assign, assign$1, assign$2;\n\n        var I, lab0, lab1, lab2;\n        colors = colors.map(function (c) { return new Color(c); });\n        if (colors.length === 2) {\n            // linear interpolation\n            (assign = colors.map(function (c) { return c.lab(); }), lab0 = assign[0], lab1 = assign[1]);\n            I = function (t) {\n                var lab = [0, 1, 2].map(function (i) { return lab0[i] + t * (lab1[i] - lab0[i]); });\n                return new Color(lab, 'lab');\n            };\n        } else if (colors.length === 3) {\n            // quadratic bezier interpolation\n            (assign$1 = colors.map(function (c) { return c.lab(); }), lab0 = assign$1[0], lab1 = assign$1[1], lab2 = assign$1[2]);\n            I = function (t) {\n                var lab = [0, 1, 2].map(\n                    function (i) { return (1 - t) * (1 - t) * lab0[i] +\n                        2 * (1 - t) * t * lab1[i] +\n                        t * t * lab2[i]; }\n                );\n                return new Color(lab, 'lab');\n            };\n        } else if (colors.length === 4) {\n            // cubic bezier interpolation\n            var lab3;\n            (assign$2 = colors.map(function (c) { return c.lab(); }), lab0 = assign$2[0], lab1 = assign$2[1], lab2 = assign$2[2], lab3 = assign$2[3]);\n            I = function (t) {\n                var lab = [0, 1, 2].map(\n                    function (i) { return (1 - t) * (1 - t) * (1 - t) * lab0[i] +\n                        3 * (1 - t) * (1 - t) * t * lab1[i] +\n                        3 * (1 - t) * t * t * lab2[i] +\n                        t * t * t * lab3[i]; }\n                );\n                return new Color(lab, 'lab');\n            };\n        } else if (colors.length >= 5) {\n            // general case (degree n bezier)\n            var labs, row, n;\n            labs = colors.map(function (c) { return c.lab(); });\n            n = colors.length - 1;\n            row = binom_row(n);\n            I = function (t) {\n                var u = 1 - t;\n                var lab = [0, 1, 2].map(function (i) { return labs.reduce(\n                        function (sum, el, j) { return sum + row[j] * Math.pow( u, (n - j) ) * Math.pow( t, j ) * el[i]; },\n                        0\n                    ); }\n                );\n                return new Color(lab, 'lab');\n            };\n        } else {\n            throw new RangeError('No point in running bezier with only one color.');\n        }\n        return I;\n    };\n\n    function bezier$1 (colors) {\n        var f = bezier(colors);\n        f.scale = function () { return scale(f); };\n        return f;\n    }\n\n    /*\n     * interpolates between a set of colors uzing a bezier spline\n     * blend mode formulas taken from https://web.archive.org/web/20180110014946/http://www.venture-ware.com/kevin/coding/lets-learn-math-photoshop-blend-modes/\n     */\n\n\n    var blend = function (bottom, top, mode) {\n        if (!blend[mode]) {\n            throw new Error('unknown blend mode ' + mode);\n        }\n        return blend[mode](bottom, top);\n    };\n\n    var blend_f = function (f) { return function (bottom, top) {\n        var c0 = chroma(top).rgb();\n        var c1 = chroma(bottom).rgb();\n        return chroma.rgb(f(c0, c1));\n    }; };\n\n    var each = function (f) { return function (c0, c1) {\n        var out = [];\n        out[0] = f(c0[0], c1[0]);\n        out[1] = f(c0[1], c1[1]);\n        out[2] = f(c0[2], c1[2]);\n        return out;\n    }; };\n\n    var normal = function (a) { return a; };\n    var multiply = function (a, b) { return (a * b) / 255; };\n    var darken = function (a, b) { return (a > b ? b : a); };\n    var lighten = function (a, b) { return (a > b ? a : b); };\n    var screen = function (a, b) { return 255 * (1 - (1 - a / 255) * (1 - b / 255)); };\n    var overlay = function (a, b) { return b < 128 ? (2 * a * b) / 255 : 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255)); };\n    var burn = function (a, b) { return 255 * (1 - (1 - b / 255) / (a / 255)); };\n    var dodge = function (a, b) {\n        if (a === 255) { return 255; }\n        a = (255 * (b / 255)) / (1 - a / 255);\n        return a > 255 ? 255 : a;\n    };\n\n    // # add = (a,b) ->\n    // #     if (a + b > 255) then 255 else a + b\n\n    blend.normal = blend_f(each(normal));\n    blend.multiply = blend_f(each(multiply));\n    blend.screen = blend_f(each(screen));\n    blend.overlay = blend_f(each(overlay));\n    blend.darken = blend_f(each(darken));\n    blend.lighten = blend_f(each(lighten));\n    blend.dodge = blend_f(each(dodge));\n    blend.burn = blend_f(each(burn));\n\n    // cubehelix interpolation\n    // based on D.A. Green \"A colour scheme for the display of astronomical intensity images\"\n    // http://astron-soc.in/bulletin/11June/289392011.pdf\n    var pow$2 = Math.pow;\n    var sin$1 = Math.sin;\n    var cos$1 = Math.cos;\n\n    function cubehelix (\n        start,\n        rotations,\n        hue,\n        gamma,\n        lightness\n    ) {\n        if ( start === void 0 ) start = 300;\n        if ( rotations === void 0 ) rotations = -1.5;\n        if ( hue === void 0 ) hue = 1;\n        if ( gamma === void 0 ) gamma = 1;\n        if ( lightness === void 0 ) lightness = [0, 1];\n\n        var dh = 0,\n            dl;\n        if (type(lightness) === 'array') {\n            dl = lightness[1] - lightness[0];\n        } else {\n            dl = 0;\n            lightness = [lightness, lightness];\n        }\n        var f = function (fract) {\n            var a = TWOPI * ((start + 120) / 360 + rotations * fract);\n            var l = pow$2(lightness[0] + dl * fract, gamma);\n            var h = dh !== 0 ? hue[0] + fract * dh : hue;\n            var amp = (h * l * (1 - l)) / 2;\n            var cos_a = cos$1(a);\n            var sin_a = sin$1(a);\n            var r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);\n            var g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);\n            var b = l + amp * (+1.97294 * cos_a);\n            return chroma(clip_rgb([r * 255, g * 255, b * 255, 1]));\n        };\n        f.start = function (s) {\n            if (s == null) {\n                return start;\n            }\n            start = s;\n            return f;\n        };\n        f.rotations = function (r) {\n            if (r == null) {\n                return rotations;\n            }\n            rotations = r;\n            return f;\n        };\n        f.gamma = function (g) {\n            if (g == null) {\n                return gamma;\n            }\n            gamma = g;\n            return f;\n        };\n        f.hue = function (h) {\n            if (h == null) {\n                return hue;\n            }\n            hue = h;\n            if (type(hue) === 'array') {\n                dh = hue[1] - hue[0];\n                if (dh === 0) {\n                    hue = hue[1];\n                }\n            } else {\n                dh = 0;\n            }\n            return f;\n        };\n        f.lightness = function (h) {\n            if (h == null) {\n                return lightness;\n            }\n            if (type(h) === 'array') {\n                lightness = h;\n                dl = h[1] - h[0];\n            } else {\n                lightness = [h, h];\n                dl = 0;\n            }\n            return f;\n        };\n        f.scale = function () { return chroma.scale(f); };\n        f.hue(hue);\n        return f;\n    }\n\n    var digits = '0123456789abcdef';\n\n    var floor$1 = Math.floor;\n    var random = Math.random;\n\n    function random$1 () {\n        var code = '#';\n        for (var i = 0; i < 6; i++) {\n            code += digits.charAt(floor$1(random() * 16));\n        }\n        return new Color(code, 'hex');\n    }\n\n    var log = Math.log;\n    var pow$1 = Math.pow;\n    var floor = Math.floor;\n    var abs$1 = Math.abs;\n\n    function analyze(data, key) {\n        if ( key === void 0 ) key = null;\n\n        var r = {\n            min: Number.MAX_VALUE,\n            max: Number.MAX_VALUE * -1,\n            sum: 0,\n            values: [],\n            count: 0\n        };\n        if (type(data) === 'object') {\n            data = Object.values(data);\n        }\n        data.forEach(function (val) {\n            if (key && type(val) === 'object') { val = val[key]; }\n            if (val !== undefined && val !== null && !isNaN(val)) {\n                r.values.push(val);\n                r.sum += val;\n                if (val < r.min) { r.min = val; }\n                if (val > r.max) { r.max = val; }\n                r.count += 1;\n            }\n        });\n\n        r.domain = [r.min, r.max];\n\n        r.limits = function (mode, num) { return limits(r, mode, num); };\n\n        return r;\n    }\n\n    function limits(data, mode, num) {\n        if ( mode === void 0 ) mode = 'equal';\n        if ( num === void 0 ) num = 7;\n\n        if (type(data) == 'array') {\n            data = analyze(data);\n        }\n        var min = data.min;\n        var max = data.max;\n        var values = data.values.sort(function (a, b) { return a - b; });\n\n        if (num === 1) {\n            return [min, max];\n        }\n\n        var limits = [];\n\n        if (mode.substr(0, 1) === 'c') {\n            // continuous\n            limits.push(min);\n            limits.push(max);\n        }\n\n        if (mode.substr(0, 1) === 'e') {\n            // equal interval\n            limits.push(min);\n            for (var i = 1; i < num; i++) {\n                limits.push(min + (i / num) * (max - min));\n            }\n            limits.push(max);\n        } else if (mode.substr(0, 1) === 'l') {\n            // log scale\n            if (min <= 0) {\n                throw new Error(\n                    'Logarithmic scales are only possible for values > 0'\n                );\n            }\n            var min_log = Math.LOG10E * log(min);\n            var max_log = Math.LOG10E * log(max);\n            limits.push(min);\n            for (var i$1 = 1; i$1 < num; i$1++) {\n                limits.push(pow$1(10, min_log + (i$1 / num) * (max_log - min_log)));\n            }\n            limits.push(max);\n        } else if (mode.substr(0, 1) === 'q') {\n            // quantile scale\n            limits.push(min);\n            for (var i$2 = 1; i$2 < num; i$2++) {\n                var p = ((values.length - 1) * i$2) / num;\n                var pb = floor(p);\n                if (pb === p) {\n                    limits.push(values[pb]);\n                } else {\n                    // p > pb\n                    var pr = p - pb;\n                    limits.push(values[pb] * (1 - pr) + values[pb + 1] * pr);\n                }\n            }\n            limits.push(max);\n        } else if (mode.substr(0, 1) === 'k') {\n            // k-means clustering\n            /*\n            implementation based on\n            http://code.google.com/p/figue/source/browse/trunk/figue.js#336\n            simplified for 1-d input values\n            */\n            var cluster;\n            var n = values.length;\n            var assignments = new Array(n);\n            var clusterSizes = new Array(num);\n            var repeat = true;\n            var nb_iters = 0;\n            var centroids = null;\n\n            // get seed values\n            centroids = [];\n            centroids.push(min);\n            for (var i$3 = 1; i$3 < num; i$3++) {\n                centroids.push(min + (i$3 / num) * (max - min));\n            }\n            centroids.push(max);\n\n            while (repeat) {\n                // assignment step\n                for (var j = 0; j < num; j++) {\n                    clusterSizes[j] = 0;\n                }\n                for (var i$4 = 0; i$4 < n; i$4++) {\n                    var value = values[i$4];\n                    var mindist = Number.MAX_VALUE;\n                    var best = (void 0);\n                    for (var j$1 = 0; j$1 < num; j$1++) {\n                        var dist = abs$1(centroids[j$1] - value);\n                        if (dist < mindist) {\n                            mindist = dist;\n                            best = j$1;\n                        }\n                        clusterSizes[best]++;\n                        assignments[i$4] = best;\n                    }\n                }\n\n                // update centroids step\n                var newCentroids = new Array(num);\n                for (var j$2 = 0; j$2 < num; j$2++) {\n                    newCentroids[j$2] = null;\n                }\n                for (var i$5 = 0; i$5 < n; i$5++) {\n                    cluster = assignments[i$5];\n                    if (newCentroids[cluster] === null) {\n                        newCentroids[cluster] = values[i$5];\n                    } else {\n                        newCentroids[cluster] += values[i$5];\n                    }\n                }\n                for (var j$3 = 0; j$3 < num; j$3++) {\n                    newCentroids[j$3] *= 1 / clusterSizes[j$3];\n                }\n\n                // check convergence\n                repeat = false;\n                for (var j$4 = 0; j$4 < num; j$4++) {\n                    if (newCentroids[j$4] !== centroids[j$4]) {\n                        repeat = true;\n                        break;\n                    }\n                }\n\n                centroids = newCentroids;\n                nb_iters++;\n\n                if (nb_iters > 200) {\n                    repeat = false;\n                }\n            }\n\n            // finished k-means clustering\n            // the next part is borrowed from gabrielflor.it\n            var kClusters = {};\n            for (var j$5 = 0; j$5 < num; j$5++) {\n                kClusters[j$5] = [];\n            }\n            for (var i$6 = 0; i$6 < n; i$6++) {\n                cluster = assignments[i$6];\n                kClusters[cluster].push(values[i$6]);\n            }\n            var tmpKMeansBreaks = [];\n            for (var j$6 = 0; j$6 < num; j$6++) {\n                tmpKMeansBreaks.push(kClusters[j$6][0]);\n                tmpKMeansBreaks.push(kClusters[j$6][kClusters[j$6].length - 1]);\n            }\n            tmpKMeansBreaks = tmpKMeansBreaks.sort(function (a, b) { return a - b; });\n            limits.push(tmpKMeansBreaks[0]);\n            for (var i$7 = 1; i$7 < tmpKMeansBreaks.length; i$7 += 2) {\n                var v = tmpKMeansBreaks[i$7];\n                if (!isNaN(v) && limits.indexOf(v) === -1) {\n                    limits.push(v);\n                }\n            }\n        }\n        return limits;\n    }\n\n    function contrast (a, b) {\n        // WCAG contrast ratio\n        // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n        a = new Color(a);\n        b = new Color(b);\n        var l1 = a.luminance();\n        var l2 = b.luminance();\n        return l1 > l2 ? (l1 + 0.05) / (l2 + 0.05) : (l2 + 0.05) / (l1 + 0.05);\n    }\n\n    /**\n     * @license\n     *\n     * The APCA contrast prediction algorithm is based of the formulas published\n     * in the APCA-1.0.98G specification by Myndex. The specification is available at:\n     * https://raw.githubusercontent.com/Myndex/apca-w3/master/images/APCAw3_0.1.17_APCA0.0.98G.svg\n     *\n     * Note that the APCA implementation is still beta, so please update to\n     * future versions of chroma.js when they become available.\n     *\n     * You can read more about the APCA Readability Criterion at\n     * https://readtech.org/ARC/\n     */\n\n    // constants\n    var W_offset = 0.027;\n    var P_in = 0.0005;\n    var P_out = 0.1;\n    var R_scale = 1.14;\n    var B_threshold = 0.022;\n    var B_exp = 1.414;\n\n    function contrastAPCA (text, bg) {\n        // parse input colors\n        text = new Color(text);\n        bg = new Color(bg);\n        // if text color has alpha, blend against background\n        if (text.alpha() < 1) {\n            text = mix(bg, text, text.alpha(), 'rgb');\n        }\n        var l_text = lum.apply(void 0, text.rgb());\n        var l_bg = lum.apply(void 0, bg.rgb());\n\n        // soft clamp black levels\n        var Y_text =\n            l_text >= B_threshold\n                ? l_text\n                : l_text + Math.pow(B_threshold - l_text, B_exp);\n        var Y_bg =\n            l_bg >= B_threshold ? l_bg : l_bg + Math.pow(B_threshold - l_bg, B_exp);\n\n        // normal polarity (dark text on light background)\n        var S_norm = Math.pow(Y_bg, 0.56) - Math.pow(Y_text, 0.57);\n        // reverse polarity (light text on dark background)\n        var S_rev = Math.pow(Y_bg, 0.65) - Math.pow(Y_text, 0.62);\n        // clamp noise then scale\n        var C =\n            Math.abs(Y_bg - Y_text) < P_in\n                ? 0\n                : Y_text < Y_bg\n                  ? S_norm * R_scale\n                  : S_rev * R_scale;\n        // clamp minimum contrast then offset\n        var S_apc = Math.abs(C) < P_out ? 0 : C > 0 ? C - W_offset : C + W_offset;\n        // scale to 100\n        return S_apc * 100;\n    }\n    function lum(r, g, b) {\n        return (\n            0.2126729 * Math.pow(r / 255, 2.4) +\n            0.7151522 * Math.pow(g / 255, 2.4) +\n            0.072175 * Math.pow(b / 255, 2.4)\n        );\n    }\n\n    var sqrt = Math.sqrt;\n    var pow = Math.pow;\n    var min = Math.min;\n    var max = Math.max;\n    var atan2 = Math.atan2;\n    var abs = Math.abs;\n    var cos = Math.cos;\n    var sin = Math.sin;\n    var exp = Math.exp;\n    var PI = Math.PI;\n\n    function deltaE (a, b, Kl, Kc, Kh) {\n        if ( Kl === void 0 ) Kl = 1;\n        if ( Kc === void 0 ) Kc = 1;\n        if ( Kh === void 0 ) Kh = 1;\n\n        // Delta E (CIE 2000)\n        // see http://www.brucelindbloom.com/index.html?Eqn_DeltaE_CIE2000.html\n        var rad2deg = function (rad) {\n            return (360 * rad) / (2 * PI);\n        };\n        var deg2rad = function (deg) {\n            return (2 * PI * deg) / 360;\n        };\n        a = new Color(a);\n        b = new Color(b);\n        var ref = Array.from(a.lab());\n        var L1 = ref[0];\n        var a1 = ref[1];\n        var b1 = ref[2];\n        var ref$1 = Array.from(b.lab());\n        var L2 = ref$1[0];\n        var a2 = ref$1[1];\n        var b2 = ref$1[2];\n        var avgL = (L1 + L2) / 2;\n        var C1 = sqrt(pow(a1, 2) + pow(b1, 2));\n        var C2 = sqrt(pow(a2, 2) + pow(b2, 2));\n        var avgC = (C1 + C2) / 2;\n        var G = 0.5 * (1 - sqrt(pow(avgC, 7) / (pow(avgC, 7) + pow(25, 7))));\n        var a1p = a1 * (1 + G);\n        var a2p = a2 * (1 + G);\n        var C1p = sqrt(pow(a1p, 2) + pow(b1, 2));\n        var C2p = sqrt(pow(a2p, 2) + pow(b2, 2));\n        var avgCp = (C1p + C2p) / 2;\n        var arctan1 = rad2deg(atan2(b1, a1p));\n        var arctan2 = rad2deg(atan2(b2, a2p));\n        var h1p = arctan1 >= 0 ? arctan1 : arctan1 + 360;\n        var h2p = arctan2 >= 0 ? arctan2 : arctan2 + 360;\n        var avgHp =\n            abs(h1p - h2p) > 180 ? (h1p + h2p + 360) / 2 : (h1p + h2p) / 2;\n        var T =\n            1 -\n            0.17 * cos(deg2rad(avgHp - 30)) +\n            0.24 * cos(deg2rad(2 * avgHp)) +\n            0.32 * cos(deg2rad(3 * avgHp + 6)) -\n            0.2 * cos(deg2rad(4 * avgHp - 63));\n        var deltaHp = h2p - h1p;\n        deltaHp =\n            abs(deltaHp) <= 180\n                ? deltaHp\n                : h2p <= h1p\n                  ? deltaHp + 360\n                  : deltaHp - 360;\n        deltaHp = 2 * sqrt(C1p * C2p) * sin(deg2rad(deltaHp) / 2);\n        var deltaL = L2 - L1;\n        var deltaCp = C2p - C1p;\n        var sl = 1 + (0.015 * pow(avgL - 50, 2)) / sqrt(20 + pow(avgL - 50, 2));\n        var sc = 1 + 0.045 * avgCp;\n        var sh = 1 + 0.015 * avgCp * T;\n        var deltaTheta = 30 * exp(-pow((avgHp - 275) / 25, 2));\n        var Rc = 2 * sqrt(pow(avgCp, 7) / (pow(avgCp, 7) + pow(25, 7)));\n        var Rt = -Rc * sin(2 * deg2rad(deltaTheta));\n        var result = sqrt(\n            pow(deltaL / (Kl * sl), 2) +\n                pow(deltaCp / (Kc * sc), 2) +\n                pow(deltaHp / (Kh * sh), 2) +\n                Rt * (deltaCp / (Kc * sc)) * (deltaHp / (Kh * sh))\n        );\n        return max(0, min(100, result));\n    }\n\n    // simple Euclidean distance\n    function distance (a, b, mode) {\n        if ( mode === void 0 ) mode = 'lab';\n\n        // Delta E (CIE 1976)\n        // see http://www.brucelindbloom.com/index.html?Equations.html\n        a = new Color(a);\n        b = new Color(b);\n        var l1 = a.get(mode);\n        var l2 = b.get(mode);\n        var sum_sq = 0;\n        for (var i in l1) {\n            var d = (l1[i] || 0) - (l2[i] || 0);\n            sum_sq += d * d;\n        }\n        return Math.sqrt(sum_sq);\n    }\n\n    function valid () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        try {\n            new (Function.prototype.bind.apply( Color, [ null ].concat( args) ));\n            return true;\n            // eslint-disable-next-line\n        } catch (e) {\n            return false;\n        }\n    }\n\n    // some pre-defined color scales:\n\n    var scales = {\n        cool: function cool() {\n            return scale([chroma.hsl(180, 1, 0.9), chroma.hsl(250, 0.7, 0.4)]);\n        },\n        hot: function hot() {\n            return scale(['#000', '#f00', '#ff0', '#fff']).mode(\n                'rgb'\n            );\n        }\n    };\n\n    /**\n        ColorBrewer colors for chroma.js\n\n        Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The\n        Pennsylvania State University.\n\n        Licensed under the Apache License, Version 2.0 (the \"License\");\n        you may not use this file except in compliance with the License.\n        You may obtain a copy of the License at\n        http://www.apache.org/licenses/LICENSE-2.0\n\n        Unless required by applicable law or agreed to in writing, software distributed\n        under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n        CONDITIONS OF ANY KIND, either express or implied. See the License for the\n        specific language governing permissions and limitations under the License.\n    */\n\n    var colorbrewer = {\n        // sequential\n        OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],\n        PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],\n        BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],\n        Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],\n        BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],\n        YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],\n        YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],\n        Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],\n        RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],\n        Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],\n        YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],\n        Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],\n        GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],\n        Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],\n        YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],\n        PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],\n        Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],\n        PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],\n        Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],\n\n        // diverging\n        Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],\n        RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],\n        RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],\n        PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],\n        PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],\n        RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],\n        BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],\n        RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],\n        PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],\n\n        // qualitative\n        Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],\n        Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],\n        Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],\n        Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],\n        Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],\n        Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],\n        Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],\n        Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2']\n    };\n\n    var colorbrewerTypes = Object.keys(colorbrewer);\n    var typeMap = new Map(colorbrewerTypes.map(function (key) { return [key.toLowerCase(), key]; }));\n\n    // use Proxy to allow case-insensitive access to palettes\n    var colorbrewerProxy =\n        typeof Proxy === 'function'\n            ? new Proxy(colorbrewer, {\n                  get: function get(target, prop) {\n                      var lower = prop.toLowerCase();\n                      if (typeMap.has(lower)) {\n                          return target[typeMap.get(lower)];\n                      }\n                  },\n                  getOwnPropertyNames: function getOwnPropertyNames() {\n                      return Object.getOwnPropertyNames(colorbrewerTypes);\n                  }\n              })\n            : colorbrewer;\n\n    // feel free to comment out anything to rollup\n    // a smaller chroma.js bundle\n\n    Object.assign(chroma, {\n        analyze: analyze,\n        average: average,\n        bezier: bezier$1,\n        blend: blend,\n        brewer: colorbrewerProxy,\n        Color: Color,\n        colors: w3cx11,\n        contrast: contrast,\n        contrastAPCA: contrastAPCA,\n        cubehelix: cubehelix,\n        deltaE: deltaE,\n        distance: distance,\n        input: input,\n        interpolate: mix,\n        limits: limits,\n        mix: mix,\n        random: random$1,\n        scale: scale,\n        scales: scales,\n        valid: valid,\n        cmyk: cmyk,\n        css: css,\n        gl: gl,\n        hcg: hcg$1,\n        hex: hex,\n        hsi: hsi$1,\n        hsl: hsl$1,\n        hsv: hsv$1,\n        lab: lab$1,\n        lch: lch$1,\n        hcl: hcl,\n        num: num$1,\n        rgb: rgb$1,\n        temp: temp,\n        kelvin: temp,\n        temperature: temp,\n        oklab: oklab$1,\n        oklch: oklch$1,\n        getLabWhitePoint: getLabWhitePoint,\n        setLabWhitePoint: setLabWhitePoint\n    });\n\n    return chroma;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chroma-js/dist/chroma.cjs\n");

/***/ })

};
;