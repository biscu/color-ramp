"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/color-contrast";
exports.ids = ["vendor-chunks/color-contrast"];
exports.modules = {

/***/ "(ssr)/./node_modules/color-contrast/dist/index.esm.js":
/*!*******************************************************!*\
  !*** ./node_modules/color-contrast/dist/index.esm.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar installedColorSpaces = [],\n    undef = function (obj) {\n  return typeof obj === 'undefined';\n},\n    channelRegExp = /\\s*(\\.\\d+|\\d+(?:\\.\\d+)?)(%)?\\s*/,\n    percentageChannelRegExp = /\\s*(\\.\\d+|100|\\d?\\d(?:\\.\\d+)?)%\\s*/,\n    alphaChannelRegExp = /\\s*(\\.\\d+|\\d+(?:\\.\\d+)?)\\s*/,\n    cssColorRegExp = new RegExp('^(rgb|hsl|hsv)a?' + '\\\\(' + channelRegExp.source + ',' + channelRegExp.source + ',' + channelRegExp.source + '(?:,' + alphaChannelRegExp.source + ')?' + '\\\\)$', 'i');\n\nfunction color(obj) {\n  if (Array.isArray(obj)) {\n    if (typeof obj[0] === 'string' && typeof color[obj[0]] === 'function') {\n      // Assumed array from .toJSON()\n      return new color[obj[0]](obj.slice(1, obj.length));\n    } else if (obj.length === 4) {\n      // Assumed 4 element int RGB array from canvas with all channels [0;255]\n      return new color.RGB(obj[0] / 255, obj[1] / 255, obj[2] / 255, obj[3] / 255);\n    }\n  } else if (typeof obj === 'string') {\n    var lowerCased = obj.toLowerCase();\n\n    if (color.namedColors[lowerCased]) {\n      obj = '#' + color.namedColors[lowerCased];\n    }\n\n    if (lowerCased === 'transparent') {\n      obj = 'rgba(0,0,0,0)';\n    } // Test for CSS rgb(....) string\n\n\n    var matchCssSyntax = obj.match(cssColorRegExp);\n\n    if (matchCssSyntax) {\n      var colorSpaceName = matchCssSyntax[1].toUpperCase(),\n          alpha = undef(matchCssSyntax[8]) ? matchCssSyntax[8] : parseFloat(matchCssSyntax[8]),\n          hasHue = colorSpaceName[0] === 'H',\n          firstChannelDivisor = matchCssSyntax[3] ? 100 : hasHue ? 360 : 255,\n          secondChannelDivisor = matchCssSyntax[5] || hasHue ? 100 : 255,\n          thirdChannelDivisor = matchCssSyntax[7] || hasHue ? 100 : 255;\n\n      if (undef(color[colorSpaceName])) {\n        throw new Error('color.' + colorSpaceName + ' is not installed.');\n      }\n\n      return new color[colorSpaceName](parseFloat(matchCssSyntax[2]) / firstChannelDivisor, parseFloat(matchCssSyntax[4]) / secondChannelDivisor, parseFloat(matchCssSyntax[6]) / thirdChannelDivisor, alpha);\n    } // Assume hex syntax\n\n\n    if (obj.length < 6) {\n      // Allow CSS shorthand\n      obj = obj.replace(/^#?([0-9a-f])([0-9a-f])([0-9a-f])$/i, '$1$1$2$2$3$3');\n    } // Split obj into red, green, and blue components\n\n\n    var hexMatch = obj.match(/^#?([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])$/i);\n\n    if (hexMatch) {\n      return new color.RGB(parseInt(hexMatch[1], 16) / 255, parseInt(hexMatch[2], 16) / 255, parseInt(hexMatch[3], 16) / 255);\n    } // No match so far. Lets try the less likely ones\n\n\n    if (color.CMYK) {\n      var cmykMatch = obj.match(new RegExp('^cmyk' + '\\\\(' + percentageChannelRegExp.source + ',' + percentageChannelRegExp.source + ',' + percentageChannelRegExp.source + ',' + percentageChannelRegExp.source + '\\\\)$', 'i'));\n\n      if (cmykMatch) {\n        return new color.CMYK(parseFloat(cmykMatch[1]) / 100, parseFloat(cmykMatch[2]) / 100, parseFloat(cmykMatch[3]) / 100, parseFloat(cmykMatch[4]) / 100);\n      }\n    }\n  } else if (typeof obj === 'object' && obj.isColor) {\n    return obj;\n  }\n\n  return false;\n}\n\ncolor.namedColors = {};\n\ncolor.installColorSpace = function (colorSpaceName, propertyNames, config) {\n  color[colorSpaceName] = function (a1) {\n    // ...\n    var args = Array.isArray(a1) ? a1 : arguments;\n    propertyNames.forEach(function (propertyName, i) {\n      var propertyValue = args[i];\n\n      if (propertyName === 'alpha') {\n        this._alpha = isNaN(propertyValue) || propertyValue > 1 ? 1 : propertyValue < 0 ? 0 : propertyValue;\n      } else {\n        if (isNaN(propertyValue)) {\n          throw new Error('[' + colorSpaceName + ']: Invalid color: (' + propertyNames.join(',') + ')');\n        }\n\n        if (propertyName === 'hue') {\n          this._hue = propertyValue < 0 ? propertyValue - Math.floor(propertyValue) : propertyValue % 1;\n        } else {\n          this['_' + propertyName] = propertyValue < 0 ? 0 : propertyValue > 1 ? 1 : propertyValue;\n        }\n      }\n    }, this);\n  };\n\n  color[colorSpaceName].propertyNames = propertyNames;\n  var prototype = color[colorSpaceName].prototype;\n  ['valueOf', 'hex', 'hexa', 'css', 'cssa'].forEach(function (methodName) {\n    prototype[methodName] = prototype[methodName] || (colorSpaceName === 'RGB' ? prototype.hex : function () {\n      return this.rgb()[methodName]();\n    });\n  });\n  prototype.isColor = true;\n\n  prototype.equals = function (otherColor, epsilon) {\n    if (undef(epsilon)) {\n      epsilon = 1e-10;\n    }\n\n    otherColor = otherColor[colorSpaceName.toLowerCase()]();\n\n    for (var i = 0; i < propertyNames.length; i = i + 1) {\n      if (Math.abs(this['_' + propertyNames[i]] - otherColor['_' + propertyNames[i]]) > epsilon) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  prototype.toJSON = function () {\n    return [colorSpaceName].concat(propertyNames.map(function (propertyName) {\n      return this['_' + propertyName];\n    }, this));\n  };\n\n  for (var propertyName in config) {\n    if (config.hasOwnProperty(propertyName)) {\n      var matchFromColorSpace = propertyName.match(/^from(.*)$/);\n\n      if (matchFromColorSpace) {\n        color[matchFromColorSpace[1].toUpperCase()].prototype[colorSpaceName.toLowerCase()] = config[propertyName];\n      } else {\n        prototype[propertyName] = config[propertyName];\n      }\n    }\n  } // It is pretty easy to implement the conversion to the same color space:\n\n\n  prototype[colorSpaceName.toLowerCase()] = function () {\n    return this;\n  };\n\n  prototype.toString = function () {\n    return '[' + colorSpaceName + ' ' + propertyNames.map(function (propertyName) {\n      return this['_' + propertyName];\n    }, this).join(', ') + ']';\n  }; // Generate getters and setters\n\n\n  propertyNames.forEach(function (propertyName) {\n    var shortName = propertyName === 'black' ? 'k' : propertyName.charAt(0);\n\n    prototype[propertyName] = prototype[shortName] = function (value, isDelta) {\n      // Simple getter mode: color.red()\n      if (typeof value === 'undefined') {\n        return this['_' + propertyName];\n      } else if (isDelta) {\n        // Adjuster: color.red(+.2, true)\n        return new this.constructor(propertyNames.map(function (otherPropertyName) {\n          return this['_' + otherPropertyName] + (propertyName === otherPropertyName ? value : 0);\n        }, this));\n      } else {\n        // Setter: color.red(.2);\n        return new this.constructor(propertyNames.map(function (otherPropertyName) {\n          return propertyName === otherPropertyName ? value : this['_' + otherPropertyName];\n        }, this));\n      }\n    };\n  });\n\n  function installForeignMethods(targetColorSpaceName, sourceColorSpaceName) {\n    var obj = {};\n\n    obj[sourceColorSpaceName.toLowerCase()] = function () {\n      return this.rgb()[sourceColorSpaceName.toLowerCase()]();\n    };\n\n    color[sourceColorSpaceName].propertyNames.forEach(function (propertyName) {\n      var shortName = propertyName === 'black' ? 'k' : propertyName.charAt(0);\n\n      obj[propertyName] = obj[shortName] = function (value, isDelta) {\n        return this[sourceColorSpaceName.toLowerCase()]()[propertyName](value, isDelta);\n      };\n    });\n\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop) && color[targetColorSpaceName].prototype[prop] === undefined) {\n        color[targetColorSpaceName].prototype[prop] = obj[prop];\n      }\n    }\n  }\n\n  installedColorSpaces.forEach(function (otherColorSpaceName) {\n    installForeignMethods(colorSpaceName, otherColorSpaceName);\n    installForeignMethods(otherColorSpaceName, colorSpaceName);\n  });\n  installedColorSpaces.push(colorSpaceName);\n  return color;\n};\n\ncolor.pluginList = [];\n\ncolor.use = function (plugin) {\n  if (color.pluginList.indexOf(plugin) === -1) {\n    this.pluginList.push(plugin);\n    plugin(color);\n  }\n\n  return color;\n};\n\ncolor.installMethod = function (name, fn) {\n  installedColorSpaces.forEach(function (colorSpace) {\n    color[colorSpace].prototype[name] = fn;\n  });\n  return this;\n};\n\ncolor.installColorSpace('RGB', ['red', 'green', 'blue', 'alpha'], {\n  hex: function () {\n    var hexString = (Math.round(255 * this._red) * 0x10000 + Math.round(255 * this._green) * 0x100 + Math.round(255 * this._blue)).toString(16);\n    return '#' + '00000'.substr(0, 6 - hexString.length) + hexString;\n  },\n  hexa: function () {\n    var alphaString = Math.round(this._alpha * 255).toString(16);\n    return '#' + '00'.substr(0, 2 - alphaString.length) + alphaString + this.hex().substr(1, 6);\n  },\n  css: function () {\n    return 'rgb(' + Math.round(255 * this._red) + ',' + Math.round(255 * this._green) + ',' + Math.round(255 * this._blue) + ')';\n  },\n  cssa: function () {\n    return 'rgba(' + Math.round(255 * this._red) + ',' + Math.round(255 * this._green) + ',' + Math.round(255 * this._blue) + ',' + this._alpha + ')';\n  }\n});\nvar color_1 = color;\n\nvar XYZ = function XYZ(color) {\n  color.installColorSpace('XYZ', ['x', 'y', 'z', 'alpha'], {\n    fromRgb: function () {\n      // http://www.easyrgb.com/index.php?X=MATH&H=02#text2\n      var convert = function (channel) {\n        return channel > 0.04045 ? Math.pow((channel + 0.055) / 1.055, 2.4) : channel / 12.92;\n      },\n          r = convert(this._red),\n          g = convert(this._green),\n          b = convert(this._blue); // Reference white point sRGB D65:\n      // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n\n\n      return new color.XYZ(r * 0.4124564 + g * 0.3575761 + b * 0.1804375, r * 0.2126729 + g * 0.7151522 + b * 0.0721750, r * 0.0193339 + g * 0.1191920 + b * 0.9503041, this._alpha);\n    },\n    rgb: function () {\n      // http://www.easyrgb.com/index.php?X=MATH&H=01#text1\n      var x = this._x,\n          y = this._y,\n          z = this._z,\n          convert = function (channel) {\n        return channel > 0.0031308 ? 1.055 * Math.pow(channel, 1 / 2.4) - 0.055 : 12.92 * channel;\n      }; // Reference white point sRGB D65:\n      // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n\n\n      return new color.RGB(convert(x * 3.2404542 + y * -1.5371385 + z * -0.4985314), convert(x * -0.9692660 + y * 1.8760108 + z * 0.0415560), convert(x * 0.0556434 + y * -0.2040259 + z * 1.0572252), this._alpha);\n    },\n    lab: function () {\n      // http://www.easyrgb.com/index.php?X=MATH&H=07#text7\n      var convert = function (channel) {\n        return channel > 0.008856 ? Math.pow(channel, 1 / 3) : 7.787037 * channel + 4 / 29;\n      },\n          x = convert(this._x / 95.047),\n          y = convert(this._y / 100.000),\n          z = convert(this._z / 108.883);\n\n      return new color.LAB(116 * y - 16, 500 * (x - y), 200 * (y - z), this._alpha);\n    }\n  });\n};\n\nvar LAB = function LAB(color) {\n  color.use(XYZ);\n  color.installColorSpace('LAB', ['l', 'a', 'b', 'alpha'], {\n    fromRgb: function () {\n      return this.xyz().lab();\n    },\n    rgb: function () {\n      return this.xyz().rgb();\n    },\n    xyz: function () {\n      // http://www.easyrgb.com/index.php?X=MATH&H=08#text8\n      var convert = function (channel) {\n        var pow = Math.pow(channel, 3);\n        return pow > 0.008856 ? pow : (channel - 16 / 116) / 7.87;\n      },\n          y = (this._l + 16) / 116,\n          x = this._a / 500 + y,\n          z = y - this._b / 200;\n\n      return new color.XYZ(convert(x) * 95.047, convert(y) * 100.000, convert(z) * 108.883, this._alpha);\n    }\n  });\n};\n\nvar HSV = function HSV(color) {\n  color.installColorSpace('HSV', ['hue', 'saturation', 'value', 'alpha'], {\n    rgb: function () {\n      var hue = this._hue,\n          saturation = this._saturation,\n          value = this._value,\n          i = Math.min(5, Math.floor(hue * 6)),\n          f = hue * 6 - i,\n          p = value * (1 - saturation),\n          q = value * (1 - f * saturation),\n          t = value * (1 - (1 - f) * saturation),\n          red,\n          green,\n          blue;\n\n      switch (i) {\n        case 0:\n          red = value;\n          green = t;\n          blue = p;\n          break;\n\n        case 1:\n          red = q;\n          green = value;\n          blue = p;\n          break;\n\n        case 2:\n          red = p;\n          green = value;\n          blue = t;\n          break;\n\n        case 3:\n          red = p;\n          green = q;\n          blue = value;\n          break;\n\n        case 4:\n          red = t;\n          green = p;\n          blue = value;\n          break;\n\n        case 5:\n          red = value;\n          green = p;\n          blue = q;\n          break;\n      }\n\n      return new color.RGB(red, green, blue, this._alpha);\n    },\n    hsl: function () {\n      var l = (2 - this._saturation) * this._value,\n          sv = this._saturation * this._value,\n          svDivisor = l <= 1 ? l : 2 - l,\n          saturation; // Avoid division by zero when lightness approaches zero:\n\n      if (svDivisor < 1e-9) {\n        saturation = 0;\n      } else {\n        saturation = sv / svDivisor;\n      }\n\n      return new color.HSL(this._hue, saturation, l / 2, this._alpha);\n    },\n    fromRgb: function () {\n      // Becomes one.color.RGB.prototype.hsv\n      var red = this._red,\n          green = this._green,\n          blue = this._blue,\n          max = Math.max(red, green, blue),\n          min = Math.min(red, green, blue),\n          delta = max - min,\n          hue,\n          saturation = max === 0 ? 0 : delta / max,\n          value = max;\n\n      if (delta === 0) {\n        hue = 0;\n      } else {\n        switch (max) {\n          case red:\n            hue = (green - blue) / delta / 6 + (green < blue ? 1 : 0);\n            break;\n\n          case green:\n            hue = (blue - red) / delta / 6 + 1 / 3;\n            break;\n\n          case blue:\n            hue = (red - green) / delta / 6 + 2 / 3;\n            break;\n        }\n      }\n\n      return new color.HSV(hue, saturation, value, this._alpha);\n    }\n  });\n};\n\nvar HSL = function HSL(color) {\n  color.use(HSV);\n  color.installColorSpace('HSL', ['hue', 'saturation', 'lightness', 'alpha'], {\n    hsv: function () {\n      // Algorithm adapted from http://wiki.secondlife.com/wiki/Color_conversion_scripts\n      var l = this._lightness * 2,\n          s = this._saturation * (l <= 1 ? l : 2 - l),\n          saturation; // Avoid division by zero when l + s is very small (approaching black):\n\n      if (l + s < 1e-9) {\n        saturation = 0;\n      } else {\n        saturation = 2 * s / (l + s);\n      }\n\n      return new color.HSV(this._hue, saturation, (l + s) / 2, this._alpha);\n    },\n    rgb: function () {\n      return this.hsv().rgb();\n    },\n    fromRgb: function () {\n      // Becomes one.color.RGB.prototype.hsv\n      return this.hsv().hsl();\n    }\n  });\n};\n\nvar CMYK = function CMYK(color) {\n  color.installColorSpace('CMYK', ['cyan', 'magenta', 'yellow', 'black', 'alpha'], {\n    rgb: function () {\n      return new color.RGB(1 - this._cyan * (1 - this._black) - this._black, 1 - this._magenta * (1 - this._black) - this._black, 1 - this._yellow * (1 - this._black) - this._black, this._alpha);\n    },\n    fromRgb: function () {\n      // Becomes one.color.RGB.prototype.cmyk\n      // Adapted from http://www.javascripter.net/faq/rgb2cmyk.htm\n      var red = this._red,\n          green = this._green,\n          blue = this._blue,\n          cyan = 1 - red,\n          magenta = 1 - green,\n          yellow = 1 - blue,\n          black = 1;\n\n      if (red || green || blue) {\n        black = Math.min(cyan, Math.min(magenta, yellow));\n        cyan = (cyan - black) / (1 - black);\n        magenta = (magenta - black) / (1 - black);\n        yellow = (yellow - black) / (1 - black);\n      } else {\n        black = 1;\n      }\n\n      return new color.CMYK(cyan, magenta, yellow, black, this._alpha);\n    }\n  });\n};\n\nvar namedColors = function namedColors(color) {\n  color.namedColors = {\n    aliceblue: 'f0f8ff',\n    antiquewhite: 'faebd7',\n    aqua: '0ff',\n    aquamarine: '7fffd4',\n    azure: 'f0ffff',\n    beige: 'f5f5dc',\n    bisque: 'ffe4c4',\n    black: '000',\n    blanchedalmond: 'ffebcd',\n    blue: '00f',\n    blueviolet: '8a2be2',\n    brown: 'a52a2a',\n    burlywood: 'deb887',\n    cadetblue: '5f9ea0',\n    chartreuse: '7fff00',\n    chocolate: 'd2691e',\n    coral: 'ff7f50',\n    cornflowerblue: '6495ed',\n    cornsilk: 'fff8dc',\n    crimson: 'dc143c',\n    cyan: '0ff',\n    darkblue: '00008b',\n    darkcyan: '008b8b',\n    darkgoldenrod: 'b8860b',\n    darkgray: 'a9a9a9',\n    darkgrey: 'a9a9a9',\n    darkgreen: '006400',\n    darkkhaki: 'bdb76b',\n    darkmagenta: '8b008b',\n    darkolivegreen: '556b2f',\n    darkorange: 'ff8c00',\n    darkorchid: '9932cc',\n    darkred: '8b0000',\n    darksalmon: 'e9967a',\n    darkseagreen: '8fbc8f',\n    darkslateblue: '483d8b',\n    darkslategray: '2f4f4f',\n    darkslategrey: '2f4f4f',\n    darkturquoise: '00ced1',\n    darkviolet: '9400d3',\n    deeppink: 'ff1493',\n    deepskyblue: '00bfff',\n    dimgray: '696969',\n    dimgrey: '696969',\n    dodgerblue: '1e90ff',\n    firebrick: 'b22222',\n    floralwhite: 'fffaf0',\n    forestgreen: '228b22',\n    fuchsia: 'f0f',\n    gainsboro: 'dcdcdc',\n    ghostwhite: 'f8f8ff',\n    gold: 'ffd700',\n    goldenrod: 'daa520',\n    gray: '808080',\n    grey: '808080',\n    green: '008000',\n    greenyellow: 'adff2f',\n    honeydew: 'f0fff0',\n    hotpink: 'ff69b4',\n    indianred: 'cd5c5c',\n    indigo: '4b0082',\n    ivory: 'fffff0',\n    khaki: 'f0e68c',\n    lavender: 'e6e6fa',\n    lavenderblush: 'fff0f5',\n    lawngreen: '7cfc00',\n    lemonchiffon: 'fffacd',\n    lightblue: 'add8e6',\n    lightcoral: 'f08080',\n    lightcyan: 'e0ffff',\n    lightgoldenrodyellow: 'fafad2',\n    lightgray: 'd3d3d3',\n    lightgrey: 'd3d3d3',\n    lightgreen: '90ee90',\n    lightpink: 'ffb6c1',\n    lightsalmon: 'ffa07a',\n    lightseagreen: '20b2aa',\n    lightskyblue: '87cefa',\n    lightslategray: '789',\n    lightslategrey: '789',\n    lightsteelblue: 'b0c4de',\n    lightyellow: 'ffffe0',\n    lime: '0f0',\n    limegreen: '32cd32',\n    linen: 'faf0e6',\n    magenta: 'f0f',\n    maroon: '800000',\n    mediumaquamarine: '66cdaa',\n    mediumblue: '0000cd',\n    mediumorchid: 'ba55d3',\n    mediumpurple: '9370d8',\n    mediumseagreen: '3cb371',\n    mediumslateblue: '7b68ee',\n    mediumspringgreen: '00fa9a',\n    mediumturquoise: '48d1cc',\n    mediumvioletred: 'c71585',\n    midnightblue: '191970',\n    mintcream: 'f5fffa',\n    mistyrose: 'ffe4e1',\n    moccasin: 'ffe4b5',\n    navajowhite: 'ffdead',\n    navy: '000080',\n    oldlace: 'fdf5e6',\n    olive: '808000',\n    olivedrab: '6b8e23',\n    orange: 'ffa500',\n    orangered: 'ff4500',\n    orchid: 'da70d6',\n    palegoldenrod: 'eee8aa',\n    palegreen: '98fb98',\n    paleturquoise: 'afeeee',\n    palevioletred: 'd87093',\n    papayawhip: 'ffefd5',\n    peachpuff: 'ffdab9',\n    peru: 'cd853f',\n    pink: 'ffc0cb',\n    plum: 'dda0dd',\n    powderblue: 'b0e0e6',\n    purple: '800080',\n    rebeccapurple: '639',\n    red: 'f00',\n    rosybrown: 'bc8f8f',\n    royalblue: '4169e1',\n    saddlebrown: '8b4513',\n    salmon: 'fa8072',\n    sandybrown: 'f4a460',\n    seagreen: '2e8b57',\n    seashell: 'fff5ee',\n    sienna: 'a0522d',\n    silver: 'c0c0c0',\n    skyblue: '87ceeb',\n    slateblue: '6a5acd',\n    slategray: '708090',\n    slategrey: '708090',\n    snow: 'fffafa',\n    springgreen: '00ff7f',\n    steelblue: '4682b4',\n    tan: 'd2b48c',\n    teal: '008080',\n    thistle: 'd8bfd8',\n    tomato: 'ff6347',\n    turquoise: '40e0d0',\n    violet: 'ee82ee',\n    wheat: 'f5deb3',\n    white: 'fff',\n    whitesmoke: 'f5f5f5',\n    yellow: 'ff0',\n    yellowgreen: '9acd32'\n  };\n};\n\nvar clearer = function clearer(color) {\n  color.installMethod('clearer', function (amount) {\n    return this.alpha(isNaN(amount) ? -0.1 : -amount, true);\n  });\n};\n\nvar luminance = function luminance(color) {\n  // http://www.w3.org/TR/WCAG20/#relativeluminancedef\n  function channelLuminance(value) {\n    return value <= 0.03928 ? value / 12.92 : Math.pow((value + 0.055) / 1.055, 2.4);\n  }\n\n  color.installMethod('luminance', function () {\n    var rgb = this.rgb();\n    return 0.2126 * channelLuminance(rgb._red) + 0.7152 * channelLuminance(rgb._green) + 0.0722 * channelLuminance(rgb._blue);\n  });\n};\n\nvar contrast = function contrast(color) {\n  // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n  color.use(luminance);\n  color.installMethod('contrast', function (color2) {\n    var lum1 = this.luminance();\n    var lum2 = color2.luminance();\n\n    if (lum1 > lum2) {\n      return (lum1 + 0.05) / (lum2 + 0.05);\n    }\n\n    return (lum2 + 0.05) / (lum1 + 0.05);\n  });\n};\n\nvar darken = function darken(color) {\n  color.use(HSL);\n  color.installMethod('darken', function (amount) {\n    return this.lightness(isNaN(amount) ? -0.1 : -amount, true);\n  });\n};\n\nvar desaturate = function desaturate(color) {\n  color.use(HSL);\n  color.installMethod('desaturate', function (amount) {\n    return this.saturation(isNaN(amount) ? -0.1 : -amount, true);\n  });\n};\n\nvar grayscale = function grayscale(color) {\n  function gs() {\n    /*jslint strict:false*/\n    var rgb = this.rgb(),\n        val = rgb._red * 0.3 + rgb._green * 0.59 + rgb._blue * 0.11;\n    return new color.RGB(val, val, val, rgb._alpha);\n  }\n\n  color.installMethod('greyscale', gs).installMethod('grayscale', gs);\n};\n\nvar isDark = function isDark(color) {\n  color.installMethod('isDark', function () {\n    var rgb = this.rgb(); // YIQ equation from http://24ways.org/2010/calculating-color-contrast\n\n    var yiq = (rgb._red * 255 * 299 + rgb._green * 255 * 587 + rgb._blue * 255 * 114) / 1000;\n    return yiq < 128;\n  });\n};\n\nvar isLight = function isLight(color) {\n  color.use(isDark);\n  color.installMethod('isLight', function () {\n    return !this.isDark();\n  });\n};\n\nvar lighten = function lighten(color) {\n  color.use(HSL);\n  color.installMethod('lighten', function (amount) {\n    return this.lightness(isNaN(amount) ? 0.1 : amount, true);\n  });\n};\n\nvar mix = function mix(color) {\n  color.installMethod('mix', function (otherColor, weight) {\n    otherColor = color(otherColor).rgb();\n    weight = 1 - (isNaN(weight) ? 0.5 : weight);\n    var w = weight * 2 - 1,\n        a = this._alpha - otherColor._alpha,\n        weight1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2,\n        weight2 = 1 - weight1,\n        rgb = this.rgb();\n    return new color.RGB(rgb._red * weight1 + otherColor._red * weight2, rgb._green * weight1 + otherColor._green * weight2, rgb._blue * weight1 + otherColor._blue * weight2, rgb._alpha * weight + otherColor._alpha * (1 - weight));\n  });\n};\n\nvar negate = function negate(color) {\n  color.installMethod('negate', function () {\n    var rgb = this.rgb();\n    return new color.RGB(1 - rgb._red, 1 - rgb._green, 1 - rgb._blue, this._alpha);\n  });\n};\n\nvar opaquer = function opaquer(color) {\n  color.installMethod('opaquer', function (amount) {\n    return this.alpha(isNaN(amount) ? 0.1 : amount, true);\n  });\n};\n\nvar rotate = function rotate(color) {\n  color.use(HSL);\n  color.installMethod('rotate', function (degrees) {\n    return this.hue((degrees || 0) / 360, true);\n  });\n};\n\nvar saturate = function saturate(color) {\n  color.use(HSL);\n  color.installMethod('saturate', function (amount) {\n    return this.saturation(isNaN(amount) ? 0.1 : amount, true);\n  });\n};\n\n// Adapted from http://gimp.sourcearchive.com/documentation/2.6.6-1ubuntu1/color-to-alpha_8c-source.html\n// toAlpha returns a color where the values of the argument have been converted to alpha\nvar toAlpha = function toAlpha(color) {\n  color.installMethod('toAlpha', function (color) {\n    var me = this.rgb(),\n        other = color(color).rgb(),\n        epsilon = 1e-10,\n        a = new color.RGB(0, 0, 0, me._alpha),\n        channels = ['_red', '_green', '_blue'];\n    channels.forEach(function (channel) {\n      if (me[channel] < epsilon) {\n        a[channel] = me[channel];\n      } else if (me[channel] > other[channel]) {\n        a[channel] = (me[channel] - other[channel]) / (1 - other[channel]);\n      } else if (me[channel] > other[channel]) {\n        a[channel] = (other[channel] - me[channel]) / other[channel];\n      } else {\n        a[channel] = 0;\n      }\n    });\n\n    if (a._red > a._green) {\n      if (a._red > a._blue) {\n        me._alpha = a._red;\n      } else {\n        me._alpha = a._blue;\n      }\n    } else if (a._green > a._blue) {\n      me._alpha = a._green;\n    } else {\n      me._alpha = a._blue;\n    }\n\n    if (me._alpha < epsilon) {\n      return me;\n    }\n\n    channels.forEach(function (channel) {\n      me[channel] = (me[channel] - other[channel]) / me._alpha + other[channel];\n    });\n    me._alpha *= a._alpha;\n    return me;\n  });\n};\n\nvar onecolor = color_1.use(XYZ).use(LAB).use(HSV).use(HSL).use(CMYK) // Convenience functions\n.use(namedColors).use(clearer).use(contrast).use(darken).use(desaturate).use(grayscale).use(isDark).use(isLight).use(lighten).use(luminance).use(mix).use(negate).use(opaquer).use(rotate).use(saturate).use(toAlpha);\n\nfunction getContrastRatio(foreground, background) {\n  var backgroundOnWhite = alphaBlend(background, '#fff');\n  var backgroundOnBlack = alphaBlend(background, '#000');\n  var LWhite = getRelativeLuminance(backgroundOnWhite);\n  var LBlack = getRelativeLuminance(backgroundOnBlack);\n  var LForeground = getRelativeLuminance(foreground);\n\n  if (LWhite < LForeground) {\n    return getContrastRatioOpaque(foreground, backgroundOnWhite);\n  } else if (LBlack > LForeground) {\n    return getContrastRatioOpaque(foreground, backgroundOnBlack);\n  } else {\n    return 1;\n  }\n}\n\nfunction alphaBlend(cssForeground, cssBackground) {\n  var foreground = onecolor(cssForeground);\n  var background = onecolor(cssBackground);\n  var result = onecolor('#fff');\n  var a = foreground.alpha();\n  result._red = foreground._red * a + background._red * (1 - a);\n  result._green = foreground._green * a + background._green * (1 - a);\n  result._blue = foreground._blue * a + background._blue * (1 - a);\n  return result;\n}\n\nfunction getContrastRatioOpaque(foreground, background) {\n  var L1 = getRelativeLuminance(background);\n  var L2 = getRelativeLuminance(alphaBlend(foreground, background)); // https://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n\n  return (Math.max(L1, L2) + 0.05) / (Math.min(L1, L2) + 0.05);\n}\n\nfunction getRelativeLuminance(cssColor) {\n  // https://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n  var color = onecolor(cssColor);\n  var R = color._red <= 0.03928 ? color._red / 12.92 : Math.pow((color._red + 0.055) / 1.055, 2.4);\n  var G = color._green <= 0.03928 ? color._green / 12.92 : Math.pow((color._green + 0.055) / 1.055, 2.4);\n  var B = color._blue <= 0.03928 ? color._blue / 12.92 : Math.pow((color._blue + 0.055) / 1.055, 2.4);\n  var L = 0.2126 * R + 0.7152 * G + 0.0722 * B;\n  return L;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getContrastRatio);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/color-contrast/dist/index.esm.js\n");

/***/ })

};
;