/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/page"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fdavidebiscuso%2FDocuments%2FGitHub%2Fcolor-ramp%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!":
/*!********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fdavidebiscuso%2FDocuments%2FGitHub%2Fcolor-ramp%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false! ***!
  \********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/page.tsx */ \"(app-pages-browser)/./app/page.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyJTJGVXNlcnMlMkZkYXZpZGViaXNjdXNvJTJGRG9jdW1lbnRzJTJGR2l0SHViJTJGY29sb3ItcmFtcCUyRmFwcCUyRnBhZ2UudHN4JTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJnNlcnZlcj1mYWxzZSEiLCJtYXBwaW5ncyI6IkFBQUEsc0pBQWtHIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvVXNlcnMvZGF2aWRlYmlzY3Vzby9Eb2N1bWVudHMvR2l0SHViL2NvbG9yLXJhbXAvYXBwL3BhZ2UudHN4XCIpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fdavidebiscuso%2FDocuments%2FGitHub%2Fcolor-ramp%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@k-vyn/coloralgorithm/dist/bundle.js":
/*!***********************************************************!*\
  !*** ./node_modules/@k-vyn/coloralgorithm/dist/bundle.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generate: () => (/* binding */ generate)\n/* harmony export */ });\n// Originally from https://github.com/koenbok/Framer/blob/master/framer/Utils.coffee\n// Translated to Typescript\nfunction distribute({ value, rangeA, rangeB, limit, }) {\n    if (limit === undefined) {\n        limit = false;\n    }\n    const [fromLow, fromHigh] = Array.from(rangeA);\n    const [toLow, toHigh] = Array.from(rangeB);\n    const result = toLow + ((value - fromLow) / (fromHigh - fromLow)) * (toHigh - toLow);\n    if (limit === true) {\n        if (toLow < toHigh) {\n            if (result < toLow) {\n                return toLow;\n            }\n            if (result > toHigh) {\n                return toHigh;\n            }\n        }\n        else {\n            if (result > toLow) {\n                return toLow;\n            }\n            if (result < toHigh) {\n                return toHigh;\n            }\n        }\n    }\n    return result;\n}\n\nconst bezier$2 = __webpack_require__(/*! bezier-easing */ \"(app-pages-browser)/./node_modules/bezier-easing/src/index.js\");\nfunction generateNumberOfSteps({ curve, steps, }) {\n    const arrayOfSteps = Array.from(Array(steps).keys());\n    var array = [];\n    for (const step in arrayOfSteps) {\n        const stepNumber = parseInt(step, 10);\n        const easing = bezier$2(...curve);\n        const value = easing(stepNumber / (steps - 1));\n        array.push(value);\n    }\n    return array;\n}\n\nconst defaultCurves = {\n    linear: {\n        name: \"linear\",\n        formatted_name: \"Linear\",\n        value: [0.5, 0.5, 0.5, 0.5],\n    },\n    easeInCubic: {\n        name: \"easeInCubic\",\n        formatted_name: \"Cubic - EaseIn\",\n        value: [0.55, 0.055, 0.675, 0.19],\n    },\n    easeOutCubic: {\n        name: \"easeOutCubic\",\n        formatted_name: \"Cubic - EaseOut\",\n        value: [0.215, 0.61, 0.355, 1],\n    },\n    easeInOutCubic: {\n        name: \"easeInOutCubic\",\n        formatted_name: \"Cubic - EaseInOut\",\n        value: [0.645, 0.045, 0.355, 1],\n    },\n    easeInSine: {\n        name: \"easeInSine\",\n        formatted_name: \"Sine - EaseIn\",\n        value: [0.47, 0, 0.745, 0.715],\n    },\n    easeOutSine: {\n        name: \"easeOutSine\",\n        formatted_name: \"Sine - EaseOut\",\n        value: [0.39, 0.575, 0.565, 1],\n    },\n    easeInOutSine: {\n        name: \"easeInOutSine\",\n        formatted_name: \"Sine - EaseInOut\",\n        value: [0.445, 0.05, 0.55, 0.95],\n    },\n    easeInQuad: {\n        name: \"easeInQuad\",\n        formatted_name: \"Quad - EaseIn\",\n        value: [0.55, 0.085, 0.68, 0.53],\n    },\n    easeOutQuad: {\n        name: \"easeOutQuad\",\n        formatted_name: \"Quad - EaseOut\",\n        value: [0.25, 0.46, 0.45, 0.94],\n    },\n    easeInOutQuad: {\n        name: \"easeInOutQuad\",\n        formatted_name: \"Quad - EaseInOut\",\n        value: [0.455, 0.03, 0.515, 0.955],\n    },\n    easeInQuart: {\n        name: \"easeInQuart\",\n        formatted_name: \"Quart - EaseIn\",\n        value: [0.895, 0.03, 0.685, 0.22],\n    },\n    easeOutQuart: {\n        name: \"easeOutQuart\",\n        formatted_name: \"Quart - EaseOut\",\n        value: [0.165, 0.84, 0.44, 1],\n    },\n    easeInOutQuart: {\n        name: \"easeInOutQuart\",\n        formatted_name: \"Quart - EaseInOut\",\n        value: [0.77, 0, 0.175, 1],\n    },\n    easeInQuint: {\n        name: \"easeInQuint\",\n        formatted_name: \"Quint - EaseIn\",\n        value: [0.755, 0.05, 0.855, 0.06],\n    },\n    easeOutQuint: {\n        name: \"easeOutQuint\",\n        formatted_name: \"Quint - EaseOut\",\n        value: [0.23, 1, 0.32, 1],\n    },\n    easeInOutQuint: {\n        name: \"easeInOutQuint\",\n        formatted_name: \"Quint - EaseInOut\",\n        value: [0.86, 0, 0.07, 1],\n    },\n    easeInCirc: {\n        name: \"easeInCirc\",\n        formatted_name: \"Circ - EaseIn\",\n        value: [0.6, 0.04, 0.98, 0.335],\n    },\n    easeOutCirc: {\n        name: \"easeOutCirc\",\n        formatted_name: \"Circ - EaseOut\",\n        value: [0.075, 0.82, 0.165, 1],\n    },\n    easeInOutCirc: {\n        name: \"easeInOutCirc\",\n        formatted_name: \"Circ - EaseInOut\",\n        value: [0.785, 0.135, 0.15, 0.86],\n    },\n    easeInExpo: {\n        name: \"easeInExpo\",\n        formatted_name: \"Expo - EaseIn\",\n        value: [0.95, 0.05, 0.795, 0.035],\n    },\n    easeOutExpo: {\n        name: \"easeOutExpo\",\n        formatted_name: \"Expo - EaseOut\",\n        value: [0.19, 1, 0.22, 1],\n    },\n    easeInOutExpo: {\n        name: \"easeInOutExpo\",\n        formatted_name: \"Expo - EaseInOut\",\n        value: [1, 0, 0, 1],\n    },\n    easeInBack: {\n        name: \"easeInBack\",\n        formatted_name: \"Back - EaseIn\",\n        value: [0.6, -0.28, 0.735, 0.045],\n    },\n    easeOutBack: {\n        name: \"easeOutBack\",\n        formatted_name: \"Back - EaseOut\",\n        value: [0.175, 0.885, 0.32, 1.275],\n    },\n    easeInOutBack: {\n        name: \"easeInOutBack\",\n        formatted_name: \"Back - EaseInOut\",\n        value: [0.68, -0.55, 0.265, 1.55],\n    },\n};\n\nfunction getCoordinates(curve, invert) {\n    if (typeof curve === \"string\") {\n        const coordinates = defaultCurves[curve];\n        if (coordinates) {\n            return invert === true\n                ? coordinates.value.slice().reverse()\n                : coordinates.value;\n        }\n        else {\n            throw Error(\"provided incorrect curve\");\n        }\n    }\n    if (typeof curve === \"object\") {\n        if (curve.length === 4) {\n            if (!curve.some(isNaN)) {\n                return curve;\n            }\n            else {\n                throw Error(\"incompatible curve\");\n            }\n        }\n        else {\n            throw Error(\"curve is neither a string or a compatible array\");\n        }\n    }\n    throw Error(\"curve was neither a string or an object\");\n}\n\nfunction generateColors(props, options, invert) {\n    const { steps, hue, saturation, brightness } = props;\n    const { minorSteps } = options;\n    // default rotation is clockwise\n    const rotation = options.rotation === \"counterclockwise\" || options.rotation === \"ccw\"\n        ? \"ccw\"\n        : \"cw\";\n    // generate steps 0 to 1 based on curve\n    const hueSteps = generateNumberOfSteps({\n        curve: getCoordinates(hue.curve, invert),\n        steps,\n    });\n    const saturationSteps = generateNumberOfSteps({\n        curve: getCoordinates(saturation.curve, invert),\n        steps,\n    });\n    const brightnessSteps = generateNumberOfSteps({\n        curve: getCoordinates(brightness.curve, invert),\n        steps,\n    });\n    // adjust hue start/end to get the intended rotation\n    if (rotation === \"cw\") {\n        if (hue.start > hue.end) {\n            hue.start -= 360;\n        }\n    }\n    else if (rotation === \"ccw\") {\n        if (hue.end > hue.start) {\n            hue.end -= 360;\n        }\n    }\n    // Distribute the generated steps between hue, saturation, brightness ranges\n    const hueValues = hueSteps.map(function (s) {\n        return distribute({\n            value: s,\n            rangeA: [0, 1],\n            rangeB: [\n                invert === true ? hue.end : hue.start,\n                invert === true ? hue.start : hue.end,\n            ],\n            limit: true,\n        });\n    });\n    const saturationValues = saturationSteps.map(function (s) {\n        const value = distribute({\n            value: s,\n            rangeA: [0, 1],\n            rangeB: [\n                invert === true ? saturation.end : saturation.start,\n                invert === true ? saturation.start : saturation.end,\n            ],\n            limit: true,\n        });\n        const valueWithRate = value * saturation.rate;\n        return valueWithRate < 1 ? valueWithRate : 1; // prevent too much satuartion saturation\n    });\n    const brightnessValues = brightnessSteps.map(function (s) {\n        return distribute({\n            value: s,\n            rangeA: [0, 1],\n            rangeB: [\n                invert === true ? brightness.end : brightness.start,\n                invert === true ? brightness.start : brightness.end,\n            ],\n        });\n    });\n    // Merge values into color steps\n    const colorSteps = hueValues.map(function (hue, i) {\n        const step = {\n            hue: {\n                step: hueSteps[i],\n                value: hueValues[i],\n            },\n            saturation: {\n                step: saturationSteps[i],\n                value: saturationValues[i],\n            },\n            brightness: {\n                step: brightnessSteps[i],\n                value: brightnessValues[i],\n            },\n            step: i,\n            isMajor: true,\n            isLocked: false,\n        };\n        return step;\n    });\n    // generate minor steps\n    if (minorSteps) {\n        minorSteps.forEach(function (o, i) {\n            const defaultStep = {\n                hue: {\n                    step: 0,\n                    value: 0,\n                },\n                saturation: {\n                    step: 0,\n                    value: 0,\n                },\n                brightness: {\n                    step: 0,\n                    value: 0,\n                },\n                isMajor: true,\n                isLocked: false,\n                step: 0,\n            };\n            let insertPreviousStep = defaultStep;\n            let insertNextStep = defaultStep;\n            let insertAtIndex = 0;\n            colorSteps.forEach(function (p, j) {\n                if (o === p.step) {\n                    insertAtIndex = j + 1;\n                    insertPreviousStep = p;\n                    insertNextStep = colorSteps[j + 1];\n                }\n            });\n            const hueStep = (insertPreviousStep.hue.step + insertNextStep.hue.step) / 2;\n            const hueValue = distribute({\n                value: hueStep,\n                rangeA: [0, 1],\n                rangeB: [\n                    invert === true ? hue.end : hue.start,\n                    invert === true ? hue.start : hue.end,\n                ],\n            });\n            const saturationStep = (insertPreviousStep.saturation.step + insertNextStep.saturation.step) /\n                2;\n            let saturationValue = distribute({\n                value: saturationStep,\n                rangeA: [0, 1],\n                rangeB: [\n                    invert === true ? saturation.end : saturation.start,\n                    invert === true ? saturation.start : saturation.end,\n                ],\n            }) * saturation.rate;\n            saturationValue = saturationValue < 1 ? saturationValue : 1;\n            const brightnessStep = (insertPreviousStep.brightness.step + insertNextStep.brightness.step) /\n                2;\n            const brightnessValue = distribute({\n                value: brightnessStep,\n                rangeA: [0, 1],\n                rangeB: [\n                    invert === true ? brightness.end : brightness.start,\n                    invert === true ? brightness.start : brightness.end,\n                ],\n            });\n            if (insertAtIndex !== undefined) {\n                const insertItem = {\n                    hue: {\n                        step: hueStep,\n                        value: hueValue,\n                    },\n                    saturation: {\n                        step: saturationStep,\n                        value: saturationValue,\n                    },\n                    brightness: {\n                        step: brightnessStep,\n                        value: brightnessValue,\n                    },\n                    isLocked: false,\n                    isMajor: false,\n                    step: (insertPreviousStep.step + insertNextStep.step) / 2,\n                };\n                colorSteps.splice(insertAtIndex, 0, insertItem);\n            }\n        });\n    }\n    return colorSteps;\n}\n\nconst chroma$1 = __webpack_require__(/*! chroma-js */ \"(app-pages-browser)/./node_modules/chroma-js/dist/chroma.cjs\");\nfunction convertToColors(props, options, algorithmResult) {\n    const results = algorithmResult.map(function (set, i) {\n        const colors = set.map(function ({ hue, saturation, brightness, isMajor, isLocked, step, }) {\n            const color = chroma$1.hsv(hue.value, saturation.value, brightness.value);\n            function replaceNaN(array) {\n                // fixes a NaN for 0 values in ChromaJS\n                array[0] = 0;\n                return array;\n            }\n            const convertedColor = {\n                step,\n                hue: hue.value,\n                saturation: saturation.value,\n                brightness: brightness.value,\n                isMajor,\n                isLocked,\n                hex: color.hex(),\n                hsl: isNaN(color.hsl()[0]) ? replaceNaN(color.hsl()) : color.hsl(),\n                hsv: isNaN(color.hsv()[0]) ? replaceNaN(color.hsv()) : color.hsv(),\n                lab: isNaN(color.lab()[0]) ? replaceNaN(color.lab()) : color.lab(),\n                rgbString: color.rgb().join(),\n                rgbArray: color.rgb(),\n                rgbaString: color.rgba().join(),\n                rgbaArray: color.rgba(),\n            };\n            return convertedColor;\n        });\n        return {\n            inverted: i > 0 ? true : false,\n            colors: colors,\n            name: options.name,\n        };\n    });\n    return results;\n}\n\nvar limit = (x, low = 0, high = 1) => {\n    return min$3(max$3(low, x), high);\n};\n\nvar clip_rgb = (rgb) => {\n    rgb._clipped = false;\n    rgb._unclipped = rgb.slice(0);\n    for (let i = 0; i <= 3; i++) {\n        if (i < 3) {\n            if (rgb[i] < 0 || rgb[i] > 255) rgb._clipped = true;\n            rgb[i] = limit(rgb[i], 0, 255);\n        } else if (i === 3) {\n            rgb[i] = limit(rgb[i], 0, 1);\n        }\n    }\n    return rgb;\n};\n\n// ported from jQuery's $.type\nconst classToType = {};\nfor (let name of [\n    'Boolean',\n    'Number',\n    'String',\n    'Function',\n    'Array',\n    'Date',\n    'RegExp',\n    'Undefined',\n    'Null'\n]) {\n    classToType[`[object ${name}]`] = name.toLowerCase();\n}\nfunction type (obj) {\n    return classToType[Object.prototype.toString.call(obj)] || 'object';\n}\n\nvar unpack = (args, keyOrder = null) => {\n    // if called with more than 3 arguments, we return the arguments\n    if (args.length >= 3) return Array.prototype.slice.call(args);\n    // with less than 3 args we check if first arg is object\n    // and use the keyOrder string to extract and sort properties\n    if (type(args[0]) == 'object' && keyOrder) {\n        return keyOrder\n            .split('')\n            .filter((k) => args[0][k] !== undefined)\n            .map((k) => args[0][k]);\n    }\n    // otherwise we just return the first argument\n    // (which we suppose is an array of args)\n    return args[0].slice(0);\n};\n\nvar last = (args) => {\n    if (args.length < 2) return null;\n    const l = args.length - 1;\n    if (type(args[l]) == 'string') return args[l].toLowerCase();\n    return null;\n};\n\nconst { PI: PI$2, min: min$3, max: max$3 } = Math;\n\nconst rnd2 = (a) => Math.round(a * 100) / 100;\nconst rnd3 = (a) => Math.round(a * 100) / 100;\n\nconst TWOPI = PI$2 * 2;\nconst PITHIRD = PI$2 / 3;\nconst DEG2RAD = PI$2 / 180;\nconst RAD2DEG = 180 / PI$2;\n\nvar input = {\n    format: {},\n    autodetect: []\n};\n\nclass Color {\n    constructor(...args) {\n        const me = this;\n        if (\n            type(args[0]) === 'object' &&\n            args[0].constructor &&\n            args[0].constructor === this.constructor\n        ) {\n            // the argument is already a Color instance\n            return args[0];\n        }\n        // last argument could be the mode\n        let mode = last(args);\n        let autodetect = false;\n        if (!mode) {\n            autodetect = true;\n\n            if (!input.sorted) {\n                input.autodetect = input.autodetect.sort((a, b) => b.p - a.p);\n                input.sorted = true;\n            }\n\n            // auto-detect format\n            for (let chk of input.autodetect) {\n                mode = chk.test(...args);\n                if (mode) break;\n            }\n        }\n        if (input.format[mode]) {\n            const rgb = input.format[mode].apply(\n                null,\n                autodetect ? args : args.slice(0, -1)\n            );\n            me._rgb = clip_rgb(rgb);\n        } else {\n            throw new Error('unknown format: ' + args);\n        }\n        // add alpha channel\n        if (me._rgb.length === 3) me._rgb.push(1);\n    }\n    toString() {\n        if (type(this.hex) == 'function') return this.hex();\n        return `[${this._rgb.join(',')}]`;\n    }\n}\n\n// this gets updated automatically\nconst version = '3.0.0';\n\nconst chroma = (...args) => {\n    return new Color(...args);\n};\n\nchroma.version = version;\n\n/**\n\tX11 color names\n\n\thttp://www.w3.org/TR/css3-color/#svg-color\n*/\n\nconst w3cx11 = {\n    aliceblue: '#f0f8ff',\n    antiquewhite: '#faebd7',\n    aqua: '#00ffff',\n    aquamarine: '#7fffd4',\n    azure: '#f0ffff',\n    beige: '#f5f5dc',\n    bisque: '#ffe4c4',\n    black: '#000000',\n    blanchedalmond: '#ffebcd',\n    blue: '#0000ff',\n    blueviolet: '#8a2be2',\n    brown: '#a52a2a',\n    burlywood: '#deb887',\n    cadetblue: '#5f9ea0',\n    chartreuse: '#7fff00',\n    chocolate: '#d2691e',\n    coral: '#ff7f50',\n    cornflowerblue: '#6495ed',\n    cornsilk: '#fff8dc',\n    crimson: '#dc143c',\n    cyan: '#00ffff',\n    darkblue: '#00008b',\n    darkcyan: '#008b8b',\n    darkgoldenrod: '#b8860b',\n    darkgray: '#a9a9a9',\n    darkgreen: '#006400',\n    darkgrey: '#a9a9a9',\n    darkkhaki: '#bdb76b',\n    darkmagenta: '#8b008b',\n    darkolivegreen: '#556b2f',\n    darkorange: '#ff8c00',\n    darkorchid: '#9932cc',\n    darkred: '#8b0000',\n    darksalmon: '#e9967a',\n    darkseagreen: '#8fbc8f',\n    darkslateblue: '#483d8b',\n    darkslategray: '#2f4f4f',\n    darkslategrey: '#2f4f4f',\n    darkturquoise: '#00ced1',\n    darkviolet: '#9400d3',\n    deeppink: '#ff1493',\n    deepskyblue: '#00bfff',\n    dimgray: '#696969',\n    dimgrey: '#696969',\n    dodgerblue: '#1e90ff',\n    firebrick: '#b22222',\n    floralwhite: '#fffaf0',\n    forestgreen: '#228b22',\n    fuchsia: '#ff00ff',\n    gainsboro: '#dcdcdc',\n    ghostwhite: '#f8f8ff',\n    gold: '#ffd700',\n    goldenrod: '#daa520',\n    gray: '#808080',\n    green: '#008000',\n    greenyellow: '#adff2f',\n    grey: '#808080',\n    honeydew: '#f0fff0',\n    hotpink: '#ff69b4',\n    indianred: '#cd5c5c',\n    indigo: '#4b0082',\n    ivory: '#fffff0',\n    khaki: '#f0e68c',\n    laserlemon: '#ffff54',\n    lavender: '#e6e6fa',\n    lavenderblush: '#fff0f5',\n    lawngreen: '#7cfc00',\n    lemonchiffon: '#fffacd',\n    lightblue: '#add8e6',\n    lightcoral: '#f08080',\n    lightcyan: '#e0ffff',\n    lightgoldenrod: '#fafad2',\n    lightgoldenrodyellow: '#fafad2',\n    lightgray: '#d3d3d3',\n    lightgreen: '#90ee90',\n    lightgrey: '#d3d3d3',\n    lightpink: '#ffb6c1',\n    lightsalmon: '#ffa07a',\n    lightseagreen: '#20b2aa',\n    lightskyblue: '#87cefa',\n    lightslategray: '#778899',\n    lightslategrey: '#778899',\n    lightsteelblue: '#b0c4de',\n    lightyellow: '#ffffe0',\n    lime: '#00ff00',\n    limegreen: '#32cd32',\n    linen: '#faf0e6',\n    magenta: '#ff00ff',\n    maroon: '#800000',\n    maroon2: '#7f0000',\n    maroon3: '#b03060',\n    mediumaquamarine: '#66cdaa',\n    mediumblue: '#0000cd',\n    mediumorchid: '#ba55d3',\n    mediumpurple: '#9370db',\n    mediumseagreen: '#3cb371',\n    mediumslateblue: '#7b68ee',\n    mediumspringgreen: '#00fa9a',\n    mediumturquoise: '#48d1cc',\n    mediumvioletred: '#c71585',\n    midnightblue: '#191970',\n    mintcream: '#f5fffa',\n    mistyrose: '#ffe4e1',\n    moccasin: '#ffe4b5',\n    navajowhite: '#ffdead',\n    navy: '#000080',\n    oldlace: '#fdf5e6',\n    olive: '#808000',\n    olivedrab: '#6b8e23',\n    orange: '#ffa500',\n    orangered: '#ff4500',\n    orchid: '#da70d6',\n    palegoldenrod: '#eee8aa',\n    palegreen: '#98fb98',\n    paleturquoise: '#afeeee',\n    palevioletred: '#db7093',\n    papayawhip: '#ffefd5',\n    peachpuff: '#ffdab9',\n    peru: '#cd853f',\n    pink: '#ffc0cb',\n    plum: '#dda0dd',\n    powderblue: '#b0e0e6',\n    purple: '#800080',\n    purple2: '#7f007f',\n    purple3: '#a020f0',\n    rebeccapurple: '#663399',\n    red: '#ff0000',\n    rosybrown: '#bc8f8f',\n    royalblue: '#4169e1',\n    saddlebrown: '#8b4513',\n    salmon: '#fa8072',\n    sandybrown: '#f4a460',\n    seagreen: '#2e8b57',\n    seashell: '#fff5ee',\n    sienna: '#a0522d',\n    silver: '#c0c0c0',\n    skyblue: '#87ceeb',\n    slateblue: '#6a5acd',\n    slategray: '#708090',\n    slategrey: '#708090',\n    snow: '#fffafa',\n    springgreen: '#00ff7f',\n    steelblue: '#4682b4',\n    tan: '#d2b48c',\n    teal: '#008080',\n    thistle: '#d8bfd8',\n    tomato: '#ff6347',\n    turquoise: '#40e0d0',\n    violet: '#ee82ee',\n    wheat: '#f5deb3',\n    white: '#ffffff',\n    whitesmoke: '#f5f5f5',\n    yellow: '#ffff00',\n    yellowgreen: '#9acd32'\n};\n\nconst RE_HEX = /^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\nconst RE_HEXA = /^#?([A-Fa-f0-9]{8}|[A-Fa-f0-9]{4})$/;\n\nconst hex2rgb = (hex) => {\n    if (hex.match(RE_HEX)) {\n        // remove optional leading #\n        if (hex.length === 4 || hex.length === 7) {\n            hex = hex.substr(1);\n        }\n        // expand short-notation to full six-digit\n        if (hex.length === 3) {\n            hex = hex.split('');\n            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n        }\n        const u = parseInt(hex, 16);\n        const r = u >> 16;\n        const g = (u >> 8) & 0xff;\n        const b = u & 0xff;\n        return [r, g, b, 1];\n    }\n\n    // match rgba hex format, eg #FF000077\n    if (hex.match(RE_HEXA)) {\n        if (hex.length === 5 || hex.length === 9) {\n            // remove optional leading #\n            hex = hex.substr(1);\n        }\n        // expand short-notation to full eight-digit\n        if (hex.length === 4) {\n            hex = hex.split('');\n            hex =\n                hex[0] +\n                hex[0] +\n                hex[1] +\n                hex[1] +\n                hex[2] +\n                hex[2] +\n                hex[3] +\n                hex[3];\n        }\n        const u = parseInt(hex, 16);\n        const r = (u >> 24) & 0xff;\n        const g = (u >> 16) & 0xff;\n        const b = (u >> 8) & 0xff;\n        const a = Math.round(((u & 0xff) / 0xff) * 100) / 100;\n        return [r, g, b, a];\n    }\n\n    // we used to check for css colors here\n    // if _input.css? and rgb = _input.css hex\n    //     return rgb\n\n    throw new Error(`unknown hex color: ${hex}`);\n};\n\nconst { round: round$5 } = Math;\n\nconst rgb2hex = (...args) => {\n    let [r, g, b, a] = unpack(args, 'rgba');\n    let mode = last(args) || 'auto';\n    if (a === undefined) a = 1;\n    if (mode === 'auto') {\n        mode = a < 1 ? 'rgba' : 'rgb';\n    }\n    r = round$5(r);\n    g = round$5(g);\n    b = round$5(b);\n    const u = (r << 16) | (g << 8) | b;\n    let str = '000000' + u.toString(16); //#.toUpperCase();\n    str = str.substr(str.length - 6);\n    let hxa = '0' + round$5(a * 255).toString(16);\n    hxa = hxa.substr(hxa.length - 2);\n    switch (mode.toLowerCase()) {\n        case 'rgba':\n            return `#${str}${hxa}`;\n        case 'argb':\n            return `#${hxa}${str}`;\n        default:\n            return `#${str}`;\n    }\n};\n\nColor.prototype.name = function () {\n    const hex = rgb2hex(this._rgb, 'rgb');\n    for (let n of Object.keys(w3cx11)) {\n        if (w3cx11[n] === hex) return n.toLowerCase();\n    }\n    return hex;\n};\n\ninput.format.named = (name) => {\n    name = name.toLowerCase();\n    if (w3cx11[name]) return hex2rgb(w3cx11[name]);\n    throw new Error('unknown color name: ' + name);\n};\n\ninput.autodetect.push({\n    p: 5,\n    test: (h, ...rest) => {\n        if (!rest.length && type(h) === 'string' && w3cx11[h.toLowerCase()]) {\n            return 'named';\n        }\n    }\n});\n\nColor.prototype.alpha = function (a, mutate = false) {\n    if (a !== undefined && type(a) === 'number') {\n        if (mutate) {\n            this._rgb[3] = a;\n            return this;\n        }\n        return new Color([this._rgb[0], this._rgb[1], this._rgb[2], a], 'rgb');\n    }\n    return this._rgb[3];\n};\n\nColor.prototype.clipped = function () {\n    return this._rgb._clipped || false;\n};\n\nconst labConstants = {\n    // Corresponds roughly to RGB brighter/darker\n    Kn: 18,\n\n    // D65 standard referent\n    labWhitePoint: 'd65',\n    Xn: 0.95047,\n    Yn: 1,\n    Zn: 1.08883,\n\n    t0: 0.137931034, // 4 / 29\n    t1: 0.206896552, // 6 / 29\n    t2: 0.12841855, // 3 * t1 * t1\n    t3: 0.008856452, // t1 * t1 * t1,\n\n    kE: 216.0 / 24389.0,\n    kKE: 8.0,\n    kK: 24389.0 / 27.0,\n\n    RefWhiteRGB: {\n        // sRGB\n        X: 0.95047,\n        Y: 1,\n        Z: 1.08883\n    },\n\n    MtxRGB2XYZ: {\n        m00: 0.4124564390896922,\n        m01: 0.21267285140562253,\n        m02: 0.0193338955823293,\n        m10: 0.357576077643909,\n        m11: 0.715152155287818,\n        m12: 0.11919202588130297,\n        m20: 0.18043748326639894,\n        m21: 0.07217499330655958,\n        m22: 0.9503040785363679\n    },\n\n    MtxXYZ2RGB: {\n        m00: 3.2404541621141045,\n        m01: -0.9692660305051868,\n        m02: 0.055643430959114726,\n        m10: -1.5371385127977166,\n        m11: 1.8760108454466942,\n        m12: -0.2040259135167538,\n        m20: -0.498531409556016,\n        m21: 0.041556017530349834,\n        m22: 1.0572251882231791\n    },\n\n    // used in rgb2xyz\n    As: 0.9414285350000001,\n    Bs: 1.040417467,\n    Cs: 1.089532651,\n\n    MtxAdaptMa: {\n        m00: 0.8951,\n        m01: -0.7502,\n        m02: 0.0389,\n        m10: 0.2664,\n        m11: 1.7135,\n        m12: -0.0685,\n        m20: -0.1614,\n        m21: 0.0367,\n        m22: 1.0296\n    },\n\n    MtxAdaptMaI: {\n        m00: 0.9869929054667123,\n        m01: 0.43230526972339456,\n        m02: -0.008528664575177328,\n        m10: -0.14705425642099013,\n        m11: 0.5183602715367776,\n        m12: 0.04004282165408487,\n        m20: 0.15996265166373125,\n        m21: 0.0492912282128556,\n        m22: 0.9684866957875502\n    }\n};\n\n// taken from https://de.mathworks.com/help/images/ref/whitepoint.html\nconst ILLUMINANTS = new Map([\n    // ASTM E308-01\n    ['a', [1.0985, 0.35585]],\n    // Wyszecki & Stiles, p. 769\n    ['b', [1.0985, 0.35585]],\n    // C ASTM E308-01\n    ['c', [0.98074, 1.18232]],\n    // D50 (ASTM E308-01)\n    ['d50', [0.96422, 0.82521]],\n    // D55 (ASTM E308-01)\n    ['d55', [0.95682, 0.92149]],\n    // D65 (ASTM E308-01)\n    ['d65', [0.95047, 1.08883]],\n    // E (ASTM E308-01)\n    ['e', [1, 1, 1]],\n    // F2 (ASTM E308-01)\n    ['f2', [0.99186, 0.67393]],\n    // F7 (ASTM E308-01)\n    ['f7', [0.95041, 1.08747]],\n    // F11 (ASTM E308-01)\n    ['f11', [1.00962, 0.6435]],\n    ['icc', [0.96422, 0.82521]]\n]);\n\nfunction setLabWhitePoint(name) {\n    const ill = ILLUMINANTS.get(String(name).toLowerCase());\n    if (!ill) {\n        throw new Error('unknown Lab illuminant ' + name);\n    }\n    labConstants.labWhitePoint = name;\n    labConstants.Xn = ill[0];\n    labConstants.Zn = ill[1];\n}\n\nfunction getLabWhitePoint() {\n    return labConstants.labWhitePoint;\n}\n\n/*\n * L* [0..100]\n * a [-100..100]\n * b [-100..100]\n */\nconst lab2rgb = (...args) => {\n    args = unpack(args, 'lab');\n    const [L, a, b] = args;\n    const [x, y, z] = lab2xyz(L, a, b);\n    const [r, g, b_] = xyz2rgb(x, y, z);\n    return [r, g, b_, args.length > 3 ? args[3] : 1];\n};\n\nconst lab2xyz = (L, a, b) => {\n    const { kE, kK, kKE, Xn, Yn, Zn } = labConstants;\n\n    const fy = (L + 16.0) / 116.0;\n    const fx = 0.002 * a + fy;\n    const fz = fy - 0.005 * b;\n\n    const fx3 = fx * fx * fx;\n    const fz3 = fz * fz * fz;\n\n    const xr = fx3 > kE ? fx3 : (116.0 * fx - 16.0) / kK;\n    const yr = L > kKE ? Math.pow((L + 16.0) / 116.0, 3.0) : L / kK;\n    const zr = fz3 > kE ? fz3 : (116.0 * fz - 16.0) / kK;\n\n    const x = xr * Xn;\n    const y = yr * Yn;\n    const z = zr * Zn;\n\n    return [x, y, z];\n};\n\nconst compand = (linear) => {\n    /* sRGB */\n    const sign = Math.sign(linear);\n    linear = Math.abs(linear);\n    return (\n        (linear <= 0.0031308\n            ? linear * 12.92\n            : 1.055 * Math.pow(linear, 1.0 / 2.4) - 0.055) * sign\n    );\n};\n\nconst xyz2rgb = (x, y, z) => {\n    const { MtxAdaptMa, MtxAdaptMaI, MtxXYZ2RGB, RefWhiteRGB, Xn, Yn, Zn } =\n        labConstants;\n\n    const As = Xn * MtxAdaptMa.m00 + Yn * MtxAdaptMa.m10 + Zn * MtxAdaptMa.m20;\n    const Bs = Xn * MtxAdaptMa.m01 + Yn * MtxAdaptMa.m11 + Zn * MtxAdaptMa.m21;\n    const Cs = Xn * MtxAdaptMa.m02 + Yn * MtxAdaptMa.m12 + Zn * MtxAdaptMa.m22;\n\n    const Ad =\n        RefWhiteRGB.X * MtxAdaptMa.m00 +\n        RefWhiteRGB.Y * MtxAdaptMa.m10 +\n        RefWhiteRGB.Z * MtxAdaptMa.m20;\n    const Bd =\n        RefWhiteRGB.X * MtxAdaptMa.m01 +\n        RefWhiteRGB.Y * MtxAdaptMa.m11 +\n        RefWhiteRGB.Z * MtxAdaptMa.m21;\n    const Cd =\n        RefWhiteRGB.X * MtxAdaptMa.m02 +\n        RefWhiteRGB.Y * MtxAdaptMa.m12 +\n        RefWhiteRGB.Z * MtxAdaptMa.m22;\n\n    const X1 =\n        (x * MtxAdaptMa.m00 + y * MtxAdaptMa.m10 + z * MtxAdaptMa.m20) *\n        (Ad / As);\n    const Y1 =\n        (x * MtxAdaptMa.m01 + y * MtxAdaptMa.m11 + z * MtxAdaptMa.m21) *\n        (Bd / Bs);\n    const Z1 =\n        (x * MtxAdaptMa.m02 + y * MtxAdaptMa.m12 + z * MtxAdaptMa.m22) *\n        (Cd / Cs);\n\n    const X2 =\n        X1 * MtxAdaptMaI.m00 + Y1 * MtxAdaptMaI.m10 + Z1 * MtxAdaptMaI.m20;\n    const Y2 =\n        X1 * MtxAdaptMaI.m01 + Y1 * MtxAdaptMaI.m11 + Z1 * MtxAdaptMaI.m21;\n    const Z2 =\n        X1 * MtxAdaptMaI.m02 + Y1 * MtxAdaptMaI.m12 + Z1 * MtxAdaptMaI.m22;\n\n    const r = compand(\n        X2 * MtxXYZ2RGB.m00 + Y2 * MtxXYZ2RGB.m10 + Z2 * MtxXYZ2RGB.m20\n    );\n    const g = compand(\n        X2 * MtxXYZ2RGB.m01 + Y2 * MtxXYZ2RGB.m11 + Z2 * MtxXYZ2RGB.m21\n    );\n    const b = compand(\n        X2 * MtxXYZ2RGB.m02 + Y2 * MtxXYZ2RGB.m12 + Z2 * MtxXYZ2RGB.m22\n    );\n\n    return [r * 255, g * 255, b * 255];\n};\n\nconst rgb2lab = (...args) => {\n    const [r, g, b, ...rest] = unpack(args, 'rgb');\n    const [x, y, z] = rgb2xyz(r, g, b);\n    const [L, a, b_] = xyz2lab(x, y, z);\n    return [L, a, b_, ...(rest.length > 0 && rest[0] < 1 ? [rest[0]] : [])];\n};\n\nfunction xyz2lab(x, y, z) {\n    const { Xn, Yn, Zn, kE, kK } = labConstants;\n    const xr = x / Xn;\n    const yr = y / Yn;\n    const zr = z / Zn;\n\n    const fx = xr > kE ? Math.pow(xr, 1.0 / 3.0) : (kK * xr + 16.0) / 116.0;\n    const fy = yr > kE ? Math.pow(yr, 1.0 / 3.0) : (kK * yr + 16.0) / 116.0;\n    const fz = zr > kE ? Math.pow(zr, 1.0 / 3.0) : (kK * zr + 16.0) / 116.0;\n\n    return [116.0 * fy - 16.0, 500.0 * (fx - fy), 200.0 * (fy - fz)];\n}\n\nfunction gammaAdjustSRGB(companded) {\n    const sign = Math.sign(companded);\n    companded = Math.abs(companded);\n    const linear =\n        companded <= 0.04045\n            ? companded / 12.92\n            : Math.pow((companded + 0.055) / 1.055, 2.4);\n    return linear * sign;\n}\n\nconst rgb2xyz = (r, g, b) => {\n    // normalize and gamma adjust\n    r = gammaAdjustSRGB(r / 255);\n    g = gammaAdjustSRGB(g / 255);\n    b = gammaAdjustSRGB(b / 255);\n\n    const { MtxRGB2XYZ, MtxAdaptMa, MtxAdaptMaI, Xn, Yn, Zn, As, Bs, Cs } =\n        labConstants;\n\n    let x = r * MtxRGB2XYZ.m00 + g * MtxRGB2XYZ.m10 + b * MtxRGB2XYZ.m20;\n    let y = r * MtxRGB2XYZ.m01 + g * MtxRGB2XYZ.m11 + b * MtxRGB2XYZ.m21;\n    let z = r * MtxRGB2XYZ.m02 + g * MtxRGB2XYZ.m12 + b * MtxRGB2XYZ.m22;\n\n    const Ad = Xn * MtxAdaptMa.m00 + Yn * MtxAdaptMa.m10 + Zn * MtxAdaptMa.m20;\n    const Bd = Xn * MtxAdaptMa.m01 + Yn * MtxAdaptMa.m11 + Zn * MtxAdaptMa.m21;\n    const Cd = Xn * MtxAdaptMa.m02 + Yn * MtxAdaptMa.m12 + Zn * MtxAdaptMa.m22;\n\n    let X = x * MtxAdaptMa.m00 + y * MtxAdaptMa.m10 + z * MtxAdaptMa.m20;\n    let Y = x * MtxAdaptMa.m01 + y * MtxAdaptMa.m11 + z * MtxAdaptMa.m21;\n    let Z = x * MtxAdaptMa.m02 + y * MtxAdaptMa.m12 + z * MtxAdaptMa.m22;\n\n    X *= Ad / As;\n    Y *= Bd / Bs;\n    Z *= Cd / Cs;\n\n    x = X * MtxAdaptMaI.m00 + Y * MtxAdaptMaI.m10 + Z * MtxAdaptMaI.m20;\n    y = X * MtxAdaptMaI.m01 + Y * MtxAdaptMaI.m11 + Z * MtxAdaptMaI.m21;\n    z = X * MtxAdaptMaI.m02 + Y * MtxAdaptMaI.m12 + Z * MtxAdaptMaI.m22;\n\n    return [x, y, z];\n};\n\nColor.prototype.lab = function () {\n    return rgb2lab(this._rgb);\n};\n\nconst lab$1 = (...args) => new Color(...args, 'lab');\nObject.assign(chroma, { lab: lab$1, getLabWhitePoint, setLabWhitePoint });\n\ninput.format.lab = lab2rgb;\n\ninput.autodetect.push({\n    p: 2,\n    test: (...args) => {\n        args = unpack(args, 'lab');\n        if (type(args) === 'array' && args.length === 3) {\n            return 'lab';\n        }\n    }\n});\n\nColor.prototype.darken = function (amount = 1) {\n    const me = this;\n    const lab = me.lab();\n    lab[0] -= labConstants.Kn * amount;\n    return new Color(lab, 'lab').alpha(me.alpha(), true);\n};\n\nColor.prototype.brighten = function (amount = 1) {\n    return this.darken(-amount);\n};\n\nColor.prototype.darker = Color.prototype.darken;\nColor.prototype.brighter = Color.prototype.brighten;\n\nColor.prototype.get = function (mc) {\n    const [mode, channel] = mc.split('.');\n    const src = this[mode]();\n    if (channel) {\n        const i = mode.indexOf(channel) - (mode.substr(0, 2) === 'ok' ? 2 : 0);\n        if (i > -1) return src[i];\n        throw new Error(`unknown channel ${channel} in mode ${mode}`);\n    } else {\n        return src;\n    }\n};\n\nconst { pow: pow$6 } = Math;\n\nconst EPS = 1e-7;\nconst MAX_ITER = 20;\n\nColor.prototype.luminance = function (lum, mode = 'rgb') {\n    if (lum !== undefined && type(lum) === 'number') {\n        if (lum === 0) {\n            // return pure black\n            return new Color([0, 0, 0, this._rgb[3]], 'rgb');\n        }\n        if (lum === 1) {\n            // return pure white\n            return new Color([255, 255, 255, this._rgb[3]], 'rgb');\n        }\n        // compute new color using...\n        let cur_lum = this.luminance();\n        let max_iter = MAX_ITER;\n\n        const test = (low, high) => {\n            const mid = low.interpolate(high, 0.5, mode);\n            const lm = mid.luminance();\n            if (Math.abs(lum - lm) < EPS || !max_iter--) {\n                // close enough\n                return mid;\n            }\n            return lm > lum ? test(low, mid) : test(mid, high);\n        };\n\n        const rgb = (\n            cur_lum > lum\n                ? test(new Color([0, 0, 0]), this)\n                : test(this, new Color([255, 255, 255]))\n        ).rgb();\n        return new Color([...rgb, this._rgb[3]]);\n    }\n    return rgb2luminance(...this._rgb.slice(0, 3));\n};\n\nconst rgb2luminance = (r, g, b) => {\n    // relative luminance\n    // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n    r = luminance_x(r);\n    g = luminance_x(g);\n    b = luminance_x(b);\n    return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n};\n\nconst luminance_x = (x) => {\n    x /= 255;\n    return x <= 0.03928 ? x / 12.92 : pow$6((x + 0.055) / 1.055, 2.4);\n};\n\nvar index = {};\n\nvar mix = (col1, col2, f = 0.5, ...rest) => {\n    let mode = rest[0] || 'lrgb';\n    if (!index[mode] && !rest.length) {\n        // fall back to the first supported mode\n        mode = Object.keys(index)[0];\n    }\n    if (!index[mode]) {\n        throw new Error(`interpolation mode ${mode} is not defined`);\n    }\n    if (type(col1) !== 'object') col1 = new Color(col1);\n    if (type(col2) !== 'object') col2 = new Color(col2);\n    return index[mode](col1, col2, f).alpha(\n        col1.alpha() + f * (col2.alpha() - col1.alpha())\n    );\n};\n\nColor.prototype.mix = Color.prototype.interpolate = function (\n    col2,\n    f = 0.5,\n    ...rest\n) {\n    return mix(this, col2, f, ...rest);\n};\n\nColor.prototype.premultiply = function (mutate = false) {\n    const rgb = this._rgb;\n    const a = rgb[3];\n    if (mutate) {\n        this._rgb = [rgb[0] * a, rgb[1] * a, rgb[2] * a, a];\n        return this;\n    } else {\n        return new Color([rgb[0] * a, rgb[1] * a, rgb[2] * a, a], 'rgb');\n    }\n};\n\nconst { sin: sin$3, cos: cos$4 } = Math;\n\nconst lch2lab = (...args) => {\n    /*\n    Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.\n    These formulas were invented by David Dalrymple to obtain maximum contrast without going\n    out of gamut if the parameters are in the range 0-1.\n\n    A saturation multiplier was added by Gregor Aisch\n    */\n    let [l, c, h] = unpack(args, 'lch');\n    if (isNaN(h)) h = 0;\n    h = h * DEG2RAD;\n    return [l, cos$4(h) * c, sin$3(h) * c];\n};\n\nconst lch2rgb = (...args) => {\n    args = unpack(args, 'lch');\n    const [l, c, h] = args;\n    const [L, a, b_] = lch2lab(l, c, h);\n    const [r, g, b] = lab2rgb(L, a, b_);\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n};\n\nconst hcl2rgb = (...args) => {\n    const hcl = unpack(args, 'hcl').reverse();\n    return lch2rgb(...hcl);\n};\n\nconst { sqrt: sqrt$4, atan2: atan2$2, round: round$4 } = Math;\n\nconst lab2lch = (...args) => {\n    const [l, a, b] = unpack(args, 'lab');\n    const c = sqrt$4(a * a + b * b);\n    let h = (atan2$2(b, a) * RAD2DEG + 360) % 360;\n    if (round$4(c * 10000) === 0) h = Number.NaN;\n    return [l, c, h];\n};\n\nconst rgb2lch = (...args) => {\n    const [r, g, b, ...rest] = unpack(args, 'rgb');\n    const [l, a, b_] = rgb2lab(r, g, b);\n    const [L, c, h] = lab2lch(l, a, b_);\n    return [L, c, h, ...(rest.length > 0 && rest[0] < 1 ? [rest[0]] : [])];\n};\n\nColor.prototype.lch = function () {\n    return rgb2lch(this._rgb);\n};\nColor.prototype.hcl = function () {\n    return rgb2lch(this._rgb).reverse();\n};\n\nconst lch$1 = (...args) => new Color(...args, 'lch');\nconst hcl = (...args) => new Color(...args, 'hcl');\n\nObject.assign(chroma, { lch: lch$1, hcl });\n\ninput.format.lch = lch2rgb;\ninput.format.hcl = hcl2rgb;\n['lch', 'hcl'].forEach((m) =>\n    input.autodetect.push({\n        p: 2,\n        test: (...args) => {\n            args = unpack(args, m);\n            if (type(args) === 'array' && args.length === 3) {\n                return m;\n            }\n        }\n    })\n);\n\nColor.prototype.saturate = function (amount = 1) {\n    const me = this;\n    const lch = me.lch();\n    lch[1] += labConstants.Kn * amount;\n    if (lch[1] < 0) lch[1] = 0;\n    return new Color(lch, 'lch').alpha(me.alpha(), true);\n};\n\nColor.prototype.desaturate = function (amount = 1) {\n    return this.saturate(-amount);\n};\n\nColor.prototype.set = function (mc, value, mutate = false) {\n    const [mode, channel] = mc.split('.');\n    const src = this[mode]();\n    if (channel) {\n        const i = mode.indexOf(channel) - (mode.substr(0, 2) === 'ok' ? 2 : 0);\n        if (i > -1) {\n            if (type(value) == 'string') {\n                switch (value.charAt(0)) {\n                    case '+':\n                        src[i] += +value;\n                        break;\n                    case '-':\n                        src[i] += +value;\n                        break;\n                    case '*':\n                        src[i] *= +value.substr(1);\n                        break;\n                    case '/':\n                        src[i] /= +value.substr(1);\n                        break;\n                    default:\n                        src[i] = +value;\n                }\n            } else if (type(value) === 'number') {\n                src[i] = value;\n            } else {\n                throw new Error(`unsupported value for Color.set`);\n            }\n            const out = new Color(src, mode);\n            if (mutate) {\n                this._rgb = out._rgb;\n                return this;\n            }\n            return out;\n        }\n        throw new Error(`unknown channel ${channel} in mode ${mode}`);\n    } else {\n        return src;\n    }\n};\n\nColor.prototype.tint = function (f = 0.5, ...rest) {\n    return mix(this, 'white', f, ...rest);\n};\n\nColor.prototype.shade = function (f = 0.5, ...rest) {\n    return mix(this, 'black', f, ...rest);\n};\n\nconst rgb$1 = (col1, col2, f) => {\n    const xyz0 = col1._rgb;\n    const xyz1 = col2._rgb;\n    return new Color(\n        xyz0[0] + f * (xyz1[0] - xyz0[0]),\n        xyz0[1] + f * (xyz1[1] - xyz0[1]),\n        xyz0[2] + f * (xyz1[2] - xyz0[2]),\n        'rgb'\n    );\n};\n\n// register interpolator\nindex.rgb = rgb$1;\n\nconst { sqrt: sqrt$3, pow: pow$5 } = Math;\n\nconst lrgb = (col1, col2, f) => {\n    const [x1, y1, z1] = col1._rgb;\n    const [x2, y2, z2] = col2._rgb;\n    return new Color(\n        sqrt$3(pow$5(x1, 2) * (1 - f) + pow$5(x2, 2) * f),\n        sqrt$3(pow$5(y1, 2) * (1 - f) + pow$5(y2, 2) * f),\n        sqrt$3(pow$5(z1, 2) * (1 - f) + pow$5(z2, 2) * f),\n        'rgb'\n    );\n};\n\n// register interpolator\nindex.lrgb = lrgb;\n\nconst lab = (col1, col2, f) => {\n    const xyz0 = col1.lab();\n    const xyz1 = col2.lab();\n    return new Color(\n        xyz0[0] + f * (xyz1[0] - xyz0[0]),\n        xyz0[1] + f * (xyz1[1] - xyz0[1]),\n        xyz0[2] + f * (xyz1[2] - xyz0[2]),\n        'lab'\n    );\n};\n\n// register interpolator\nindex.lab = lab;\n\nvar interpolate_hsx = (col1, col2, f, m) => {\n    let xyz0, xyz1;\n    if (m === 'hsl') {\n        xyz0 = col1.hsl();\n        xyz1 = col2.hsl();\n    } else if (m === 'hsv') {\n        xyz0 = col1.hsv();\n        xyz1 = col2.hsv();\n    } else if (m === 'hcg') {\n        xyz0 = col1.hcg();\n        xyz1 = col2.hcg();\n    } else if (m === 'hsi') {\n        xyz0 = col1.hsi();\n        xyz1 = col2.hsi();\n    } else if (m === 'lch' || m === 'hcl') {\n        m = 'hcl';\n        xyz0 = col1.hcl();\n        xyz1 = col2.hcl();\n    } else if (m === 'oklch') {\n        xyz0 = col1.oklch().reverse();\n        xyz1 = col2.oklch().reverse();\n    }\n\n    let hue0, hue1, sat0, sat1, lbv0, lbv1;\n    if (m.substr(0, 1) === 'h' || m === 'oklch') {\n        [hue0, sat0, lbv0] = xyz0;\n        [hue1, sat1, lbv1] = xyz1;\n    }\n\n    let sat, hue, lbv, dh;\n\n    if (!isNaN(hue0) && !isNaN(hue1)) {\n        // both colors have hue\n        if (hue1 > hue0 && hue1 - hue0 > 180) {\n            dh = hue1 - (hue0 + 360);\n        } else if (hue1 < hue0 && hue0 - hue1 > 180) {\n            dh = hue1 + 360 - hue0;\n        } else {\n            dh = hue1 - hue0;\n        }\n        hue = hue0 + f * dh;\n    } else if (!isNaN(hue0)) {\n        hue = hue0;\n        if ((lbv1 == 1 || lbv1 == 0) && m != 'hsv') sat = sat0;\n    } else if (!isNaN(hue1)) {\n        hue = hue1;\n        if ((lbv0 == 1 || lbv0 == 0) && m != 'hsv') sat = sat1;\n    } else {\n        hue = Number.NaN;\n    }\n\n    if (sat === undefined) sat = sat0 + f * (sat1 - sat0);\n    lbv = lbv0 + f * (lbv1 - lbv0);\n    return m === 'oklch'\n        ? new Color([lbv, sat, hue], m)\n        : new Color([hue, sat, lbv], m);\n};\n\nconst lch = (col1, col2, f) => {\n    return interpolate_hsx(col1, col2, f, 'lch');\n};\n\n// register interpolator\nindex.lch = lch;\nindex.hcl = lch;\n\nconst num2rgb = (num) => {\n    if (type(num) == 'number' && num >= 0 && num <= 0xffffff) {\n        const r = num >> 16;\n        const g = (num >> 8) & 0xff;\n        const b = num & 0xff;\n        return [r, g, b, 1];\n    }\n    throw new Error('unknown num color: ' + num);\n};\n\nconst rgb2num = (...args) => {\n    const [r, g, b] = unpack(args, 'rgb');\n    return (r << 16) + (g << 8) + b;\n};\n\nColor.prototype.num = function () {\n    return rgb2num(this._rgb);\n};\n\nconst num$1 = (...args) => new Color(...args, 'num');\n\nObject.assign(chroma, { num: num$1 });\n\ninput.format.num = num2rgb;\n\ninput.autodetect.push({\n    p: 5,\n    test: (...args) => {\n        if (\n            args.length === 1 &&\n            type(args[0]) === 'number' &&\n            args[0] >= 0 &&\n            args[0] <= 0xffffff\n        ) {\n            return 'num';\n        }\n    }\n});\n\nconst num = (col1, col2, f) => {\n    const c1 = col1.num();\n    const c2 = col2.num();\n    return new Color(c1 + f * (c2 - c1), 'num');\n};\n\n// register interpolator\nindex.num = num;\n\nconst { floor: floor$3 } = Math;\n\n/*\n * this is basically just HSV with some minor tweaks\n *\n * hue.. [0..360]\n * chroma .. [0..1]\n * grayness .. [0..1]\n */\n\nconst hcg2rgb = (...args) => {\n    args = unpack(args, 'hcg');\n    let [h, c, _g] = args;\n    let r, g, b;\n    _g = _g * 255;\n    const _c = c * 255;\n    if (c === 0) {\n        r = g = b = _g;\n    } else {\n        if (h === 360) h = 0;\n        if (h > 360) h -= 360;\n        if (h < 0) h += 360;\n        h /= 60;\n        const i = floor$3(h);\n        const f = h - i;\n        const p = _g * (1 - c);\n        const q = p + _c * (1 - f);\n        const t = p + _c * f;\n        const v = p + _c;\n        switch (i) {\n            case 0:\n                [r, g, b] = [v, t, p];\n                break;\n            case 1:\n                [r, g, b] = [q, v, p];\n                break;\n            case 2:\n                [r, g, b] = [p, v, t];\n                break;\n            case 3:\n                [r, g, b] = [p, q, v];\n                break;\n            case 4:\n                [r, g, b] = [t, p, v];\n                break;\n            case 5:\n                [r, g, b] = [v, p, q];\n                break;\n        }\n    }\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n};\n\nconst rgb2hcg = (...args) => {\n    const [r, g, b] = unpack(args, 'rgb');\n    const minRgb = min$3(r, g, b);\n    const maxRgb = max$3(r, g, b);\n    const delta = maxRgb - minRgb;\n    const c = (delta * 100) / 255;\n    const _g = (minRgb / (255 - delta)) * 100;\n    let h;\n    if (delta === 0) {\n        h = Number.NaN;\n    } else {\n        if (r === maxRgb) h = (g - b) / delta;\n        if (g === maxRgb) h = 2 + (b - r) / delta;\n        if (b === maxRgb) h = 4 + (r - g) / delta;\n        h *= 60;\n        if (h < 0) h += 360;\n    }\n    return [h, c, _g];\n};\n\nColor.prototype.hcg = function () {\n    return rgb2hcg(this._rgb);\n};\n\nconst hcg$1 = (...args) => new Color(...args, 'hcg');\nchroma.hcg = hcg$1;\n\ninput.format.hcg = hcg2rgb;\n\ninput.autodetect.push({\n    p: 1,\n    test: (...args) => {\n        args = unpack(args, 'hcg');\n        if (type(args) === 'array' && args.length === 3) {\n            return 'hcg';\n        }\n    }\n});\n\nconst hcg = (col1, col2, f) => {\n    return interpolate_hsx(col1, col2, f, 'hcg');\n};\n\n// register interpolator\nindex.hcg = hcg;\n\nconst { cos: cos$3 } = Math;\n\n/*\n * hue [0..360]\n * saturation [0..1]\n * intensity [0..1]\n */\nconst hsi2rgb = (...args) => {\n    /*\n    borrowed from here:\n    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp\n    */\n    args = unpack(args, 'hsi');\n    let [h, s, i] = args;\n    let r, g, b;\n\n    if (isNaN(h)) h = 0;\n    if (isNaN(s)) s = 0;\n    // normalize hue\n    if (h > 360) h -= 360;\n    if (h < 0) h += 360;\n    h /= 360;\n    if (h < 1 / 3) {\n        b = (1 - s) / 3;\n        r = (1 + (s * cos$3(TWOPI * h)) / cos$3(PITHIRD - TWOPI * h)) / 3;\n        g = 1 - (b + r);\n    } else if (h < 2 / 3) {\n        h -= 1 / 3;\n        r = (1 - s) / 3;\n        g = (1 + (s * cos$3(TWOPI * h)) / cos$3(PITHIRD - TWOPI * h)) / 3;\n        b = 1 - (r + g);\n    } else {\n        h -= 2 / 3;\n        g = (1 - s) / 3;\n        b = (1 + (s * cos$3(TWOPI * h)) / cos$3(PITHIRD - TWOPI * h)) / 3;\n        r = 1 - (g + b);\n    }\n    r = limit(i * r * 3);\n    g = limit(i * g * 3);\n    b = limit(i * b * 3);\n    return [r * 255, g * 255, b * 255, args.length > 3 ? args[3] : 1];\n};\n\nconst { min: min$2, sqrt: sqrt$2, acos } = Math;\n\nconst rgb2hsi = (...args) => {\n    /*\n    borrowed from here:\n    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp\n    */\n    let [r, g, b] = unpack(args, 'rgb');\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    let h;\n    const min_ = min$2(r, g, b);\n    const i = (r + g + b) / 3;\n    const s = i > 0 ? 1 - min_ / i : 0;\n    if (s === 0) {\n        h = NaN;\n    } else {\n        h = (r - g + (r - b)) / 2;\n        h /= sqrt$2((r - g) * (r - g) + (r - b) * (g - b));\n        h = acos(h);\n        if (b > g) {\n            h = TWOPI - h;\n        }\n        h /= TWOPI;\n    }\n    return [h * 360, s, i];\n};\n\nColor.prototype.hsi = function () {\n    return rgb2hsi(this._rgb);\n};\n\nconst hsi$1 = (...args) => new Color(...args, 'hsi');\nchroma.hsi = hsi$1;\n\ninput.format.hsi = hsi2rgb;\n\ninput.autodetect.push({\n    p: 2,\n    test: (...args) => {\n        args = unpack(args, 'hsi');\n        if (type(args) === 'array' && args.length === 3) {\n            return 'hsi';\n        }\n    }\n});\n\nconst hsi = (col1, col2, f) => {\n    return interpolate_hsx(col1, col2, f, 'hsi');\n};\n\n// register interpolator\nindex.hsi = hsi;\n\nconst hsl2rgb = (...args) => {\n    args = unpack(args, 'hsl');\n    const [h, s, l] = args;\n    let r, g, b;\n    if (s === 0) {\n        r = g = b = l * 255;\n    } else {\n        const t3 = [0, 0, 0];\n        const c = [0, 0, 0];\n        const t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        const t1 = 2 * l - t2;\n        const h_ = h / 360;\n        t3[0] = h_ + 1 / 3;\n        t3[1] = h_;\n        t3[2] = h_ - 1 / 3;\n        for (let i = 0; i < 3; i++) {\n            if (t3[i] < 0) t3[i] += 1;\n            if (t3[i] > 1) t3[i] -= 1;\n            if (6 * t3[i] < 1) c[i] = t1 + (t2 - t1) * 6 * t3[i];\n            else if (2 * t3[i] < 1) c[i] = t2;\n            else if (3 * t3[i] < 2) c[i] = t1 + (t2 - t1) * (2 / 3 - t3[i]) * 6;\n            else c[i] = t1;\n        }\n        [r, g, b] = [c[0] * 255, c[1] * 255, c[2] * 255];\n    }\n    if (args.length > 3) {\n        // keep alpha channel\n        return [r, g, b, args[3]];\n    }\n    return [r, g, b, 1];\n};\n\n/*\n * supported arguments:\n * - rgb2hsl(r,g,b)\n * - rgb2hsl(r,g,b,a)\n * - rgb2hsl([r,g,b])\n * - rgb2hsl([r,g,b,a])\n * - rgb2hsl({r,g,b,a})\n */\nconst rgb2hsl$1 = (...args) => {\n    args = unpack(args, 'rgba');\n    let [r, g, b] = args;\n\n    r /= 255;\n    g /= 255;\n    b /= 255;\n\n    const minRgb = min$3(r, g, b);\n    const maxRgb = max$3(r, g, b);\n\n    const l = (maxRgb + minRgb) / 2;\n    let s, h;\n\n    if (maxRgb === minRgb) {\n        s = 0;\n        h = Number.NaN;\n    } else {\n        s =\n            l < 0.5\n                ? (maxRgb - minRgb) / (maxRgb + minRgb)\n                : (maxRgb - minRgb) / (2 - maxRgb - minRgb);\n    }\n\n    if (r == maxRgb) h = (g - b) / (maxRgb - minRgb);\n    else if (g == maxRgb) h = 2 + (b - r) / (maxRgb - minRgb);\n    else if (b == maxRgb) h = 4 + (r - g) / (maxRgb - minRgb);\n\n    h *= 60;\n    if (h < 0) h += 360;\n    if (args.length > 3 && args[3] !== undefined) return [h, s, l, args[3]];\n    return [h, s, l];\n};\n\nColor.prototype.hsl = function () {\n    return rgb2hsl$1(this._rgb);\n};\n\nconst hsl$1 = (...args) => new Color(...args, 'hsl');\nchroma.hsl = hsl$1;\n\ninput.format.hsl = hsl2rgb;\n\ninput.autodetect.push({\n    p: 2,\n    test: (...args) => {\n        args = unpack(args, 'hsl');\n        if (type(args) === 'array' && args.length === 3) {\n            return 'hsl';\n        }\n    }\n});\n\nconst hsl = (col1, col2, f) => {\n    return interpolate_hsx(col1, col2, f, 'hsl');\n};\n\n// register interpolator\nindex.hsl = hsl;\n\nconst { floor: floor$2 } = Math;\n\nconst hsv2rgb = (...args) => {\n    args = unpack(args, 'hsv');\n    let [h, s, v] = args;\n    let r, g, b;\n    v *= 255;\n    if (s === 0) {\n        r = g = b = v;\n    } else {\n        if (h === 360) h = 0;\n        if (h > 360) h -= 360;\n        if (h < 0) h += 360;\n        h /= 60;\n\n        const i = floor$2(h);\n        const f = h - i;\n        const p = v * (1 - s);\n        const q = v * (1 - s * f);\n        const t = v * (1 - s * (1 - f));\n\n        switch (i) {\n            case 0:\n                [r, g, b] = [v, t, p];\n                break;\n            case 1:\n                [r, g, b] = [q, v, p];\n                break;\n            case 2:\n                [r, g, b] = [p, v, t];\n                break;\n            case 3:\n                [r, g, b] = [p, q, v];\n                break;\n            case 4:\n                [r, g, b] = [t, p, v];\n                break;\n            case 5:\n                [r, g, b] = [v, p, q];\n                break;\n        }\n    }\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n};\n\nconst { min: min$1, max: max$2 } = Math;\n\n/*\n * supported arguments:\n * - rgb2hsv(r,g,b)\n * - rgb2hsv([r,g,b])\n * - rgb2hsv({r,g,b})\n */\nconst rgb2hsl = (...args) => {\n    args = unpack(args, 'rgb');\n    let [r, g, b] = args;\n    const min_ = min$1(r, g, b);\n    const max_ = max$2(r, g, b);\n    const delta = max_ - min_;\n    let h, s, v;\n    v = max_ / 255.0;\n    if (max_ === 0) {\n        h = Number.NaN;\n        s = 0;\n    } else {\n        s = delta / max_;\n        if (r === max_) h = (g - b) / delta;\n        if (g === max_) h = 2 + (b - r) / delta;\n        if (b === max_) h = 4 + (r - g) / delta;\n        h *= 60;\n        if (h < 0) h += 360;\n    }\n    return [h, s, v];\n};\n\nColor.prototype.hsv = function () {\n    return rgb2hsl(this._rgb);\n};\n\nconst hsv$1 = (...args) => new Color(...args, 'hsv');\nchroma.hsv = hsv$1;\n\ninput.format.hsv = hsv2rgb;\n\ninput.autodetect.push({\n    p: 2,\n    test: (...args) => {\n        args = unpack(args, 'hsv');\n        if (type(args) === 'array' && args.length === 3) {\n            return 'hsv';\n        }\n    }\n});\n\nconst hsv = (col1, col2, f) => {\n    return interpolate_hsx(col1, col2, f, 'hsv');\n};\n\n// register interpolator\nindex.hsv = hsv;\n\n// from https://www.w3.org/TR/css-color-4/multiply-matrices.js\nfunction multiplyMatrices(A, B) {\n    let m = A.length;\n\n    if (!Array.isArray(A[0])) {\n        // A is vector, convert to [[a, b, c, ...]]\n        A = [A];\n    }\n\n    if (!Array.isArray(B[0])) {\n        // B is vector, convert to [[a], [b], [c], ...]]\n        B = B.map((x) => [x]);\n    }\n\n    let p = B[0].length;\n    let B_cols = B[0].map((_, i) => B.map((x) => x[i])); // transpose B\n    let product = A.map((row) =>\n        B_cols.map((col) => {\n            if (!Array.isArray(row)) {\n                return col.reduce((a, c) => a + c * row, 0);\n            }\n\n            return row.reduce((a, c, i) => a + c * (col[i] || 0), 0);\n        })\n    );\n\n    if (m === 1) {\n        product = product[0]; // Avoid [[a, b, c, ...]]\n    }\n\n    if (p === 1) {\n        return product.map((x) => x[0]); // Avoid [[a], [b], [c], ...]]\n    }\n\n    return product;\n}\n\nconst oklab2rgb = (...args) => {\n    args = unpack(args, 'lab');\n    const [L, a, b, ...rest] = args;\n    const [X, Y, Z] = OKLab_to_XYZ([L, a, b]);\n    const [r, g, b_] = xyz2rgb(X, Y, Z);\n    return [r, g, b_, ...(rest.length > 0 && rest[0] < 1 ? [rest[0]] : [])];\n};\n\n// from https://www.w3.org/TR/css-color-4/#color-conversion-code\nfunction OKLab_to_XYZ(OKLab) {\n    // Given OKLab, convert to XYZ relative to D65\n    var LMStoXYZ = [\n        [1.2268798758459243, -0.5578149944602171, 0.2813910456659647],\n        [-0.0405757452148008, 1.112286803280317, -0.0717110580655164],\n        [-0.0763729366746601, -0.4214933324022432, 1.5869240198367816]\n    ];\n    var OKLabtoLMS = [\n        [1.0, 0.3963377773761749, 0.2158037573099136],\n        [1.0, -0.1055613458156586, -0.0638541728258133],\n        [1.0, -0.0894841775298119, -1.2914855480194092]\n    ];\n\n    var LMSnl = multiplyMatrices(OKLabtoLMS, OKLab);\n    return multiplyMatrices(\n        LMStoXYZ,\n        LMSnl.map((c) => c ** 3)\n    );\n}\n\nconst rgb2oklab = (...args) => {\n    const [r, g, b, ...rest] = unpack(args, 'rgb');\n    const xyz = rgb2xyz(r, g, b);\n    const oklab = XYZ_to_OKLab(xyz);\n    return [...oklab, ...(rest.length > 0 && rest[0] < 1 ? [rest[0]] : [])];\n};\n\n// from https://www.w3.org/TR/css-color-4/#color-conversion-code\nfunction XYZ_to_OKLab(XYZ) {\n    // Given XYZ relative to D65, convert to OKLab\n    const XYZtoLMS = [\n        [0.819022437996703, 0.3619062600528904, -0.1288737815209879],\n        [0.0329836539323885, 0.9292868615863434, 0.0361446663506424],\n        [0.0481771893596242, 0.2642395317527308, 0.6335478284694309]\n    ];\n    const LMStoOKLab = [\n        [0.210454268309314, 0.7936177747023054, -0.0040720430116193],\n        [1.9779985324311684, -2.4285922420485799, 0.450593709617411],\n        [0.0259040424655478, 0.7827717124575296, -0.8086757549230774]\n    ];\n\n    const LMS = multiplyMatrices(XYZtoLMS, XYZ);\n    // JavaScript Math.cbrt returns a sign-matched cube root\n    // beware if porting to other languages\n    // especially if tempted to use a general power function\n    return multiplyMatrices(\n        LMStoOKLab,\n        LMS.map((c) => Math.cbrt(c))\n    );\n    // L in range [0,1]. For use in CSS, multiply by 100 and add a percent\n}\n\nColor.prototype.oklab = function () {\n    return rgb2oklab(this._rgb);\n};\n\nconst oklab$1 = (...args) => new Color(...args, 'oklab');\nObject.assign(chroma, { oklab: oklab$1 });\n\ninput.format.oklab = oklab2rgb;\n\ninput.autodetect.push({\n    p: 2,\n    test: (...args) => {\n        args = unpack(args, 'oklab');\n        if (type(args) === 'array' && args.length === 3) {\n            return 'oklab';\n        }\n    }\n});\n\nconst oklab = (col1, col2, f) => {\n    const xyz0 = col1.oklab();\n    const xyz1 = col2.oklab();\n    return new Color(\n        xyz0[0] + f * (xyz1[0] - xyz0[0]),\n        xyz0[1] + f * (xyz1[1] - xyz0[1]),\n        xyz0[2] + f * (xyz1[2] - xyz0[2]),\n        'oklab'\n    );\n};\n\n// register interpolator\nindex.oklab = oklab;\n\nconst oklch$1 = (col1, col2, f) => {\n    return interpolate_hsx(col1, col2, f, 'oklch');\n};\n\n// register interpolator\nindex.oklch = oklch$1;\n\nconst { pow: pow$4, sqrt: sqrt$1, PI: PI$1, cos: cos$2, sin: sin$2, atan2: atan2$1 } = Math;\n\nvar average = (colors, mode = 'lrgb', weights = null) => {\n    const l = colors.length;\n    if (!weights) weights = Array.from(new Array(l)).map(() => 1);\n    // normalize weights\n    const k =\n        l /\n        weights.reduce(function (a, b) {\n            return a + b;\n        });\n    weights.forEach((w, i) => {\n        weights[i] *= k;\n    });\n    // convert colors to Color objects\n    colors = colors.map((c) => new Color(c));\n    if (mode === 'lrgb') {\n        return _average_lrgb(colors, weights);\n    }\n    const first = colors.shift();\n    const xyz = first.get(mode);\n    const cnt = [];\n    let dx = 0;\n    let dy = 0;\n    // initial color\n    for (let i = 0; i < xyz.length; i++) {\n        xyz[i] = (xyz[i] || 0) * weights[0];\n        cnt.push(isNaN(xyz[i]) ? 0 : weights[0]);\n        if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {\n            const A = (xyz[i] / 180) * PI$1;\n            dx += cos$2(A) * weights[0];\n            dy += sin$2(A) * weights[0];\n        }\n    }\n\n    let alpha = first.alpha() * weights[0];\n    colors.forEach((c, ci) => {\n        const xyz2 = c.get(mode);\n        alpha += c.alpha() * weights[ci + 1];\n        for (let i = 0; i < xyz.length; i++) {\n            if (!isNaN(xyz2[i])) {\n                cnt[i] += weights[ci + 1];\n                if (mode.charAt(i) === 'h') {\n                    const A = (xyz2[i] / 180) * PI$1;\n                    dx += cos$2(A) * weights[ci + 1];\n                    dy += sin$2(A) * weights[ci + 1];\n                } else {\n                    xyz[i] += xyz2[i] * weights[ci + 1];\n                }\n            }\n        }\n    });\n\n    for (let i = 0; i < xyz.length; i++) {\n        if (mode.charAt(i) === 'h') {\n            let A = (atan2$1(dy / cnt[i], dx / cnt[i]) / PI$1) * 180;\n            while (A < 0) A += 360;\n            while (A >= 360) A -= 360;\n            xyz[i] = A;\n        } else {\n            xyz[i] = xyz[i] / cnt[i];\n        }\n    }\n    alpha /= l;\n    return new Color(xyz, mode).alpha(alpha > 0.99999 ? 1 : alpha, true);\n};\n\nconst _average_lrgb = (colors, weights) => {\n    const l = colors.length;\n    const xyz = [0, 0, 0, 0];\n    for (let i = 0; i < colors.length; i++) {\n        const col = colors[i];\n        const f = weights[i] / l;\n        const rgb = col._rgb;\n        xyz[0] += pow$4(rgb[0], 2) * f;\n        xyz[1] += pow$4(rgb[1], 2) * f;\n        xyz[2] += pow$4(rgb[2], 2) * f;\n        xyz[3] += rgb[3] * f;\n    }\n    xyz[0] = sqrt$1(xyz[0]);\n    xyz[1] = sqrt$1(xyz[1]);\n    xyz[2] = sqrt$1(xyz[2]);\n    if (xyz[3] > 0.9999999) xyz[3] = 1;\n    return new Color(clip_rgb(xyz));\n};\n\n// minimal multi-purpose interface\n\n\nconst { pow: pow$3 } = Math;\n\nfunction scale (colors) {\n    // constructor\n    let _mode = 'rgb';\n    let _nacol = chroma('#ccc');\n    let _spread = 0;\n    // const _fixed = false;\n    let _domain = [0, 1];\n    let _pos = [];\n    let _padding = [0, 0];\n    let _classes = false;\n    let _colors = [];\n    let _out = false;\n    let _min = 0;\n    let _max = 1;\n    let _correctLightness = false;\n    let _colorCache = {};\n    let _useCache = true;\n    let _gamma = 1;\n\n    // private methods\n\n    const setColors = function (colors) {\n        colors = colors || ['#fff', '#000'];\n        if (\n            colors &&\n            type(colors) === 'string' &&\n            chroma.brewer &&\n            chroma.brewer[colors.toLowerCase()]\n        ) {\n            colors = chroma.brewer[colors.toLowerCase()];\n        }\n        if (type(colors) === 'array') {\n            // handle single color\n            if (colors.length === 1) {\n                colors = [colors[0], colors[0]];\n            }\n            // make a copy of the colors\n            colors = colors.slice(0);\n            // convert to chroma classes\n            for (let c = 0; c < colors.length; c++) {\n                colors[c] = chroma(colors[c]);\n            }\n            // auto-fill color position\n            _pos.length = 0;\n            for (let c = 0; c < colors.length; c++) {\n                _pos.push(c / (colors.length - 1));\n            }\n        }\n        resetCache();\n        return (_colors = colors);\n    };\n\n    const getClass = function (value) {\n        if (_classes != null) {\n            const n = _classes.length - 1;\n            let i = 0;\n            while (i < n && value >= _classes[i]) {\n                i++;\n            }\n            return i - 1;\n        }\n        return 0;\n    };\n\n    let tMapLightness = (t) => t;\n    let tMapDomain = (t) => t;\n\n    // const classifyValue = function(value) {\n    //     let val = value;\n    //     if (_classes.length > 2) {\n    //         const n = _classes.length-1;\n    //         const i = getClass(value);\n    //         const minc = _classes[0] + ((_classes[1]-_classes[0]) * (0 + (_spread * 0.5)));  // center of 1st class\n    //         const maxc = _classes[n-1] + ((_classes[n]-_classes[n-1]) * (1 - (_spread * 0.5)));  // center of last class\n    //         val = _min + ((((_classes[i] + ((_classes[i+1] - _classes[i]) * 0.5)) - minc) / (maxc-minc)) * (_max - _min));\n    //     }\n    //     return val;\n    // };\n\n    const getColor = function (val, bypassMap) {\n        let col, t;\n        if (bypassMap == null) {\n            bypassMap = false;\n        }\n        if (isNaN(val) || val === null) {\n            return _nacol;\n        }\n        if (!bypassMap) {\n            if (_classes && _classes.length > 2) {\n                // find the class\n                const c = getClass(val);\n                t = c / (_classes.length - 2);\n            } else if (_max !== _min) {\n                // just interpolate between min/max\n                t = (val - _min) / (_max - _min);\n            } else {\n                t = 1;\n            }\n        } else {\n            t = val;\n        }\n\n        // domain map\n        t = tMapDomain(t);\n\n        if (!bypassMap) {\n            t = tMapLightness(t); // lightness correction\n        }\n\n        if (_gamma !== 1) {\n            t = pow$3(t, _gamma);\n        }\n\n        t = _padding[0] + t * (1 - _padding[0] - _padding[1]);\n\n        t = limit(t, 0, 1);\n\n        const k = Math.floor(t * 10000);\n\n        if (_useCache && _colorCache[k]) {\n            col = _colorCache[k];\n        } else {\n            if (type(_colors) === 'array') {\n                //for i in [0.._pos.length-1]\n                for (let i = 0; i < _pos.length; i++) {\n                    const p = _pos[i];\n                    if (t <= p) {\n                        col = _colors[i];\n                        break;\n                    }\n                    if (t >= p && i === _pos.length - 1) {\n                        col = _colors[i];\n                        break;\n                    }\n                    if (t > p && t < _pos[i + 1]) {\n                        t = (t - p) / (_pos[i + 1] - p);\n                        col = chroma.interpolate(\n                            _colors[i],\n                            _colors[i + 1],\n                            t,\n                            _mode\n                        );\n                        break;\n                    }\n                }\n            } else if (type(_colors) === 'function') {\n                col = _colors(t);\n            }\n            if (_useCache) {\n                _colorCache[k] = col;\n            }\n        }\n        return col;\n    };\n\n    var resetCache = () => (_colorCache = {});\n\n    setColors(colors);\n\n    // public interface\n\n    const f = function (v) {\n        const c = chroma(getColor(v));\n        if (_out && c[_out]) {\n            return c[_out]();\n        } else {\n            return c;\n        }\n    };\n\n    f.classes = function (classes) {\n        if (classes != null) {\n            if (type(classes) === 'array') {\n                _classes = classes;\n                _domain = [classes[0], classes[classes.length - 1]];\n            } else {\n                const d = chroma.analyze(_domain);\n                if (classes === 0) {\n                    _classes = [d.min, d.max];\n                } else {\n                    _classes = chroma.limits(d, 'e', classes);\n                }\n            }\n            return f;\n        }\n        return _classes;\n    };\n\n    f.domain = function (domain) {\n        if (!arguments.length) {\n            return _domain;\n        }\n        _min = domain[0];\n        _max = domain[domain.length - 1];\n        _pos = [];\n        const k = _colors.length;\n        if (domain.length === k && _min !== _max) {\n            // update positions\n            for (let d of Array.from(domain)) {\n                _pos.push((d - _min) / (_max - _min));\n            }\n        } else {\n            for (let c = 0; c < k; c++) {\n                _pos.push(c / (k - 1));\n            }\n            if (domain.length > 2) {\n                // set domain map\n                const tOut = domain.map((d, i) => i / (domain.length - 1));\n                const tBreaks = domain.map((d) => (d - _min) / (_max - _min));\n                if (!tBreaks.every((val, i) => tOut[i] === val)) {\n                    tMapDomain = (t) => {\n                        if (t <= 0 || t >= 1) return t;\n                        let i = 0;\n                        while (t >= tBreaks[i + 1]) i++;\n                        const f =\n                            (t - tBreaks[i]) / (tBreaks[i + 1] - tBreaks[i]);\n                        const out = tOut[i] + f * (tOut[i + 1] - tOut[i]);\n                        return out;\n                    };\n                }\n            }\n        }\n        _domain = [_min, _max];\n        return f;\n    };\n\n    f.mode = function (_m) {\n        if (!arguments.length) {\n            return _mode;\n        }\n        _mode = _m;\n        resetCache();\n        return f;\n    };\n\n    f.range = function (colors, _pos) {\n        setColors(colors);\n        return f;\n    };\n\n    f.out = function (_o) {\n        _out = _o;\n        return f;\n    };\n\n    f.spread = function (val) {\n        if (!arguments.length) {\n            return _spread;\n        }\n        _spread = val;\n        return f;\n    };\n\n    f.correctLightness = function (v) {\n        if (v == null) {\n            v = true;\n        }\n        _correctLightness = v;\n        resetCache();\n        if (_correctLightness) {\n            tMapLightness = function (t) {\n                const L0 = getColor(0, true).lab()[0];\n                const L1 = getColor(1, true).lab()[0];\n                const pol = L0 > L1;\n                let L_actual = getColor(t, true).lab()[0];\n                const L_ideal = L0 + (L1 - L0) * t;\n                let L_diff = L_actual - L_ideal;\n                let t0 = 0;\n                let t1 = 1;\n                let max_iter = 20;\n                while (Math.abs(L_diff) > 1e-2 && max_iter-- > 0) {\n                    (function () {\n                        if (pol) {\n                            L_diff *= -1;\n                        }\n                        if (L_diff < 0) {\n                            t0 = t;\n                            t += (t1 - t) * 0.5;\n                        } else {\n                            t1 = t;\n                            t += (t0 - t) * 0.5;\n                        }\n                        L_actual = getColor(t, true).lab()[0];\n                        return (L_diff = L_actual - L_ideal);\n                    })();\n                }\n                return t;\n            };\n        } else {\n            tMapLightness = (t) => t;\n        }\n        return f;\n    };\n\n    f.padding = function (p) {\n        if (p != null) {\n            if (type(p) === 'number') {\n                p = [p, p];\n            }\n            _padding = p;\n            return f;\n        } else {\n            return _padding;\n        }\n    };\n\n    f.colors = function (numColors, out) {\n        // If no arguments are given, return the original colors that were provided\n        if (arguments.length < 2) {\n            out = 'hex';\n        }\n        let result = [];\n\n        if (arguments.length === 0) {\n            result = _colors.slice(0);\n        } else if (numColors === 1) {\n            result = [f(0.5)];\n        } else if (numColors > 1) {\n            const dm = _domain[0];\n            const dd = _domain[1] - dm;\n            result = __range__(0, numColors).map((i) =>\n                f(dm + (i / (numColors - 1)) * dd)\n            );\n        } else {\n            // returns all colors based on the defined classes\n            colors = [];\n            let samples = [];\n            if (_classes && _classes.length > 2) {\n                for (\n                    let i = 1, end = _classes.length, asc = 1 <= end;\n                    asc ? i < end : i > end;\n                    asc ? i++ : i--\n                ) {\n                    samples.push((_classes[i - 1] + _classes[i]) * 0.5);\n                }\n            } else {\n                samples = _domain;\n            }\n            result = samples.map((v) => f(v));\n        }\n\n        if (chroma[out]) {\n            result = result.map((c) => c[out]());\n        }\n        return result;\n    };\n\n    f.cache = function (c) {\n        if (c != null) {\n            _useCache = c;\n            return f;\n        } else {\n            return _useCache;\n        }\n    };\n\n    f.gamma = function (g) {\n        if (g != null) {\n            _gamma = g;\n            return f;\n        } else {\n            return _gamma;\n        }\n    };\n\n    f.nodata = function (d) {\n        if (d != null) {\n            _nacol = chroma(d);\n            return f;\n        } else {\n            return _nacol;\n        }\n    };\n\n    return f;\n}\n\nfunction __range__(left, right, inclusive) {\n    let range = [];\n    let ascending = left < right;\n    let end = right ;\n    for (let i = left; ascending ? i < end : i > end; ascending ? i++ : i--) {\n        range.push(i);\n    }\n    return range;\n}\n\n//\n// interpolates between a set of colors uzing a bezier spline\n//\n\n\n// nth row of the pascal triangle\nconst binom_row = function (n) {\n    let row = [1, 1];\n    for (let i = 1; i < n; i++) {\n        let newrow = [1];\n        for (let j = 1; j <= row.length; j++) {\n            newrow[j] = (row[j] || 0) + row[j - 1];\n        }\n        row = newrow;\n    }\n    return row;\n};\n\nconst bezier = function (colors) {\n    let I, lab0, lab1, lab2;\n    colors = colors.map((c) => new Color(c));\n    if (colors.length === 2) {\n        // linear interpolation\n        [lab0, lab1] = colors.map((c) => c.lab());\n        I = function (t) {\n            const lab = [0, 1, 2].map((i) => lab0[i] + t * (lab1[i] - lab0[i]));\n            return new Color(lab, 'lab');\n        };\n    } else if (colors.length === 3) {\n        // quadratic bezier interpolation\n        [lab0, lab1, lab2] = colors.map((c) => c.lab());\n        I = function (t) {\n            const lab = [0, 1, 2].map(\n                (i) =>\n                    (1 - t) * (1 - t) * lab0[i] +\n                    2 * (1 - t) * t * lab1[i] +\n                    t * t * lab2[i]\n            );\n            return new Color(lab, 'lab');\n        };\n    } else if (colors.length === 4) {\n        // cubic bezier interpolation\n        let lab3;\n        [lab0, lab1, lab2, lab3] = colors.map((c) => c.lab());\n        I = function (t) {\n            const lab = [0, 1, 2].map(\n                (i) =>\n                    (1 - t) * (1 - t) * (1 - t) * lab0[i] +\n                    3 * (1 - t) * (1 - t) * t * lab1[i] +\n                    3 * (1 - t) * t * t * lab2[i] +\n                    t * t * t * lab3[i]\n            );\n            return new Color(lab, 'lab');\n        };\n    } else if (colors.length >= 5) {\n        // general case (degree n bezier)\n        let labs, row, n;\n        labs = colors.map((c) => c.lab());\n        n = colors.length - 1;\n        row = binom_row(n);\n        I = function (t) {\n            const u = 1 - t;\n            const lab = [0, 1, 2].map((i) =>\n                labs.reduce(\n                    (sum, el, j) =>\n                        sum + row[j] * u ** (n - j) * t ** j * el[i],\n                    0\n                )\n            );\n            return new Color(lab, 'lab');\n        };\n    } else {\n        throw new RangeError('No point in running bezier with only one color.');\n    }\n    return I;\n};\n\nvar bezier$1 = (colors) => {\n    const f = bezier(colors);\n    f.scale = () => scale(f);\n    return f;\n};\n\nconst { round: round$3 } = Math;\n\nColor.prototype.rgb = function (rnd = true) {\n    if (rnd === false) return this._rgb.slice(0, 3);\n    return this._rgb.slice(0, 3).map(round$3);\n};\n\nColor.prototype.rgba = function (rnd = true) {\n    return this._rgb.slice(0, 4).map((v, i) => {\n        return i < 3 ? (rnd === false ? v : round$3(v)) : v;\n    });\n};\n\nconst rgb = (...args) => new Color(...args, 'rgb');\nObject.assign(chroma, { rgb });\n\ninput.format.rgb = (...args) => {\n    const rgba = unpack(args, 'rgba');\n    if (rgba[3] === undefined) rgba[3] = 1;\n    return rgba;\n};\n\ninput.autodetect.push({\n    p: 3,\n    test: (...args) => {\n        args = unpack(args, 'rgba');\n        if (\n            type(args) === 'array' &&\n            (args.length === 3 ||\n                (args.length === 4 &&\n                    type(args[3]) == 'number' &&\n                    args[3] >= 0 &&\n                    args[3] <= 1))\n        ) {\n            return 'rgb';\n        }\n    }\n});\n\n/*\n * interpolates between a set of colors uzing a bezier spline\n * blend mode formulas taken from https://web.archive.org/web/20180110014946/http://www.venture-ware.com/kevin/coding/lets-learn-math-photoshop-blend-modes/\n */\n\n\nconst blend = (bottom, top, mode) => {\n    if (!blend[mode]) {\n        throw new Error('unknown blend mode ' + mode);\n    }\n    return blend[mode](bottom, top);\n};\n\nconst blend_f = (f) => (bottom, top) => {\n    const c0 = chroma(top).rgb();\n    const c1 = chroma(bottom).rgb();\n    return chroma.rgb(f(c0, c1));\n};\n\nconst each = (f) => (c0, c1) => {\n    const out = [];\n    out[0] = f(c0[0], c1[0]);\n    out[1] = f(c0[1], c1[1]);\n    out[2] = f(c0[2], c1[2]);\n    return out;\n};\n\nconst normal = (a) => a;\nconst multiply = (a, b) => (a * b) / 255;\nconst darken = (a, b) => (a > b ? b : a);\nconst lighten = (a, b) => (a > b ? a : b);\nconst screen = (a, b) => 255 * (1 - (1 - a / 255) * (1 - b / 255));\nconst overlay = (a, b) =>\n    b < 128 ? (2 * a * b) / 255 : 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));\nconst burn = (a, b) => 255 * (1 - (1 - b / 255) / (a / 255));\nconst dodge = (a, b) => {\n    if (a === 255) return 255;\n    a = (255 * (b / 255)) / (1 - a / 255);\n    return a > 255 ? 255 : a;\n};\n\n// # add = (a,b) ->\n// #     if (a + b > 255) then 255 else a + b\n\nblend.normal = blend_f(each(normal));\nblend.multiply = blend_f(each(multiply));\nblend.screen = blend_f(each(screen));\nblend.overlay = blend_f(each(overlay));\nblend.darken = blend_f(each(darken));\nblend.lighten = blend_f(each(lighten));\nblend.dodge = blend_f(each(dodge));\nblend.burn = blend_f(each(burn));\n\n// cubehelix interpolation\n// based on D.A. Green \"A colour scheme for the display of astronomical intensity images\"\n// http://astron-soc.in/bulletin/11June/289392011.pdf\nconst { pow: pow$2, sin: sin$1, cos: cos$1 } = Math;\n\nfunction cubehelix (\n    start = 300,\n    rotations = -1.5,\n    hue = 1,\n    gamma = 1,\n    lightness = [0, 1]\n) {\n    let dh = 0,\n        dl;\n    if (type(lightness) === 'array') {\n        dl = lightness[1] - lightness[0];\n    } else {\n        dl = 0;\n        lightness = [lightness, lightness];\n    }\n    const f = function (fract) {\n        const a = TWOPI * ((start + 120) / 360 + rotations * fract);\n        const l = pow$2(lightness[0] + dl * fract, gamma);\n        const h = dh !== 0 ? hue[0] + fract * dh : hue;\n        const amp = (h * l * (1 - l)) / 2;\n        const cos_a = cos$1(a);\n        const sin_a = sin$1(a);\n        const r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);\n        const g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);\n        const b = l + amp * (+1.97294 * cos_a);\n        return chroma(clip_rgb([r * 255, g * 255, b * 255, 1]));\n    };\n    f.start = function (s) {\n        if (s == null) {\n            return start;\n        }\n        start = s;\n        return f;\n    };\n    f.rotations = function (r) {\n        if (r == null) {\n            return rotations;\n        }\n        rotations = r;\n        return f;\n    };\n    f.gamma = function (g) {\n        if (g == null) {\n            return gamma;\n        }\n        gamma = g;\n        return f;\n    };\n    f.hue = function (h) {\n        if (h == null) {\n            return hue;\n        }\n        hue = h;\n        if (type(hue) === 'array') {\n            dh = hue[1] - hue[0];\n            if (dh === 0) {\n                hue = hue[1];\n            }\n        } else {\n            dh = 0;\n        }\n        return f;\n    };\n    f.lightness = function (h) {\n        if (h == null) {\n            return lightness;\n        }\n        if (type(h) === 'array') {\n            lightness = h;\n            dl = h[1] - h[0];\n        } else {\n            lightness = [h, h];\n            dl = 0;\n        }\n        return f;\n    };\n    f.scale = () => chroma.scale(f);\n    f.hue(hue);\n    return f;\n}\n\nconst digits = '0123456789abcdef';\n\nconst { floor: floor$1, random } = Math;\n\nvar random$1 = () => {\n    let code = '#';\n    for (let i = 0; i < 6; i++) {\n        code += digits.charAt(floor$1(random() * 16));\n    }\n    return new Color(code, 'hex');\n};\n\nconst { log: log$1, pow: pow$1, floor, abs: abs$1 } = Math;\n\nfunction analyze(data, key = null) {\n    const r = {\n        min: Number.MAX_VALUE,\n        max: Number.MAX_VALUE * -1,\n        sum: 0,\n        values: [],\n        count: 0\n    };\n    if (type(data) === 'object') {\n        data = Object.values(data);\n    }\n    data.forEach((val) => {\n        if (key && type(val) === 'object') val = val[key];\n        if (val !== undefined && val !== null && !isNaN(val)) {\n            r.values.push(val);\n            r.sum += val;\n            if (val < r.min) r.min = val;\n            if (val > r.max) r.max = val;\n            r.count += 1;\n        }\n    });\n\n    r.domain = [r.min, r.max];\n\n    r.limits = (mode, num) => limits(r, mode, num);\n\n    return r;\n}\n\nfunction limits(data, mode = 'equal', num = 7) {\n    if (type(data) == 'array') {\n        data = analyze(data);\n    }\n    const { min, max } = data;\n    const values = data.values.sort((a, b) => a - b);\n\n    if (num === 1) {\n        return [min, max];\n    }\n\n    const limits = [];\n\n    if (mode.substr(0, 1) === 'c') {\n        // continuous\n        limits.push(min);\n        limits.push(max);\n    }\n\n    if (mode.substr(0, 1) === 'e') {\n        // equal interval\n        limits.push(min);\n        for (let i = 1; i < num; i++) {\n            limits.push(min + (i / num) * (max - min));\n        }\n        limits.push(max);\n    } else if (mode.substr(0, 1) === 'l') {\n        // log scale\n        if (min <= 0) {\n            throw new Error(\n                'Logarithmic scales are only possible for values > 0'\n            );\n        }\n        const min_log = Math.LOG10E * log$1(min);\n        const max_log = Math.LOG10E * log$1(max);\n        limits.push(min);\n        for (let i = 1; i < num; i++) {\n            limits.push(pow$1(10, min_log + (i / num) * (max_log - min_log)));\n        }\n        limits.push(max);\n    } else if (mode.substr(0, 1) === 'q') {\n        // quantile scale\n        limits.push(min);\n        for (let i = 1; i < num; i++) {\n            const p = ((values.length - 1) * i) / num;\n            const pb = floor(p);\n            if (pb === p) {\n                limits.push(values[pb]);\n            } else {\n                // p > pb\n                const pr = p - pb;\n                limits.push(values[pb] * (1 - pr) + values[pb + 1] * pr);\n            }\n        }\n        limits.push(max);\n    } else if (mode.substr(0, 1) === 'k') {\n        // k-means clustering\n        /*\n        implementation based on\n        http://code.google.com/p/figue/source/browse/trunk/figue.js#336\n        simplified for 1-d input values\n        */\n        let cluster;\n        const n = values.length;\n        const assignments = new Array(n);\n        const clusterSizes = new Array(num);\n        let repeat = true;\n        let nb_iters = 0;\n        let centroids = null;\n\n        // get seed values\n        centroids = [];\n        centroids.push(min);\n        for (let i = 1; i < num; i++) {\n            centroids.push(min + (i / num) * (max - min));\n        }\n        centroids.push(max);\n\n        while (repeat) {\n            // assignment step\n            for (let j = 0; j < num; j++) {\n                clusterSizes[j] = 0;\n            }\n            for (let i = 0; i < n; i++) {\n                const value = values[i];\n                let mindist = Number.MAX_VALUE;\n                let best;\n                for (let j = 0; j < num; j++) {\n                    const dist = abs$1(centroids[j] - value);\n                    if (dist < mindist) {\n                        mindist = dist;\n                        best = j;\n                    }\n                    clusterSizes[best]++;\n                    assignments[i] = best;\n                }\n            }\n\n            // update centroids step\n            const newCentroids = new Array(num);\n            for (let j = 0; j < num; j++) {\n                newCentroids[j] = null;\n            }\n            for (let i = 0; i < n; i++) {\n                cluster = assignments[i];\n                if (newCentroids[cluster] === null) {\n                    newCentroids[cluster] = values[i];\n                } else {\n                    newCentroids[cluster] += values[i];\n                }\n            }\n            for (let j = 0; j < num; j++) {\n                newCentroids[j] *= 1 / clusterSizes[j];\n            }\n\n            // check convergence\n            repeat = false;\n            for (let j = 0; j < num; j++) {\n                if (newCentroids[j] !== centroids[j]) {\n                    repeat = true;\n                    break;\n                }\n            }\n\n            centroids = newCentroids;\n            nb_iters++;\n\n            if (nb_iters > 200) {\n                repeat = false;\n            }\n        }\n\n        // finished k-means clustering\n        // the next part is borrowed from gabrielflor.it\n        const kClusters = {};\n        for (let j = 0; j < num; j++) {\n            kClusters[j] = [];\n        }\n        for (let i = 0; i < n; i++) {\n            cluster = assignments[i];\n            kClusters[cluster].push(values[i]);\n        }\n        let tmpKMeansBreaks = [];\n        for (let j = 0; j < num; j++) {\n            tmpKMeansBreaks.push(kClusters[j][0]);\n            tmpKMeansBreaks.push(kClusters[j][kClusters[j].length - 1]);\n        }\n        tmpKMeansBreaks = tmpKMeansBreaks.sort((a, b) => a - b);\n        limits.push(tmpKMeansBreaks[0]);\n        for (let i = 1; i < tmpKMeansBreaks.length; i += 2) {\n            const v = tmpKMeansBreaks[i];\n            if (!isNaN(v) && limits.indexOf(v) === -1) {\n                limits.push(v);\n            }\n        }\n    }\n    return limits;\n}\n\nvar contrast = (a, b) => {\n    // WCAG contrast ratio\n    // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n    a = new Color(a);\n    b = new Color(b);\n    const l1 = a.luminance();\n    const l2 = b.luminance();\n    return l1 > l2 ? (l1 + 0.05) / (l2 + 0.05) : (l2 + 0.05) / (l1 + 0.05);\n};\n\nconst { sqrt, pow, min, max: max$1, atan2, abs, cos, sin, exp, PI } = Math;\n\nfunction deltaE (a, b, Kl = 1, Kc = 1, Kh = 1) {\n    // Delta E (CIE 2000)\n    // see http://www.brucelindbloom.com/index.html?Eqn_DeltaE_CIE2000.html\n    var rad2deg = function (rad) {\n        return (360 * rad) / (2 * PI);\n    };\n    var deg2rad = function (deg) {\n        return (2 * PI * deg) / 360;\n    };\n    a = new Color(a);\n    b = new Color(b);\n    const [L1, a1, b1] = Array.from(a.lab());\n    const [L2, a2, b2] = Array.from(b.lab());\n    const avgL = (L1 + L2) / 2;\n    const C1 = sqrt(pow(a1, 2) + pow(b1, 2));\n    const C2 = sqrt(pow(a2, 2) + pow(b2, 2));\n    const avgC = (C1 + C2) / 2;\n    const G = 0.5 * (1 - sqrt(pow(avgC, 7) / (pow(avgC, 7) + pow(25, 7))));\n    const a1p = a1 * (1 + G);\n    const a2p = a2 * (1 + G);\n    const C1p = sqrt(pow(a1p, 2) + pow(b1, 2));\n    const C2p = sqrt(pow(a2p, 2) + pow(b2, 2));\n    const avgCp = (C1p + C2p) / 2;\n    const arctan1 = rad2deg(atan2(b1, a1p));\n    const arctan2 = rad2deg(atan2(b2, a2p));\n    const h1p = arctan1 >= 0 ? arctan1 : arctan1 + 360;\n    const h2p = arctan2 >= 0 ? arctan2 : arctan2 + 360;\n    const avgHp =\n        abs(h1p - h2p) > 180 ? (h1p + h2p + 360) / 2 : (h1p + h2p) / 2;\n    const T =\n        1 -\n        0.17 * cos(deg2rad(avgHp - 30)) +\n        0.24 * cos(deg2rad(2 * avgHp)) +\n        0.32 * cos(deg2rad(3 * avgHp + 6)) -\n        0.2 * cos(deg2rad(4 * avgHp - 63));\n    let deltaHp = h2p - h1p;\n    deltaHp =\n        abs(deltaHp) <= 180\n            ? deltaHp\n            : h2p <= h1p\n              ? deltaHp + 360\n              : deltaHp - 360;\n    deltaHp = 2 * sqrt(C1p * C2p) * sin(deg2rad(deltaHp) / 2);\n    const deltaL = L2 - L1;\n    const deltaCp = C2p - C1p;\n    const sl = 1 + (0.015 * pow(avgL - 50, 2)) / sqrt(20 + pow(avgL - 50, 2));\n    const sc = 1 + 0.045 * avgCp;\n    const sh = 1 + 0.015 * avgCp * T;\n    const deltaTheta = 30 * exp(-pow((avgHp - 275) / 25, 2));\n    const Rc = 2 * sqrt(pow(avgCp, 7) / (pow(avgCp, 7) + pow(25, 7)));\n    const Rt = -Rc * sin(2 * deg2rad(deltaTheta));\n    const result = sqrt(\n        pow(deltaL / (Kl * sl), 2) +\n            pow(deltaCp / (Kc * sc), 2) +\n            pow(deltaHp / (Kh * sh), 2) +\n            Rt * (deltaCp / (Kc * sc)) * (deltaHp / (Kh * sh))\n    );\n    return max$1(0, min(100, result));\n}\n\n// simple Euclidean distance\nfunction distance (a, b, mode = 'lab') {\n    // Delta E (CIE 1976)\n    // see http://www.brucelindbloom.com/index.html?Equations.html\n    a = new Color(a);\n    b = new Color(b);\n    const l1 = a.get(mode);\n    const l2 = b.get(mode);\n    let sum_sq = 0;\n    for (let i in l1) {\n        const d = (l1[i] || 0) - (l2[i] || 0);\n        sum_sq += d * d;\n    }\n    return Math.sqrt(sum_sq);\n}\n\nvar valid = (...args) => {\n    try {\n        new Color(...args);\n        return true;\n        // eslint-disable-next-line\n    } catch (e) {\n        return false;\n    }\n};\n\n// some pre-defined color scales:\n\nvar scales = {\n    cool() {\n        return scale([chroma.hsl(180, 1, 0.9), chroma.hsl(250, 0.7, 0.4)]);\n    },\n    hot() {\n        return scale(['#000', '#f00', '#ff0', '#fff']).mode(\n            'rgb'\n        );\n    }\n};\n\n/**\n    ColorBrewer colors for chroma.js\n\n    Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The\n    Pennsylvania State University.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software distributed\n    under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n    CONDITIONS OF ANY KIND, either express or implied. See the License for the\n    specific language governing permissions and limitations under the License.\n*/\n\nconst colorbrewer = {\n    // sequential\n    OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],\n    PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],\n    BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],\n    Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],\n    BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],\n    YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],\n    YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],\n    Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],\n    RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],\n    Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],\n    YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],\n    Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],\n    GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],\n    Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],\n    YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],\n    PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],\n    Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],\n    PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],\n    Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],\n\n    // diverging\n    Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],\n    RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],\n    RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],\n    PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],\n    PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],\n    RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],\n    BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],\n    RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],\n    PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],\n\n    // qualitative\n    Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],\n    Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],\n    Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],\n    Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],\n    Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],\n    Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],\n    Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],\n    Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2']\n};\n\n// add lowercase aliases for case-insensitive matches\nfor (let key of Object.keys(colorbrewer)) {\n    colorbrewer[key.toLowerCase()] = colorbrewer[key];\n}\n\nconst cmyk2rgb = (...args) => {\n    args = unpack(args, 'cmyk');\n    const [c, m, y, k] = args;\n    const alpha = args.length > 4 ? args[4] : 1;\n    if (k === 1) return [0, 0, 0, alpha];\n    return [\n        c >= 1 ? 0 : 255 * (1 - c) * (1 - k), // r\n        m >= 1 ? 0 : 255 * (1 - m) * (1 - k), // g\n        y >= 1 ? 0 : 255 * (1 - y) * (1 - k), // b\n        alpha\n    ];\n};\n\nconst { max } = Math;\n\nconst rgb2cmyk = (...args) => {\n    let [r, g, b] = unpack(args, 'rgb');\n    r = r / 255;\n    g = g / 255;\n    b = b / 255;\n    const k = 1 - max(r, max(g, b));\n    const f = k < 1 ? 1 / (1 - k) : 0;\n    const c = (1 - r - k) * f;\n    const m = (1 - g - k) * f;\n    const y = (1 - b - k) * f;\n    return [c, m, y, k];\n};\n\nColor.prototype.cmyk = function () {\n    return rgb2cmyk(this._rgb);\n};\n\nconst cmyk = (...args) => new Color(...args, 'cmyk');\nObject.assign(chroma, { cmyk });\n\ninput.format.cmyk = cmyk2rgb;\n\ninput.autodetect.push({\n    p: 2,\n    test: (...args) => {\n        args = unpack(args, 'cmyk');\n        if (type(args) === 'array' && args.length === 4) {\n            return 'cmyk';\n        }\n    }\n});\n\n/*\n * supported arguments:\n * - hsl2css(h,s,l)\n * - hsl2css(h,s,l,a)\n * - hsl2css([h,s,l], mode)\n * - hsl2css([h,s,l,a], mode)\n * - hsl2css({h,s,l,a}, mode)\n */\nconst hsl2css = (...args) => {\n    const hsla = unpack(args, 'hsla');\n    let mode = last(args) || 'lsa';\n    hsla[0] = rnd2(hsla[0] || 0) + 'deg';\n    hsla[1] = rnd2(hsla[1] * 100) + '%';\n    hsla[2] = rnd2(hsla[2] * 100) + '%';\n    if (mode === 'hsla' || (hsla.length > 3 && hsla[3] < 1)) {\n        hsla[3] = '/ ' + (hsla.length > 3 ? hsla[3] : 1);\n        mode = 'hsla';\n    } else {\n        hsla.length = 3;\n    }\n    return `${mode.substr(0, 3)}(${hsla.join(' ')})`;\n};\n\n/*\n * supported arguments:\n * - lab2css(l,a,b)\n * - lab2css(l,a,b,alpha)\n * - lab2css([l,a,b], mode)\n * - lab2css([l,a,b,alpha], mode)\n */\nconst lab2css = (...args) => {\n    const laba = unpack(args, 'lab');\n    let mode = last(args) || 'lab';\n    laba[0] = rnd2(laba[0]) + '%';\n    laba[1] = rnd2(laba[1]);\n    laba[2] = rnd2(laba[2]);\n    if (mode === 'laba' || (laba.length > 3 && laba[3] < 1)) {\n        laba[3] = '/ ' + (laba.length > 3 ? laba[3] : 1);\n    } else {\n        laba.length = 3;\n    }\n    return `lab(${laba.join(' ')})`;\n};\n\n/*\n * supported arguments:\n * - lab2css(l,a,b)\n * - lab2css(l,a,b,alpha)\n * - lab2css([l,a,b], mode)\n * - lab2css([l,a,b,alpha], mode)\n */\nconst lch2css = (...args) => {\n    const lcha = unpack(args, 'lch');\n    let mode = last(args) || 'lab';\n    lcha[0] = rnd2(lcha[0]) + '%';\n    lcha[1] = rnd2(lcha[1]);\n    lcha[2] = rnd2(lcha[2]) + 'deg'; // add deg unit to hue\n    if (mode === 'lcha' || (lcha.length > 3 && lcha[3] < 1)) {\n        lcha[3] = '/ ' + (lcha.length > 3 ? lcha[3] : 1);\n    } else {\n        lcha.length = 3;\n    }\n    return `lch(${lcha.join(' ')})`;\n};\n\nconst oklab2css$1 = (...args) => {\n    const laba = unpack(args, 'lab');\n    laba[0] = rnd2(laba[0] * 100) + '%';\n    laba[1] = rnd3(laba[1]);\n    laba[2] = rnd3(laba[2]);\n    if (laba.length > 3 && laba[3] < 1) {\n        laba[3] = '/ ' + (laba.length > 3 ? laba[3] : 1);\n    } else {\n        laba.length = 3;\n    }\n    return `oklab(${laba.join(' ')})`;\n};\n\nconst rgb2oklch = (...args) => {\n    const [r, g, b, ...rest] = unpack(args, 'rgb');\n    const [l, a, b_] = rgb2oklab(r, g, b);\n    const [L, c, h] = lab2lch(l, a, b_);\n    return [L, c, h, ...(rest.length > 0 && rest[0] < 1 ? [rest[0]] : [])];\n};\n\nconst oklab2css = (...args) => {\n    const laba = unpack(args, 'lab');\n    laba[0] = rnd2(laba[0] * 100) + '%';\n    laba[1] = rnd3(laba[1]);\n    laba[2] = rnd2(laba[2]) + 'deg';\n    if (laba.length > 3 && laba[3] < 1) {\n        laba[3] = '/ ' + (laba.length > 3 ? laba[3] : 1);\n    } else {\n        laba.length = 3;\n    }\n    return `oklch(${laba.join(' ')})`;\n};\n\nconst { round: round$2 } = Math;\n\n/*\n * supported arguments:\n * - rgb2css(r,g,b)\n * - rgb2css(r,g,b,a)\n * - rgb2css([r,g,b], mode)\n * - rgb2css([r,g,b,a], mode)\n * - rgb2css({r,g,b,a}, mode)\n */\nconst rgb2css = (...args) => {\n    const rgba = unpack(args, 'rgba');\n    let mode = last(args) || 'rgb';\n    if (mode.substr(0, 3) === 'hsl') {\n        return hsl2css(rgb2hsl$1(rgba), mode);\n    }\n    if (mode.substr(0, 3) === 'lab') {\n        // change to D50 lab whitepoint since this is what W3C is using for CSS Lab colors\n        const prevWhitePoint = getLabWhitePoint();\n        setLabWhitePoint('d50');\n        const cssColor = lab2css(rgb2lab(rgba), mode);\n        setLabWhitePoint(prevWhitePoint);\n        return cssColor;\n    }\n    if (mode.substr(0, 3) === 'lch') {\n        // change to D50 lab whitepoint since this is what W3C is using for CSS Lab colors\n        const prevWhitePoint = getLabWhitePoint();\n        setLabWhitePoint('d50');\n        const cssColor = lch2css(rgb2lch(rgba), mode);\n        setLabWhitePoint(prevWhitePoint);\n        return cssColor;\n    }\n    if (mode.substr(0, 5) === 'oklab') {\n        return oklab2css$1(rgb2oklab(rgba));\n    }\n    if (mode.substr(0, 5) === 'oklch') {\n        return oklab2css(rgb2oklch(rgba));\n    }\n    rgba[0] = round$2(rgba[0]);\n    rgba[1] = round$2(rgba[1]);\n    rgba[2] = round$2(rgba[2]);\n    if (mode === 'rgba' || (rgba.length > 3 && rgba[3] < 1)) {\n        rgba[3] = '/ ' + (rgba.length > 3 ? rgba[3] : 1);\n        mode = 'rgba';\n    }\n    return `${mode.substr(0, 3)}(${rgba.slice(0, mode === 'rgb' ? 3 : 4).join(' ')})`;\n};\n\nconst oklch2rgb = (...args) => {\n    args = unpack(args, 'lch');\n    const [l, c, h, ...rest] = args;\n    const [L, a, b_] = lch2lab(l, c, h);\n    const [r, g, b] = oklab2rgb(L, a, b_);\n    return [r, g, b, ...(rest.length > 0 && rest[0] < 1 ? [rest[0]] : [])];\n};\n\nconst RE_RGB = /^rgb\\(\\s*(-?\\d+) \\s*(-?\\d+)\\s* \\s*(-?\\d+)\\s*\\)$/;\nconst RE_RGB_LEGACY = /^rgb\\(\\s*(-?\\d+),\\s*(-?\\d+)\\s*,\\s*(-?\\d+)\\s*\\)$/;\n\nconst RE_RGBA =\n    /^rgba?\\(\\s*(-?\\d+) \\s*(-?\\d+)\\s* \\s*(-?\\d+)\\s*\\/\\s*([01]|[01]?\\.\\d+)\\)$/;\nconst RE_RGBA_LEGACY =\n    /^rgba\\(\\s*(-?\\d+),\\s*(-?\\d+)\\s*,\\s*(-?\\d+)\\s*,\\s*([01]|[01]?\\.\\d+)\\)$/;\n\nconst RE_RGB_PCT =\n    /^rgb\\(\\s*(-?\\d+(?:\\.\\d+)?)% \\s*(-?\\d+(?:\\.\\d+)?)%\\s* \\s*(-?\\d+(?:\\.\\d+)?)%\\s*\\)$/;\nconst RE_RGB_PCT_LEGACY =\n    /^rgb\\(\\s*(-?\\d+(?:\\.\\d+)?)%,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*\\)$/;\n\nconst RE_RGBA_PCT =\n    /^rgba?\\(\\s*(-?\\d+(?:\\.\\d+)?)% \\s*(-?\\d+(?:\\.\\d+)?)%\\s* \\s*(-?\\d+(?:\\.\\d+)?)%\\s*\\/\\s*([01]|[01]?\\.\\d+)\\)$/;\nconst RE_RGBA_PCT_LEGACY =\n    /^rgba\\(\\s*(-?\\d+(?:\\.\\d+)?)%,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)$/;\n\nconst RE_HSL =\n    /^hsl\\(\\s*(-?\\d+(?:\\.\\d+)?)deg \\s*(-?\\d+(?:\\.\\d+)?)%\\s* \\s*(-?\\d+(?:\\.\\d+)?)%\\s*\\)$/;\nconst RE_HSL_LEGACY =\n    /^hsl\\(\\s*(-?\\d+(?:\\.\\d+)?),\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*\\)$/;\n\nconst RE_HSLA =\n    /^hsla?\\(\\s*(-?\\d+(?:\\.\\d+)?)deg \\s*(-?\\d+(?:\\.\\d+)?)%\\s* \\s*(-?\\d+(?:\\.\\d+)?)%\\s*\\/\\s*([01]|[01]?\\.\\d+)\\)$/;\nconst RE_HSLA_LEGACY =\n    /^hsla\\(\\s*(-?\\d+(?:\\.\\d+)?),\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)$/;\n\nconst RE_LAB =\n    /^lab\\(\\s*(-?\\d+(?:\\.\\d+)?%?) \\s*(-?\\d+(?:\\.\\d+)?%?) \\s*(-?\\d+(?:\\.\\d+)?%?)\\s*(?:\\/\\s*(\\d+(?:\\.\\d+)?))?\\)?$/;\nconst RE_LCH =\n    /^lch\\(\\s*(-?\\d+(?:\\.\\d+)?%?) \\s*((?:-?\\d+(?:\\.\\d+)?%?)|none) \\s*(-?\\d+(?:\\.\\d+)?(?:deg)?|none)\\s*(?:\\/\\s*(\\d+(?:\\.\\d+)?))?\\)?$/;\nconst RE_OKLAB =\n    /^oklab\\(\\s*(-?\\d+(?:\\.\\d+)?%?) \\s*(-?\\d+(?:\\.\\d+)?%?) \\s*(-?\\d+(?:\\.\\d+)?%?)\\s*(?:\\/\\s*(\\d+(?:\\.\\d+)?))?\\)?$/;\nconst RE_OKLCH =\n    /^oklch\\(\\s*(-?\\d+(?:\\.\\d+)?%?) \\s*(?:(-?\\d+(?:\\.\\d+)?%?)|none) \\s*(-?\\d+(?:\\.\\d+)?(?:deg)?|none)\\s*(?:\\/\\s*(\\d+(?:\\.\\d+)?))?\\)?$/;\n\nconst { round: round$1 } = Math;\n\nconst roundRGB = (rgb) => {\n    return rgb.map((v, i) => (i <= 2 ? limit(round$1(v), 0, 255) : v));\n};\n\nconst percentToAbsolute = (pct, min = 0, max = 100, signed = false) => {\n    if (typeof pct === 'string' && pct.endsWith('%')) {\n        pct = parseFloat(pct.substring(0, pct.length - 1)) / 100;\n        if (signed) {\n            // signed percentages are in the range -100% to 100%\n            pct = min + (pct + 1) * 0.5 * (max - min);\n        } else {\n            pct = min + pct * (max - min);\n        }\n    }\n    return +pct;\n};\n\nconst noneToValue = (v, noneValue) => {\n    return v === 'none' ? noneValue : v;\n};\n\nconst css2rgb = (css) => {\n    css = css.toLowerCase().trim();\n    let m;\n\n    if (input.format.named) {\n        try {\n            return input.format.named(css);\n            // eslint-disable-next-line\n        } catch (e) {}\n    }\n\n    // rgb(250 20 0) or rgb(250,20,0)\n    if ((m = css.match(RE_RGB)) || (m = css.match(RE_RGB_LEGACY))) {\n        const rgb = m.slice(1, 4);\n        for (let i = 0; i < 3; i++) {\n            rgb[i] = +rgb[i];\n        }\n        rgb[3] = 1; // default alpha\n        return rgb;\n    }\n\n    // rgba(250,20,0,0.4)\n    if ((m = css.match(RE_RGBA)) || (m = css.match(RE_RGBA_LEGACY))) {\n        const rgb = m.slice(1, 5);\n        for (let i = 0; i < 4; i++) {\n            rgb[i] = +rgb[i];\n        }\n        return rgb;\n    }\n\n    // rgb(100%,0%,0%)\n    if ((m = css.match(RE_RGB_PCT)) || (m = css.match(RE_RGB_PCT_LEGACY))) {\n        const rgb = m.slice(1, 4);\n        for (let i = 0; i < 3; i++) {\n            rgb[i] = round$1(rgb[i] * 2.55);\n        }\n        rgb[3] = 1; // default alpha\n        return rgb;\n    }\n\n    // rgba(100%,0%,0%,0.4)\n    if ((m = css.match(RE_RGBA_PCT)) || (m = css.match(RE_RGBA_PCT_LEGACY))) {\n        const rgb = m.slice(1, 5);\n        for (let i = 0; i < 3; i++) {\n            rgb[i] = round$1(rgb[i] * 2.55);\n        }\n        rgb[3] = +rgb[3];\n        return rgb;\n    }\n\n    // hsl(0,100%,50%)\n    if ((m = css.match(RE_HSL)) || (m = css.match(RE_HSL_LEGACY))) {\n        const hsl = m.slice(1, 4);\n        hsl[1] *= 0.01;\n        hsl[2] *= 0.01;\n        const rgb = hsl2rgb(hsl);\n        for (let i = 0; i < 3; i++) {\n            rgb[i] = round$1(rgb[i]);\n        }\n        rgb[3] = 1;\n        return rgb;\n    }\n\n    // hsla(0,100%,50%,0.5)\n    if ((m = css.match(RE_HSLA)) || (m = css.match(RE_HSLA_LEGACY))) {\n        const hsl = m.slice(1, 4);\n        hsl[1] *= 0.01;\n        hsl[2] *= 0.01;\n        const rgb = hsl2rgb(hsl);\n        for (let i = 0; i < 3; i++) {\n            rgb[i] = round$1(rgb[i]);\n        }\n        rgb[3] = +m[4]; // default alpha = 1\n        return rgb;\n    }\n\n    if ((m = css.match(RE_LAB))) {\n        const lab = m.slice(1, 4);\n        lab[0] = percentToAbsolute(lab[0], 0, 100);\n        lab[1] = percentToAbsolute(lab[1], -125, 125, true);\n        lab[2] = percentToAbsolute(lab[2], -125, 125, true);\n        // convert to D50 Lab whitepoint\n        const wp = getLabWhitePoint();\n        setLabWhitePoint('d50');\n        const rgb = roundRGB(lab2rgb(lab));\n        // convert back to original Lab whitepoint\n        setLabWhitePoint(wp);\n        rgb[3] = m[4] !== undefined ? +m[4] : 1;\n        return rgb;\n    }\n\n    if ((m = css.match(RE_LCH))) {\n        const lch = m.slice(1, 4);\n        lch[0] = percentToAbsolute(lch[0], 0, 100);\n        lch[1] = percentToAbsolute(noneToValue(lch[1], 0), 0, 150, false);\n        lch[2] = +noneToValue(lch[2].replace('deg', ''), 0);\n        // convert to D50 Lab whitepoint\n        const wp = getLabWhitePoint();\n        setLabWhitePoint('d50');\n        const rgb = roundRGB(lch2rgb(lch));\n        // convert back to original Lab whitepoint\n        setLabWhitePoint(wp);\n        rgb[3] = m[4] !== undefined ? +m[4] : 1;\n        return rgb;\n    }\n\n    if ((m = css.match(RE_OKLAB))) {\n        const oklab = m.slice(1, 4);\n        oklab[0] = percentToAbsolute(oklab[0], 0, 1);\n        oklab[1] = percentToAbsolute(oklab[1], -0.4, 0.4, true);\n        oklab[2] = percentToAbsolute(oklab[2], -0.4, 0.4, true);\n        const rgb = roundRGB(oklab2rgb(oklab));\n        rgb[3] = m[4] !== undefined ? +m[4] : 1;\n        return rgb;\n    }\n\n    if ((m = css.match(RE_OKLCH))) {\n        const oklch = m.slice(1, 4);\n        oklch[0] = percentToAbsolute(oklch[0], 0, 1);\n        oklch[1] = percentToAbsolute(noneToValue(oklch[1], 0), 0, 0.4, false);\n        oklch[2] = +noneToValue(oklch[2].replace('deg', ''), 0);\n        const rgb = roundRGB(oklch2rgb(oklch));\n        rgb[3] = m[4] !== undefined ? +m[4] : 1;\n        return rgb;\n    }\n};\n\ncss2rgb.test = (s) => {\n    return (\n        // modern\n        RE_RGB.test(s) ||\n        RE_RGBA.test(s) ||\n        RE_RGB_PCT.test(s) ||\n        RE_RGBA_PCT.test(s) ||\n        RE_HSL.test(s) ||\n        RE_HSLA.test(s) ||\n        RE_LAB.test(s) ||\n        RE_LCH.test(s) ||\n        RE_OKLAB.test(s) ||\n        RE_OKLCH.test(s) ||\n        // legacy\n        RE_RGB_LEGACY.test(s) ||\n        RE_RGBA_LEGACY.test(s) ||\n        RE_RGB_PCT_LEGACY.test(s) ||\n        RE_RGBA_PCT_LEGACY.test(s) ||\n        RE_HSL_LEGACY.test(s) ||\n        RE_HSLA_LEGACY.test(s)\n    );\n};\n\nColor.prototype.css = function (mode) {\n    return rgb2css(this._rgb, mode);\n};\n\nconst css = (...args) => new Color(...args, 'css');\nchroma.css = css;\n\ninput.format.css = css2rgb;\n\ninput.autodetect.push({\n    p: 5,\n    test: (h, ...rest) => {\n        if (!rest.length && type(h) === 'string' && css2rgb.test(h)) {\n            return 'css';\n        }\n    }\n});\n\ninput.format.gl = (...args) => {\n    const rgb = unpack(args, 'rgba');\n    rgb[0] *= 255;\n    rgb[1] *= 255;\n    rgb[2] *= 255;\n    return rgb;\n};\n\nconst gl = (...args) => new Color(...args, 'gl');\nchroma.gl = gl;\n\nColor.prototype.gl = function () {\n    const rgb = this._rgb;\n    return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255, rgb[3]];\n};\n\nColor.prototype.hex = function (mode) {\n    return rgb2hex(this._rgb, mode);\n};\n\nconst hex = (...args) => new Color(...args, 'hex');\nchroma.hex = hex;\n\ninput.format.hex = hex2rgb;\ninput.autodetect.push({\n    p: 4,\n    test: (h, ...rest) => {\n        if (\n            !rest.length &&\n            type(h) === 'string' &&\n            [3, 4, 5, 6, 7, 8, 9].indexOf(h.length) >= 0\n        ) {\n            return 'hex';\n        }\n    }\n});\n\n/*\n * Based on implementation by Neil Bartlett\n * https://github.com/neilbartlett/color-temperature\n */\n\nconst { log } = Math;\n\nconst temperature2rgb = (kelvin) => {\n    const temp = kelvin / 100;\n    let r, g, b;\n    if (temp < 66) {\n        r = 255;\n        g =\n            temp < 6\n                ? 0\n                : -155.25485562709179 -\n                  0.44596950469579133 * (g = temp - 2) +\n                  104.49216199393888 * log(g);\n        b =\n            temp < 20\n                ? 0\n                : -254.76935184120902 +\n                  0.8274096064007395 * (b = temp - 10) +\n                  115.67994401066147 * log(b);\n    } else {\n        r =\n            351.97690566805693 +\n            0.114206453784165 * (r = temp - 55) -\n            40.25366309332127 * log(r);\n        g =\n            325.4494125711974 +\n            0.07943456536662342 * (g = temp - 50) -\n            28.0852963507957 * log(g);\n        b = 255;\n    }\n    return [r, g, b, 1];\n};\n\n/*\n * Based on implementation by Neil Bartlett\n * https://github.com/neilbartlett/color-temperature\n **/\n\nconst { round } = Math;\n\nconst rgb2temperature = (...args) => {\n    const rgb = unpack(args, 'rgb');\n    const r = rgb[0],\n        b = rgb[2];\n    let minTemp = 1000;\n    let maxTemp = 40000;\n    const eps = 0.4;\n    let temp;\n    while (maxTemp - minTemp > eps) {\n        temp = (maxTemp + minTemp) * 0.5;\n        const rgb = temperature2rgb(temp);\n        if (rgb[2] / rgb[0] >= b / r) {\n            maxTemp = temp;\n        } else {\n            minTemp = temp;\n        }\n    }\n    return round(temp);\n};\n\nColor.prototype.temp =\n    Color.prototype.kelvin =\n    Color.prototype.temperature =\n        function () {\n            return rgb2temperature(this._rgb);\n        };\n\nconst temp = (...args) => new Color(...args, 'temp');\nObject.assign(chroma, { temp, kelvin: temp, temperature: temp });\n\ninput.format.temp =\n    input.format.kelvin =\n    input.format.temperature =\n        temperature2rgb;\n\nColor.prototype.oklch = function () {\n    return rgb2oklch(this._rgb);\n};\n\nconst oklch = (...args) => new Color(...args, 'oklch');\nObject.assign(chroma, { oklch });\n\ninput.format.oklch = oklch2rgb;\n\ninput.autodetect.push({\n    p: 2,\n    test: (...args) => {\n        args = unpack(args, 'oklch');\n        if (type(args) === 'array' && args.length === 3) {\n            return 'oklch';\n        }\n    }\n});\n\n// feel free to comment out anything to rollup\n// a smaller chroma.js bundle\n\nObject.assign(chroma, {\n    analyze,\n    average,\n    bezier: bezier$1,\n    blend,\n    brewer: colorbrewer,\n    Color,\n    colors: w3cx11,\n    contrast,\n    cubehelix,\n    deltaE,\n    distance,\n    input,\n    interpolate: mix,\n    limits,\n    mix,\n    random: random$1,\n    scale,\n    scales,\n    valid\n});\n\nfunction replaceNaN(array) {\n    // fixes a NaN for 0 values in ChromaJS\n    array[0] = 0;\n    return array;\n}\nfunction convertToNamedObject(hsv) {\n    return {\n        hue: hsv[0],\n        saturation: hsv[1],\n        brightness: hsv[2],\n    };\n}\nfunction generateColorsWithLock(props, options, results) {\n    const lockHSV = isNaN(chroma.hex(`${options.lockHex}`).hsv()[0])\n        ? convertToNamedObject(replaceNaN(chroma.hex(`${options.lockHex}`).hsv()))\n        : convertToNamedObject(chroma.hex(`${options.lockHex}`).hsv());\n    let shortestDistance = 999999;\n    let lockedColor = {\n        hue: { step: 0, value: 0 },\n        saturation: { step: 0, value: 0 },\n        brightness: { step: 0, value: 0 },\n        step: 0,\n        isMajor: false,\n        isLocked: false\n    };\n    let lockedIndex;\n    const lastColor = results[results.length - 1];\n    results.forEach(function (color, index) {\n        const { hue, saturation, brightness } = color;\n        const hex = chroma.hsv(hue.value, saturation.value, brightness.value);\n        if (options.lockHex !== undefined) {\n            const distance = chroma.distance(hex, options.lockHex);\n            if (shortestDistance > distance) {\n                shortestDistance = distance;\n                lockedColor = color;\n                lockedIndex = index;\n            }\n        }\n    });\n    const difference = {\n        hue: lockHSV.hue - lockedColor.hue.value,\n        saturation: lockHSV.saturation - lockedColor.saturation.value,\n        brightness: lockHSV.brightness - lockedColor.brightness.value,\n    };\n    const adjustedColorSet = results.map(function (color, index) {\n        var _a, _b, _c;\n        if (index < lockedIndex) {\n            const hueDifference = distribute({\n                value: index,\n                rangeA: [0, lockedIndex],\n                rangeB: [0, difference.hue],\n            });\n            const saturationDifference = distribute({\n                value: index,\n                rangeA: [0, lockedIndex],\n                rangeB: [0, difference.saturation],\n            });\n            const brightnessDifference = distribute({\n                value: index,\n                rangeA: [0, lockedIndex],\n                rangeB: [0, difference.brightness],\n            });\n            return {\n                hue: {\n                    step: color.hue.step,\n                    value: color.hue.value + hueDifference > 0\n                        ? color.hue.value + hueDifference\n                        : 0,\n                },\n                saturation: {\n                    step: color.saturation.step,\n                    value: color.saturation.value + saturationDifference > 0\n                        ? color.saturation.value + saturationDifference\n                        : 0,\n                },\n                brightness: {\n                    step: color.brightness.step,\n                    value: color.brightness.value + brightnessDifference > 0\n                        ? color.brightness.value + brightnessDifference\n                        : 0,\n                },\n                step: color.step,\n                isMajor: color.isMajor,\n                isLocked: false,\n            };\n        }\n        else if (index === lockedIndex) {\n            return {\n                hue: { step: color.hue.step, value: lockHSV.hue },\n                saturation: { step: color.saturation.step, value: lockHSV.saturation },\n                brightness: { step: color.brightness.step, value: lockHSV.brightness },\n                step: color.step,\n                isMajor: color.isMajor,\n                isLocked: true,\n            };\n        }\n        else {\n            const hueDifference = distribute({\n                value: index,\n                rangeA: [lockedIndex, lastColor.step + (((_a = options === null || options === void 0 ? void 0 : options.minorSteps) === null || _a === void 0 ? void 0 : _a.length) || 0)],\n                rangeB: [difference.hue, 0],\n            });\n            const saturationDifference = distribute({\n                value: index,\n                rangeA: [lockedIndex, lastColor.step + (((_b = options === null || options === void 0 ? void 0 : options.minorSteps) === null || _b === void 0 ? void 0 : _b.length) || 0)],\n                rangeB: [difference.saturation, 0],\n            });\n            const brightnessDifference = distribute({\n                value: index,\n                rangeA: [lockedIndex, lastColor.step + (((_c = options === null || options === void 0 ? void 0 : options.minorSteps) === null || _c === void 0 ? void 0 : _c.length) || 0)],\n                rangeB: [difference.brightness, 0],\n            });\n            return {\n                hue: {\n                    step: color.hue.step,\n                    value: color.hue.value + hueDifference > 0 ||\n                        color.hue.value + hueDifference < 360\n                        ? color.hue.value + hueDifference\n                        : 0,\n                },\n                saturation: {\n                    step: color.saturation.step,\n                    value: color.saturation.value + saturationDifference < 1\n                        ? color.saturation.value + saturationDifference\n                        : 1,\n                },\n                brightness: {\n                    step: color.brightness.step,\n                    value: color.brightness.value + brightnessDifference < 1\n                        ? color.brightness.value + brightnessDifference\n                        : 1,\n                },\n                step: color.step,\n                isMajor: color.isMajor,\n                isLocked: false,\n            };\n        }\n    });\n    return adjustedColorSet;\n}\n\nfunction generate(props, options) {\n    if (options === undefined) {\n        options = {};\n    }\n    const { lockHex, lockHexInverted, provideInverted } = options;\n    const algorithmResult = [];\n    const generated = generateColors(props, options);\n    if (lockHex) {\n        algorithmResult.push(generateColorsWithLock(props, options, generated));\n    }\n    else {\n        algorithmResult.push(generated);\n    }\n    if (provideInverted) {\n        const generatedInverted = generateColors(props, options, true);\n        lockHexInverted === undefined\n            ? algorithmResult.push(generatedInverted)\n            : algorithmResult.push(generateColorsWithLock(props, options, generatedInverted));\n    }\n    return convertToColors(props, options, algorithmResult);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@k-vyn/coloralgorithm/dist/bundle.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/bezier-easing/src/index.js":
/*!*************************************************!*\
  !*** ./node_modules/bezier-easing/src/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\n\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\nfunction B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\nfunction C (aA1)      { return 3.0 * aA1; }\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier (aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT; }\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope (aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1); }\n\nfunction binarySubdivide (aX, aA, aB, mX1, mX2) {\n  var currentX, currentT, i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n  return currentT;\n}\n\nfunction newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {\n for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n   var currentSlope = getSlope(aGuessT, mX1, mX2);\n   if (currentSlope === 0.0) {\n     return aGuessT;\n   }\n   var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n   aGuessT -= currentX / currentSlope;\n }\n return aGuessT;\n}\n\nfunction LinearEasing (x) {\n  return x;\n}\n\nmodule.exports = function bezier (mX1, mY1, mX2, mY2) {\n  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {\n    throw new Error('bezier x values must be in [0, 1] range');\n  }\n\n  if (mX1 === mY1 && mX2 === mY2) {\n    return LinearEasing;\n  }\n\n  // Precompute samples table\n  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n  for (var i = 0; i < kSplineTableSize; ++i) {\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n  }\n\n  function getTForX (aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  return function BezierEasing (x) {\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9iZXppZXItZWFzaW5nL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSx3QkFBd0I7QUFDeEIsd0JBQXdCO0FBQ3hCLHdCQUF3Qjs7QUFFeEI7QUFDQSxxQ0FBcUM7O0FBRXJDO0FBQ0EsbUNBQW1DOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsdUJBQXVCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0Isc0JBQXNCO0FBQ3hDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsV0FBVyxtRUFBbUU7QUFDOUU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZGViaXNjdXNvL0RvY3VtZW50cy9HaXRIdWIvY29sb3ItcmFtcC9ub2RlX21vZHVsZXMvYmV6aWVyLWVhc2luZy9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZ3JlL2Jlemllci1lYXNpbmdcbiAqIEJlemllckVhc2luZyAtIHVzZSBiZXppZXIgY3VydmUgZm9yIHRyYW5zaXRpb24gZWFzaW5nIGZ1bmN0aW9uXG4gKiBieSBHYcOrdGFuIFJlbmF1ZGVhdSAyMDE0IC0gMjAxNSDigJMgTUlUIExpY2Vuc2VcbiAqL1xuXG4vLyBUaGVzZSB2YWx1ZXMgYXJlIGVzdGFibGlzaGVkIGJ5IGVtcGlyaWNpc20gd2l0aCB0ZXN0cyAodHJhZGVvZmY6IHBlcmZvcm1hbmNlIFZTIHByZWNpc2lvbilcbnZhciBORVdUT05fSVRFUkFUSU9OUyA9IDQ7XG52YXIgTkVXVE9OX01JTl9TTE9QRSA9IDAuMDAxO1xudmFyIFNVQkRJVklTSU9OX1BSRUNJU0lPTiA9IDAuMDAwMDAwMTtcbnZhciBTVUJESVZJU0lPTl9NQVhfSVRFUkFUSU9OUyA9IDEwO1xuXG52YXIga1NwbGluZVRhYmxlU2l6ZSA9IDExO1xudmFyIGtTYW1wbGVTdGVwU2l6ZSA9IDEuMCAvIChrU3BsaW5lVGFibGVTaXplIC0gMS4wKTtcblxudmFyIGZsb2F0MzJBcnJheVN1cHBvcnRlZCA9IHR5cGVvZiBGbG9hdDMyQXJyYXkgPT09ICdmdW5jdGlvbic7XG5cbmZ1bmN0aW9uIEEgKGFBMSwgYUEyKSB7IHJldHVybiAxLjAgLSAzLjAgKiBhQTIgKyAzLjAgKiBhQTE7IH1cbmZ1bmN0aW9uIEIgKGFBMSwgYUEyKSB7IHJldHVybiAzLjAgKiBhQTIgLSA2LjAgKiBhQTE7IH1cbmZ1bmN0aW9uIEMgKGFBMSkgICAgICB7IHJldHVybiAzLjAgKiBhQTE7IH1cblxuLy8gUmV0dXJucyB4KHQpIGdpdmVuIHQsIHgxLCBhbmQgeDIsIG9yIHkodCkgZ2l2ZW4gdCwgeTEsIGFuZCB5Mi5cbmZ1bmN0aW9uIGNhbGNCZXppZXIgKGFULCBhQTEsIGFBMikgeyByZXR1cm4gKChBKGFBMSwgYUEyKSAqIGFUICsgQihhQTEsIGFBMikpICogYVQgKyBDKGFBMSkpICogYVQ7IH1cblxuLy8gUmV0dXJucyBkeC9kdCBnaXZlbiB0LCB4MSwgYW5kIHgyLCBvciBkeS9kdCBnaXZlbiB0LCB5MSwgYW5kIHkyLlxuZnVuY3Rpb24gZ2V0U2xvcGUgKGFULCBhQTEsIGFBMikgeyByZXR1cm4gMy4wICogQShhQTEsIGFBMikgKiBhVCAqIGFUICsgMi4wICogQihhQTEsIGFBMikgKiBhVCArIEMoYUExKTsgfVxuXG5mdW5jdGlvbiBiaW5hcnlTdWJkaXZpZGUgKGFYLCBhQSwgYUIsIG1YMSwgbVgyKSB7XG4gIHZhciBjdXJyZW50WCwgY3VycmVudFQsIGkgPSAwO1xuICBkbyB7XG4gICAgY3VycmVudFQgPSBhQSArIChhQiAtIGFBKSAvIDIuMDtcbiAgICBjdXJyZW50WCA9IGNhbGNCZXppZXIoY3VycmVudFQsIG1YMSwgbVgyKSAtIGFYO1xuICAgIGlmIChjdXJyZW50WCA+IDAuMCkge1xuICAgICAgYUIgPSBjdXJyZW50VDtcbiAgICB9IGVsc2Uge1xuICAgICAgYUEgPSBjdXJyZW50VDtcbiAgICB9XG4gIH0gd2hpbGUgKE1hdGguYWJzKGN1cnJlbnRYKSA+IFNVQkRJVklTSU9OX1BSRUNJU0lPTiAmJiArK2kgPCBTVUJESVZJU0lPTl9NQVhfSVRFUkFUSU9OUyk7XG4gIHJldHVybiBjdXJyZW50VDtcbn1cblxuZnVuY3Rpb24gbmV3dG9uUmFwaHNvbkl0ZXJhdGUgKGFYLCBhR3Vlc3NULCBtWDEsIG1YMikge1xuIGZvciAodmFyIGkgPSAwOyBpIDwgTkVXVE9OX0lURVJBVElPTlM7ICsraSkge1xuICAgdmFyIGN1cnJlbnRTbG9wZSA9IGdldFNsb3BlKGFHdWVzc1QsIG1YMSwgbVgyKTtcbiAgIGlmIChjdXJyZW50U2xvcGUgPT09IDAuMCkge1xuICAgICByZXR1cm4gYUd1ZXNzVDtcbiAgIH1cbiAgIHZhciBjdXJyZW50WCA9IGNhbGNCZXppZXIoYUd1ZXNzVCwgbVgxLCBtWDIpIC0gYVg7XG4gICBhR3Vlc3NUIC09IGN1cnJlbnRYIC8gY3VycmVudFNsb3BlO1xuIH1cbiByZXR1cm4gYUd1ZXNzVDtcbn1cblxuZnVuY3Rpb24gTGluZWFyRWFzaW5nICh4KSB7XG4gIHJldHVybiB4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJlemllciAobVgxLCBtWTEsIG1YMiwgbVkyKSB7XG4gIGlmICghKDAgPD0gbVgxICYmIG1YMSA8PSAxICYmIDAgPD0gbVgyICYmIG1YMiA8PSAxKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignYmV6aWVyIHggdmFsdWVzIG11c3QgYmUgaW4gWzAsIDFdIHJhbmdlJyk7XG4gIH1cblxuICBpZiAobVgxID09PSBtWTEgJiYgbVgyID09PSBtWTIpIHtcbiAgICByZXR1cm4gTGluZWFyRWFzaW5nO1xuICB9XG5cbiAgLy8gUHJlY29tcHV0ZSBzYW1wbGVzIHRhYmxlXG4gIHZhciBzYW1wbGVWYWx1ZXMgPSBmbG9hdDMyQXJyYXlTdXBwb3J0ZWQgPyBuZXcgRmxvYXQzMkFycmF5KGtTcGxpbmVUYWJsZVNpemUpIDogbmV3IEFycmF5KGtTcGxpbmVUYWJsZVNpemUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtTcGxpbmVUYWJsZVNpemU7ICsraSkge1xuICAgIHNhbXBsZVZhbHVlc1tpXSA9IGNhbGNCZXppZXIoaSAqIGtTYW1wbGVTdGVwU2l6ZSwgbVgxLCBtWDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VEZvclggKGFYKSB7XG4gICAgdmFyIGludGVydmFsU3RhcnQgPSAwLjA7XG4gICAgdmFyIGN1cnJlbnRTYW1wbGUgPSAxO1xuICAgIHZhciBsYXN0U2FtcGxlID0ga1NwbGluZVRhYmxlU2l6ZSAtIDE7XG5cbiAgICBmb3IgKDsgY3VycmVudFNhbXBsZSAhPT0gbGFzdFNhbXBsZSAmJiBzYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0gPD0gYVg7ICsrY3VycmVudFNhbXBsZSkge1xuICAgICAgaW50ZXJ2YWxTdGFydCArPSBrU2FtcGxlU3RlcFNpemU7XG4gICAgfVxuICAgIC0tY3VycmVudFNhbXBsZTtcblxuICAgIC8vIEludGVycG9sYXRlIHRvIHByb3ZpZGUgYW4gaW5pdGlhbCBndWVzcyBmb3IgdFxuICAgIHZhciBkaXN0ID0gKGFYIC0gc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGVdKSAvIChzYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZSArIDFdIC0gc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGVdKTtcbiAgICB2YXIgZ3Vlc3NGb3JUID0gaW50ZXJ2YWxTdGFydCArIGRpc3QgKiBrU2FtcGxlU3RlcFNpemU7XG5cbiAgICB2YXIgaW5pdGlhbFNsb3BlID0gZ2V0U2xvcGUoZ3Vlc3NGb3JULCBtWDEsIG1YMik7XG4gICAgaWYgKGluaXRpYWxTbG9wZSA+PSBORVdUT05fTUlOX1NMT1BFKSB7XG4gICAgICByZXR1cm4gbmV3dG9uUmFwaHNvbkl0ZXJhdGUoYVgsIGd1ZXNzRm9yVCwgbVgxLCBtWDIpO1xuICAgIH0gZWxzZSBpZiAoaW5pdGlhbFNsb3BlID09PSAwLjApIHtcbiAgICAgIHJldHVybiBndWVzc0ZvclQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBiaW5hcnlTdWJkaXZpZGUoYVgsIGludGVydmFsU3RhcnQsIGludGVydmFsU3RhcnQgKyBrU2FtcGxlU3RlcFNpemUsIG1YMSwgbVgyKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gQmV6aWVyRWFzaW5nICh4KSB7XG4gICAgLy8gQmVjYXVzZSBKYXZhU2NyaXB0IG51bWJlciBhcmUgaW1wcmVjaXNlLCB3ZSBzaG91bGQgZ3VhcmFudGVlIHRoZSBleHRyZW1lcyBhcmUgcmlnaHQuXG4gICAgaWYgKHggPT09IDApIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAoeCA9PT0gMSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHJldHVybiBjYWxjQmV6aWVyKGdldFRGb3JYKHgpLCBtWTEsIG1ZMik7XG4gIH07XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/bezier-easing/src/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/color-contrast/dist/index.esm.js":
/*!*******************************************************!*\
  !*** ./node_modules/color-contrast/dist/index.esm.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar installedColorSpaces = [],\n    undef = function (obj) {\n  return typeof obj === 'undefined';\n},\n    channelRegExp = /\\s*(\\.\\d+|\\d+(?:\\.\\d+)?)(%)?\\s*/,\n    percentageChannelRegExp = /\\s*(\\.\\d+|100|\\d?\\d(?:\\.\\d+)?)%\\s*/,\n    alphaChannelRegExp = /\\s*(\\.\\d+|\\d+(?:\\.\\d+)?)\\s*/,\n    cssColorRegExp = new RegExp('^(rgb|hsl|hsv)a?' + '\\\\(' + channelRegExp.source + ',' + channelRegExp.source + ',' + channelRegExp.source + '(?:,' + alphaChannelRegExp.source + ')?' + '\\\\)$', 'i');\n\nfunction color(obj) {\n  if (Array.isArray(obj)) {\n    if (typeof obj[0] === 'string' && typeof color[obj[0]] === 'function') {\n      // Assumed array from .toJSON()\n      return new color[obj[0]](obj.slice(1, obj.length));\n    } else if (obj.length === 4) {\n      // Assumed 4 element int RGB array from canvas with all channels [0;255]\n      return new color.RGB(obj[0] / 255, obj[1] / 255, obj[2] / 255, obj[3] / 255);\n    }\n  } else if (typeof obj === 'string') {\n    var lowerCased = obj.toLowerCase();\n\n    if (color.namedColors[lowerCased]) {\n      obj = '#' + color.namedColors[lowerCased];\n    }\n\n    if (lowerCased === 'transparent') {\n      obj = 'rgba(0,0,0,0)';\n    } // Test for CSS rgb(....) string\n\n\n    var matchCssSyntax = obj.match(cssColorRegExp);\n\n    if (matchCssSyntax) {\n      var colorSpaceName = matchCssSyntax[1].toUpperCase(),\n          alpha = undef(matchCssSyntax[8]) ? matchCssSyntax[8] : parseFloat(matchCssSyntax[8]),\n          hasHue = colorSpaceName[0] === 'H',\n          firstChannelDivisor = matchCssSyntax[3] ? 100 : hasHue ? 360 : 255,\n          secondChannelDivisor = matchCssSyntax[5] || hasHue ? 100 : 255,\n          thirdChannelDivisor = matchCssSyntax[7] || hasHue ? 100 : 255;\n\n      if (undef(color[colorSpaceName])) {\n        throw new Error('color.' + colorSpaceName + ' is not installed.');\n      }\n\n      return new color[colorSpaceName](parseFloat(matchCssSyntax[2]) / firstChannelDivisor, parseFloat(matchCssSyntax[4]) / secondChannelDivisor, parseFloat(matchCssSyntax[6]) / thirdChannelDivisor, alpha);\n    } // Assume hex syntax\n\n\n    if (obj.length < 6) {\n      // Allow CSS shorthand\n      obj = obj.replace(/^#?([0-9a-f])([0-9a-f])([0-9a-f])$/i, '$1$1$2$2$3$3');\n    } // Split obj into red, green, and blue components\n\n\n    var hexMatch = obj.match(/^#?([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])$/i);\n\n    if (hexMatch) {\n      return new color.RGB(parseInt(hexMatch[1], 16) / 255, parseInt(hexMatch[2], 16) / 255, parseInt(hexMatch[3], 16) / 255);\n    } // No match so far. Lets try the less likely ones\n\n\n    if (color.CMYK) {\n      var cmykMatch = obj.match(new RegExp('^cmyk' + '\\\\(' + percentageChannelRegExp.source + ',' + percentageChannelRegExp.source + ',' + percentageChannelRegExp.source + ',' + percentageChannelRegExp.source + '\\\\)$', 'i'));\n\n      if (cmykMatch) {\n        return new color.CMYK(parseFloat(cmykMatch[1]) / 100, parseFloat(cmykMatch[2]) / 100, parseFloat(cmykMatch[3]) / 100, parseFloat(cmykMatch[4]) / 100);\n      }\n    }\n  } else if (typeof obj === 'object' && obj.isColor) {\n    return obj;\n  }\n\n  return false;\n}\n\ncolor.namedColors = {};\n\ncolor.installColorSpace = function (colorSpaceName, propertyNames, config) {\n  color[colorSpaceName] = function (a1) {\n    // ...\n    var args = Array.isArray(a1) ? a1 : arguments;\n    propertyNames.forEach(function (propertyName, i) {\n      var propertyValue = args[i];\n\n      if (propertyName === 'alpha') {\n        this._alpha = isNaN(propertyValue) || propertyValue > 1 ? 1 : propertyValue < 0 ? 0 : propertyValue;\n      } else {\n        if (isNaN(propertyValue)) {\n          throw new Error('[' + colorSpaceName + ']: Invalid color: (' + propertyNames.join(',') + ')');\n        }\n\n        if (propertyName === 'hue') {\n          this._hue = propertyValue < 0 ? propertyValue - Math.floor(propertyValue) : propertyValue % 1;\n        } else {\n          this['_' + propertyName] = propertyValue < 0 ? 0 : propertyValue > 1 ? 1 : propertyValue;\n        }\n      }\n    }, this);\n  };\n\n  color[colorSpaceName].propertyNames = propertyNames;\n  var prototype = color[colorSpaceName].prototype;\n  ['valueOf', 'hex', 'hexa', 'css', 'cssa'].forEach(function (methodName) {\n    prototype[methodName] = prototype[methodName] || (colorSpaceName === 'RGB' ? prototype.hex : function () {\n      return this.rgb()[methodName]();\n    });\n  });\n  prototype.isColor = true;\n\n  prototype.equals = function (otherColor, epsilon) {\n    if (undef(epsilon)) {\n      epsilon = 1e-10;\n    }\n\n    otherColor = otherColor[colorSpaceName.toLowerCase()]();\n\n    for (var i = 0; i < propertyNames.length; i = i + 1) {\n      if (Math.abs(this['_' + propertyNames[i]] - otherColor['_' + propertyNames[i]]) > epsilon) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  prototype.toJSON = function () {\n    return [colorSpaceName].concat(propertyNames.map(function (propertyName) {\n      return this['_' + propertyName];\n    }, this));\n  };\n\n  for (var propertyName in config) {\n    if (config.hasOwnProperty(propertyName)) {\n      var matchFromColorSpace = propertyName.match(/^from(.*)$/);\n\n      if (matchFromColorSpace) {\n        color[matchFromColorSpace[1].toUpperCase()].prototype[colorSpaceName.toLowerCase()] = config[propertyName];\n      } else {\n        prototype[propertyName] = config[propertyName];\n      }\n    }\n  } // It is pretty easy to implement the conversion to the same color space:\n\n\n  prototype[colorSpaceName.toLowerCase()] = function () {\n    return this;\n  };\n\n  prototype.toString = function () {\n    return '[' + colorSpaceName + ' ' + propertyNames.map(function (propertyName) {\n      return this['_' + propertyName];\n    }, this).join(', ') + ']';\n  }; // Generate getters and setters\n\n\n  propertyNames.forEach(function (propertyName) {\n    var shortName = propertyName === 'black' ? 'k' : propertyName.charAt(0);\n\n    prototype[propertyName] = prototype[shortName] = function (value, isDelta) {\n      // Simple getter mode: color.red()\n      if (typeof value === 'undefined') {\n        return this['_' + propertyName];\n      } else if (isDelta) {\n        // Adjuster: color.red(+.2, true)\n        return new this.constructor(propertyNames.map(function (otherPropertyName) {\n          return this['_' + otherPropertyName] + (propertyName === otherPropertyName ? value : 0);\n        }, this));\n      } else {\n        // Setter: color.red(.2);\n        return new this.constructor(propertyNames.map(function (otherPropertyName) {\n          return propertyName === otherPropertyName ? value : this['_' + otherPropertyName];\n        }, this));\n      }\n    };\n  });\n\n  function installForeignMethods(targetColorSpaceName, sourceColorSpaceName) {\n    var obj = {};\n\n    obj[sourceColorSpaceName.toLowerCase()] = function () {\n      return this.rgb()[sourceColorSpaceName.toLowerCase()]();\n    };\n\n    color[sourceColorSpaceName].propertyNames.forEach(function (propertyName) {\n      var shortName = propertyName === 'black' ? 'k' : propertyName.charAt(0);\n\n      obj[propertyName] = obj[shortName] = function (value, isDelta) {\n        return this[sourceColorSpaceName.toLowerCase()]()[propertyName](value, isDelta);\n      };\n    });\n\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop) && color[targetColorSpaceName].prototype[prop] === undefined) {\n        color[targetColorSpaceName].prototype[prop] = obj[prop];\n      }\n    }\n  }\n\n  installedColorSpaces.forEach(function (otherColorSpaceName) {\n    installForeignMethods(colorSpaceName, otherColorSpaceName);\n    installForeignMethods(otherColorSpaceName, colorSpaceName);\n  });\n  installedColorSpaces.push(colorSpaceName);\n  return color;\n};\n\ncolor.pluginList = [];\n\ncolor.use = function (plugin) {\n  if (color.pluginList.indexOf(plugin) === -1) {\n    this.pluginList.push(plugin);\n    plugin(color);\n  }\n\n  return color;\n};\n\ncolor.installMethod = function (name, fn) {\n  installedColorSpaces.forEach(function (colorSpace) {\n    color[colorSpace].prototype[name] = fn;\n  });\n  return this;\n};\n\ncolor.installColorSpace('RGB', ['red', 'green', 'blue', 'alpha'], {\n  hex: function () {\n    var hexString = (Math.round(255 * this._red) * 0x10000 + Math.round(255 * this._green) * 0x100 + Math.round(255 * this._blue)).toString(16);\n    return '#' + '00000'.substr(0, 6 - hexString.length) + hexString;\n  },\n  hexa: function () {\n    var alphaString = Math.round(this._alpha * 255).toString(16);\n    return '#' + '00'.substr(0, 2 - alphaString.length) + alphaString + this.hex().substr(1, 6);\n  },\n  css: function () {\n    return 'rgb(' + Math.round(255 * this._red) + ',' + Math.round(255 * this._green) + ',' + Math.round(255 * this._blue) + ')';\n  },\n  cssa: function () {\n    return 'rgba(' + Math.round(255 * this._red) + ',' + Math.round(255 * this._green) + ',' + Math.round(255 * this._blue) + ',' + this._alpha + ')';\n  }\n});\nvar color_1 = color;\n\nvar XYZ = function XYZ(color) {\n  color.installColorSpace('XYZ', ['x', 'y', 'z', 'alpha'], {\n    fromRgb: function () {\n      // http://www.easyrgb.com/index.php?X=MATH&H=02#text2\n      var convert = function (channel) {\n        return channel > 0.04045 ? Math.pow((channel + 0.055) / 1.055, 2.4) : channel / 12.92;\n      },\n          r = convert(this._red),\n          g = convert(this._green),\n          b = convert(this._blue); // Reference white point sRGB D65:\n      // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n\n\n      return new color.XYZ(r * 0.4124564 + g * 0.3575761 + b * 0.1804375, r * 0.2126729 + g * 0.7151522 + b * 0.0721750, r * 0.0193339 + g * 0.1191920 + b * 0.9503041, this._alpha);\n    },\n    rgb: function () {\n      // http://www.easyrgb.com/index.php?X=MATH&H=01#text1\n      var x = this._x,\n          y = this._y,\n          z = this._z,\n          convert = function (channel) {\n        return channel > 0.0031308 ? 1.055 * Math.pow(channel, 1 / 2.4) - 0.055 : 12.92 * channel;\n      }; // Reference white point sRGB D65:\n      // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n\n\n      return new color.RGB(convert(x * 3.2404542 + y * -1.5371385 + z * -0.4985314), convert(x * -0.9692660 + y * 1.8760108 + z * 0.0415560), convert(x * 0.0556434 + y * -0.2040259 + z * 1.0572252), this._alpha);\n    },\n    lab: function () {\n      // http://www.easyrgb.com/index.php?X=MATH&H=07#text7\n      var convert = function (channel) {\n        return channel > 0.008856 ? Math.pow(channel, 1 / 3) : 7.787037 * channel + 4 / 29;\n      },\n          x = convert(this._x / 95.047),\n          y = convert(this._y / 100.000),\n          z = convert(this._z / 108.883);\n\n      return new color.LAB(116 * y - 16, 500 * (x - y), 200 * (y - z), this._alpha);\n    }\n  });\n};\n\nvar LAB = function LAB(color) {\n  color.use(XYZ);\n  color.installColorSpace('LAB', ['l', 'a', 'b', 'alpha'], {\n    fromRgb: function () {\n      return this.xyz().lab();\n    },\n    rgb: function () {\n      return this.xyz().rgb();\n    },\n    xyz: function () {\n      // http://www.easyrgb.com/index.php?X=MATH&H=08#text8\n      var convert = function (channel) {\n        var pow = Math.pow(channel, 3);\n        return pow > 0.008856 ? pow : (channel - 16 / 116) / 7.87;\n      },\n          y = (this._l + 16) / 116,\n          x = this._a / 500 + y,\n          z = y - this._b / 200;\n\n      return new color.XYZ(convert(x) * 95.047, convert(y) * 100.000, convert(z) * 108.883, this._alpha);\n    }\n  });\n};\n\nvar HSV = function HSV(color) {\n  color.installColorSpace('HSV', ['hue', 'saturation', 'value', 'alpha'], {\n    rgb: function () {\n      var hue = this._hue,\n          saturation = this._saturation,\n          value = this._value,\n          i = Math.min(5, Math.floor(hue * 6)),\n          f = hue * 6 - i,\n          p = value * (1 - saturation),\n          q = value * (1 - f * saturation),\n          t = value * (1 - (1 - f) * saturation),\n          red,\n          green,\n          blue;\n\n      switch (i) {\n        case 0:\n          red = value;\n          green = t;\n          blue = p;\n          break;\n\n        case 1:\n          red = q;\n          green = value;\n          blue = p;\n          break;\n\n        case 2:\n          red = p;\n          green = value;\n          blue = t;\n          break;\n\n        case 3:\n          red = p;\n          green = q;\n          blue = value;\n          break;\n\n        case 4:\n          red = t;\n          green = p;\n          blue = value;\n          break;\n\n        case 5:\n          red = value;\n          green = p;\n          blue = q;\n          break;\n      }\n\n      return new color.RGB(red, green, blue, this._alpha);\n    },\n    hsl: function () {\n      var l = (2 - this._saturation) * this._value,\n          sv = this._saturation * this._value,\n          svDivisor = l <= 1 ? l : 2 - l,\n          saturation; // Avoid division by zero when lightness approaches zero:\n\n      if (svDivisor < 1e-9) {\n        saturation = 0;\n      } else {\n        saturation = sv / svDivisor;\n      }\n\n      return new color.HSL(this._hue, saturation, l / 2, this._alpha);\n    },\n    fromRgb: function () {\n      // Becomes one.color.RGB.prototype.hsv\n      var red = this._red,\n          green = this._green,\n          blue = this._blue,\n          max = Math.max(red, green, blue),\n          min = Math.min(red, green, blue),\n          delta = max - min,\n          hue,\n          saturation = max === 0 ? 0 : delta / max,\n          value = max;\n\n      if (delta === 0) {\n        hue = 0;\n      } else {\n        switch (max) {\n          case red:\n            hue = (green - blue) / delta / 6 + (green < blue ? 1 : 0);\n            break;\n\n          case green:\n            hue = (blue - red) / delta / 6 + 1 / 3;\n            break;\n\n          case blue:\n            hue = (red - green) / delta / 6 + 2 / 3;\n            break;\n        }\n      }\n\n      return new color.HSV(hue, saturation, value, this._alpha);\n    }\n  });\n};\n\nvar HSL = function HSL(color) {\n  color.use(HSV);\n  color.installColorSpace('HSL', ['hue', 'saturation', 'lightness', 'alpha'], {\n    hsv: function () {\n      // Algorithm adapted from http://wiki.secondlife.com/wiki/Color_conversion_scripts\n      var l = this._lightness * 2,\n          s = this._saturation * (l <= 1 ? l : 2 - l),\n          saturation; // Avoid division by zero when l + s is very small (approaching black):\n\n      if (l + s < 1e-9) {\n        saturation = 0;\n      } else {\n        saturation = 2 * s / (l + s);\n      }\n\n      return new color.HSV(this._hue, saturation, (l + s) / 2, this._alpha);\n    },\n    rgb: function () {\n      return this.hsv().rgb();\n    },\n    fromRgb: function () {\n      // Becomes one.color.RGB.prototype.hsv\n      return this.hsv().hsl();\n    }\n  });\n};\n\nvar CMYK = function CMYK(color) {\n  color.installColorSpace('CMYK', ['cyan', 'magenta', 'yellow', 'black', 'alpha'], {\n    rgb: function () {\n      return new color.RGB(1 - this._cyan * (1 - this._black) - this._black, 1 - this._magenta * (1 - this._black) - this._black, 1 - this._yellow * (1 - this._black) - this._black, this._alpha);\n    },\n    fromRgb: function () {\n      // Becomes one.color.RGB.prototype.cmyk\n      // Adapted from http://www.javascripter.net/faq/rgb2cmyk.htm\n      var red = this._red,\n          green = this._green,\n          blue = this._blue,\n          cyan = 1 - red,\n          magenta = 1 - green,\n          yellow = 1 - blue,\n          black = 1;\n\n      if (red || green || blue) {\n        black = Math.min(cyan, Math.min(magenta, yellow));\n        cyan = (cyan - black) / (1 - black);\n        magenta = (magenta - black) / (1 - black);\n        yellow = (yellow - black) / (1 - black);\n      } else {\n        black = 1;\n      }\n\n      return new color.CMYK(cyan, magenta, yellow, black, this._alpha);\n    }\n  });\n};\n\nvar namedColors = function namedColors(color) {\n  color.namedColors = {\n    aliceblue: 'f0f8ff',\n    antiquewhite: 'faebd7',\n    aqua: '0ff',\n    aquamarine: '7fffd4',\n    azure: 'f0ffff',\n    beige: 'f5f5dc',\n    bisque: 'ffe4c4',\n    black: '000',\n    blanchedalmond: 'ffebcd',\n    blue: '00f',\n    blueviolet: '8a2be2',\n    brown: 'a52a2a',\n    burlywood: 'deb887',\n    cadetblue: '5f9ea0',\n    chartreuse: '7fff00',\n    chocolate: 'd2691e',\n    coral: 'ff7f50',\n    cornflowerblue: '6495ed',\n    cornsilk: 'fff8dc',\n    crimson: 'dc143c',\n    cyan: '0ff',\n    darkblue: '00008b',\n    darkcyan: '008b8b',\n    darkgoldenrod: 'b8860b',\n    darkgray: 'a9a9a9',\n    darkgrey: 'a9a9a9',\n    darkgreen: '006400',\n    darkkhaki: 'bdb76b',\n    darkmagenta: '8b008b',\n    darkolivegreen: '556b2f',\n    darkorange: 'ff8c00',\n    darkorchid: '9932cc',\n    darkred: '8b0000',\n    darksalmon: 'e9967a',\n    darkseagreen: '8fbc8f',\n    darkslateblue: '483d8b',\n    darkslategray: '2f4f4f',\n    darkslategrey: '2f4f4f',\n    darkturquoise: '00ced1',\n    darkviolet: '9400d3',\n    deeppink: 'ff1493',\n    deepskyblue: '00bfff',\n    dimgray: '696969',\n    dimgrey: '696969',\n    dodgerblue: '1e90ff',\n    firebrick: 'b22222',\n    floralwhite: 'fffaf0',\n    forestgreen: '228b22',\n    fuchsia: 'f0f',\n    gainsboro: 'dcdcdc',\n    ghostwhite: 'f8f8ff',\n    gold: 'ffd700',\n    goldenrod: 'daa520',\n    gray: '808080',\n    grey: '808080',\n    green: '008000',\n    greenyellow: 'adff2f',\n    honeydew: 'f0fff0',\n    hotpink: 'ff69b4',\n    indianred: 'cd5c5c',\n    indigo: '4b0082',\n    ivory: 'fffff0',\n    khaki: 'f0e68c',\n    lavender: 'e6e6fa',\n    lavenderblush: 'fff0f5',\n    lawngreen: '7cfc00',\n    lemonchiffon: 'fffacd',\n    lightblue: 'add8e6',\n    lightcoral: 'f08080',\n    lightcyan: 'e0ffff',\n    lightgoldenrodyellow: 'fafad2',\n    lightgray: 'd3d3d3',\n    lightgrey: 'd3d3d3',\n    lightgreen: '90ee90',\n    lightpink: 'ffb6c1',\n    lightsalmon: 'ffa07a',\n    lightseagreen: '20b2aa',\n    lightskyblue: '87cefa',\n    lightslategray: '789',\n    lightslategrey: '789',\n    lightsteelblue: 'b0c4de',\n    lightyellow: 'ffffe0',\n    lime: '0f0',\n    limegreen: '32cd32',\n    linen: 'faf0e6',\n    magenta: 'f0f',\n    maroon: '800000',\n    mediumaquamarine: '66cdaa',\n    mediumblue: '0000cd',\n    mediumorchid: 'ba55d3',\n    mediumpurple: '9370d8',\n    mediumseagreen: '3cb371',\n    mediumslateblue: '7b68ee',\n    mediumspringgreen: '00fa9a',\n    mediumturquoise: '48d1cc',\n    mediumvioletred: 'c71585',\n    midnightblue: '191970',\n    mintcream: 'f5fffa',\n    mistyrose: 'ffe4e1',\n    moccasin: 'ffe4b5',\n    navajowhite: 'ffdead',\n    navy: '000080',\n    oldlace: 'fdf5e6',\n    olive: '808000',\n    olivedrab: '6b8e23',\n    orange: 'ffa500',\n    orangered: 'ff4500',\n    orchid: 'da70d6',\n    palegoldenrod: 'eee8aa',\n    palegreen: '98fb98',\n    paleturquoise: 'afeeee',\n    palevioletred: 'd87093',\n    papayawhip: 'ffefd5',\n    peachpuff: 'ffdab9',\n    peru: 'cd853f',\n    pink: 'ffc0cb',\n    plum: 'dda0dd',\n    powderblue: 'b0e0e6',\n    purple: '800080',\n    rebeccapurple: '639',\n    red: 'f00',\n    rosybrown: 'bc8f8f',\n    royalblue: '4169e1',\n    saddlebrown: '8b4513',\n    salmon: 'fa8072',\n    sandybrown: 'f4a460',\n    seagreen: '2e8b57',\n    seashell: 'fff5ee',\n    sienna: 'a0522d',\n    silver: 'c0c0c0',\n    skyblue: '87ceeb',\n    slateblue: '6a5acd',\n    slategray: '708090',\n    slategrey: '708090',\n    snow: 'fffafa',\n    springgreen: '00ff7f',\n    steelblue: '4682b4',\n    tan: 'd2b48c',\n    teal: '008080',\n    thistle: 'd8bfd8',\n    tomato: 'ff6347',\n    turquoise: '40e0d0',\n    violet: 'ee82ee',\n    wheat: 'f5deb3',\n    white: 'fff',\n    whitesmoke: 'f5f5f5',\n    yellow: 'ff0',\n    yellowgreen: '9acd32'\n  };\n};\n\nvar clearer = function clearer(color) {\n  color.installMethod('clearer', function (amount) {\n    return this.alpha(isNaN(amount) ? -0.1 : -amount, true);\n  });\n};\n\nvar luminance = function luminance(color) {\n  // http://www.w3.org/TR/WCAG20/#relativeluminancedef\n  function channelLuminance(value) {\n    return value <= 0.03928 ? value / 12.92 : Math.pow((value + 0.055) / 1.055, 2.4);\n  }\n\n  color.installMethod('luminance', function () {\n    var rgb = this.rgb();\n    return 0.2126 * channelLuminance(rgb._red) + 0.7152 * channelLuminance(rgb._green) + 0.0722 * channelLuminance(rgb._blue);\n  });\n};\n\nvar contrast = function contrast(color) {\n  // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n  color.use(luminance);\n  color.installMethod('contrast', function (color2) {\n    var lum1 = this.luminance();\n    var lum2 = color2.luminance();\n\n    if (lum1 > lum2) {\n      return (lum1 + 0.05) / (lum2 + 0.05);\n    }\n\n    return (lum2 + 0.05) / (lum1 + 0.05);\n  });\n};\n\nvar darken = function darken(color) {\n  color.use(HSL);\n  color.installMethod('darken', function (amount) {\n    return this.lightness(isNaN(amount) ? -0.1 : -amount, true);\n  });\n};\n\nvar desaturate = function desaturate(color) {\n  color.use(HSL);\n  color.installMethod('desaturate', function (amount) {\n    return this.saturation(isNaN(amount) ? -0.1 : -amount, true);\n  });\n};\n\nvar grayscale = function grayscale(color) {\n  function gs() {\n    /*jslint strict:false*/\n    var rgb = this.rgb(),\n        val = rgb._red * 0.3 + rgb._green * 0.59 + rgb._blue * 0.11;\n    return new color.RGB(val, val, val, rgb._alpha);\n  }\n\n  color.installMethod('greyscale', gs).installMethod('grayscale', gs);\n};\n\nvar isDark = function isDark(color) {\n  color.installMethod('isDark', function () {\n    var rgb = this.rgb(); // YIQ equation from http://24ways.org/2010/calculating-color-contrast\n\n    var yiq = (rgb._red * 255 * 299 + rgb._green * 255 * 587 + rgb._blue * 255 * 114) / 1000;\n    return yiq < 128;\n  });\n};\n\nvar isLight = function isLight(color) {\n  color.use(isDark);\n  color.installMethod('isLight', function () {\n    return !this.isDark();\n  });\n};\n\nvar lighten = function lighten(color) {\n  color.use(HSL);\n  color.installMethod('lighten', function (amount) {\n    return this.lightness(isNaN(amount) ? 0.1 : amount, true);\n  });\n};\n\nvar mix = function mix(color) {\n  color.installMethod('mix', function (otherColor, weight) {\n    otherColor = color(otherColor).rgb();\n    weight = 1 - (isNaN(weight) ? 0.5 : weight);\n    var w = weight * 2 - 1,\n        a = this._alpha - otherColor._alpha,\n        weight1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2,\n        weight2 = 1 - weight1,\n        rgb = this.rgb();\n    return new color.RGB(rgb._red * weight1 + otherColor._red * weight2, rgb._green * weight1 + otherColor._green * weight2, rgb._blue * weight1 + otherColor._blue * weight2, rgb._alpha * weight + otherColor._alpha * (1 - weight));\n  });\n};\n\nvar negate = function negate(color) {\n  color.installMethod('negate', function () {\n    var rgb = this.rgb();\n    return new color.RGB(1 - rgb._red, 1 - rgb._green, 1 - rgb._blue, this._alpha);\n  });\n};\n\nvar opaquer = function opaquer(color) {\n  color.installMethod('opaquer', function (amount) {\n    return this.alpha(isNaN(amount) ? 0.1 : amount, true);\n  });\n};\n\nvar rotate = function rotate(color) {\n  color.use(HSL);\n  color.installMethod('rotate', function (degrees) {\n    return this.hue((degrees || 0) / 360, true);\n  });\n};\n\nvar saturate = function saturate(color) {\n  color.use(HSL);\n  color.installMethod('saturate', function (amount) {\n    return this.saturation(isNaN(amount) ? 0.1 : amount, true);\n  });\n};\n\n// Adapted from http://gimp.sourcearchive.com/documentation/2.6.6-1ubuntu1/color-to-alpha_8c-source.html\n// toAlpha returns a color where the values of the argument have been converted to alpha\nvar toAlpha = function toAlpha(color) {\n  color.installMethod('toAlpha', function (color) {\n    var me = this.rgb(),\n        other = color(color).rgb(),\n        epsilon = 1e-10,\n        a = new color.RGB(0, 0, 0, me._alpha),\n        channels = ['_red', '_green', '_blue'];\n    channels.forEach(function (channel) {\n      if (me[channel] < epsilon) {\n        a[channel] = me[channel];\n      } else if (me[channel] > other[channel]) {\n        a[channel] = (me[channel] - other[channel]) / (1 - other[channel]);\n      } else if (me[channel] > other[channel]) {\n        a[channel] = (other[channel] - me[channel]) / other[channel];\n      } else {\n        a[channel] = 0;\n      }\n    });\n\n    if (a._red > a._green) {\n      if (a._red > a._blue) {\n        me._alpha = a._red;\n      } else {\n        me._alpha = a._blue;\n      }\n    } else if (a._green > a._blue) {\n      me._alpha = a._green;\n    } else {\n      me._alpha = a._blue;\n    }\n\n    if (me._alpha < epsilon) {\n      return me;\n    }\n\n    channels.forEach(function (channel) {\n      me[channel] = (me[channel] - other[channel]) / me._alpha + other[channel];\n    });\n    me._alpha *= a._alpha;\n    return me;\n  });\n};\n\nvar onecolor = color_1.use(XYZ).use(LAB).use(HSV).use(HSL).use(CMYK) // Convenience functions\n.use(namedColors).use(clearer).use(contrast).use(darken).use(desaturate).use(grayscale).use(isDark).use(isLight).use(lighten).use(luminance).use(mix).use(negate).use(opaquer).use(rotate).use(saturate).use(toAlpha);\n\nfunction getContrastRatio(foreground, background) {\n  var backgroundOnWhite = alphaBlend(background, '#fff');\n  var backgroundOnBlack = alphaBlend(background, '#000');\n  var LWhite = getRelativeLuminance(backgroundOnWhite);\n  var LBlack = getRelativeLuminance(backgroundOnBlack);\n  var LForeground = getRelativeLuminance(foreground);\n\n  if (LWhite < LForeground) {\n    return getContrastRatioOpaque(foreground, backgroundOnWhite);\n  } else if (LBlack > LForeground) {\n    return getContrastRatioOpaque(foreground, backgroundOnBlack);\n  } else {\n    return 1;\n  }\n}\n\nfunction alphaBlend(cssForeground, cssBackground) {\n  var foreground = onecolor(cssForeground);\n  var background = onecolor(cssBackground);\n  var result = onecolor('#fff');\n  var a = foreground.alpha();\n  result._red = foreground._red * a + background._red * (1 - a);\n  result._green = foreground._green * a + background._green * (1 - a);\n  result._blue = foreground._blue * a + background._blue * (1 - a);\n  return result;\n}\n\nfunction getContrastRatioOpaque(foreground, background) {\n  var L1 = getRelativeLuminance(background);\n  var L2 = getRelativeLuminance(alphaBlend(foreground, background)); // https://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n\n  return (Math.max(L1, L2) + 0.05) / (Math.min(L1, L2) + 0.05);\n}\n\nfunction getRelativeLuminance(cssColor) {\n  // https://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n  var color = onecolor(cssColor);\n  var R = color._red <= 0.03928 ? color._red / 12.92 : Math.pow((color._red + 0.055) / 1.055, 2.4);\n  var G = color._green <= 0.03928 ? color._green / 12.92 : Math.pow((color._green + 0.055) / 1.055, 2.4);\n  var B = color._blue <= 0.03928 ? color._blue / 12.92 : Math.pow((color._blue + 0.055) / 1.055, 2.4);\n  var L = 0.2126 * R + 0.7152 * G + 0.0722 * B;\n  return L;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getContrastRatio);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/color-contrast/dist/index.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/page.tsx":
/*!**********************!*\
  !*** ./app/page.tsx ***!
  \**********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _k_vyn_coloralgorithm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @k-vyn/coloralgorithm */ \"(app-pages-browser)/./node_modules/@k-vyn/coloralgorithm/dist/bundle.js\");\n/* harmony import */ var color_contrast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! color-contrast */ \"(app-pages-browser)/./node_modules/color-contrast/dist/index.esm.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n// Converts a hexadecimal color string into its RGB representation.\nfunction hexToRgb(hex) {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n}\n// Converts RGB values into HSB (Hue, Saturation, Brightness) format.\nfunction rgbToHsb(r, g, b) {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const delta = max - min;\n    let h = 0;\n    let s = max === 0 ? 0 : delta / max;\n    let v = max;\n    if (delta !== 0) {\n        if (max === r) {\n            h = (g - b) / delta % 6;\n        } else if (max === g) {\n            h = (b - r) / delta + 2;\n        } else {\n            h = (r - g) / delta + 4;\n        }\n        h = Math.round(h * 60);\n        if (h < 0) h += 360;\n    }\n    return {\n        h,\n        s,\n        b: v\n    };\n}\n// Converts a hexadecimal color string directly into HSB format.\nfunction hexToHsb(hex) {\n    const rgb = hexToRgb(hex);\n    if (!rgb) return {\n        h: 0,\n        s: 0,\n        b: 0\n    };\n    return rgbToHsb(rgb.r, rgb.g, rgb.b);\n}\nfunction getContrastYIQ(hexcolor) {\n    const r = parseInt(hexcolor.slice(1, 3), 16);\n    const g = parseInt(hexcolor.slice(3, 5), 16);\n    const b = parseInt(hexcolor.slice(5, 7), 16);\n    const yiq = (r * 299 + g * 587 + b * 114) / 255000;\n    return yiq >= 0.5 ? '#000000' : '#FFFFFF';\n}\n// Function to calculate contrast for generated colors\nconst calculateContrast = (colors, backgroundColor)=>{\n    const AA_CONTRAST_THRESHOLD = 4.5; // Redefine the threshold\n    return colors.map((color)=>{\n        const contrastValueWhite = (0,color_contrast__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(color.hex, '#FFFFFF'); // Calculate contrast against white\n        const contrastValueBlack = (0,color_contrast__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(color.hex, '#000000'); // Calculate contrast against black\n        const roundedContrastWhite = parseFloat(contrastValueWhite.toFixed(2)); // Round to two decimal places\n        const roundedContrastBlack = parseFloat(contrastValueBlack.toFixed(2)); // Round to two decimal places\n        const textColor = roundedContrastWhite >= AA_CONTRAST_THRESHOLD ? '#FFFFFF' : '#000000'; // Determine text color\n        const step = color.step * 100;\n        return {\n            color: color.hex,\n            contrast: roundedContrastWhite,\n            textColor: textColor,\n            step: step,\n            contrastRatioWhite: roundedContrastWhite,\n            contrastRatioBlack: roundedContrastBlack\n        };\n    });\n};\n// Main com ponent that manages color generation and state based on the provided props.\nfunction App() {\n    _s();\n    const [colors, setColors] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [lockHex, setLockHex] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"#1FA846\");\n    const { h } = hexToHsb(lockHex);\n    const props = {\n        steps: 11,\n        hue: {\n            start: h,\n            end: h,\n            curve: \"linear\"\n        },\n        saturation: {\n            start: 0.04,\n            end: 1,\n            curve: \"linear\",\n            rate: 2\n        },\n        brightness: {\n            start: 1,\n            end: 0.11,\n            curve: \"linear\"\n        }\n    };\n    const options = {\n        minorSteps: [\n            0,\n            1\n        ],\n        lockHex,\n        rotation: \"clockwise\"\n    };\n    const isValidHex = (hex)=>/^#([0-9A-Fa-f]{3}){1,2}$/.test(hex);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"App.useEffect\": ()=>{\n            // @ts-ignore - Ignore type checking for the generate function call\n            const result = _k_vyn_coloralgorithm__WEBPACK_IMPORTED_MODULE_2__.generate(props, options);\n            if (result && result.length > 0 && \"colors\" in result[0]) {\n                // @ts-expect-error - Error is expected here\n                setColors(result[0].colors);\n                console.log(\"Color Values:\", result[0].colors);\n                console.log(\"HSB Values for lock hex:\", hexToHsb(lockHex));\n            } else {\n                console.error(\"Result is not defined or empty.\"); // Log an error if result is invalid\n            }\n        }\n    }[\"App.useEffect\"], [\n        lockHex\n    ]);\n    const backgroundColor = '#FFFFFF'; // Example background color\n    const colorContrasts = calculateContrast(colors, backgroundColor);\n    // Find the first color with sufficient contrast\n    const firstSufficientContrast = colorContrasts.find((param)=>{\n        let { contrast } = param;\n        return contrast > 4.5;\n    });\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"p-8 min-h-screen bg-gray-100\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"mx-auto max-w-6xl\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"p-6 bg-white rounded-lg shadow-lg\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex gap-2 items-center mb-6\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                            className: \"text-2xl font-bold text-gray-800\",\n                            children: \"Rally Ramp Generator\"\n                        }, void 0, false, {\n                            fileName: \"/Users/davidebiscuso/Documents/GitHub/color-ramp/app/page.tsx\",\n                            lineNumber: 186,\n                            columnNumber: 13\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/Users/davidebiscuso/Documents/GitHub/color-ramp/app/page.tsx\",\n                        lineNumber: 185,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"space-y-4\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex gap-2 items-center\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"text-sm font-medium text-gray-600\",\n                                        children: \"Lock Hex:\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/davidebiscuso/Documents/GitHub/color-ramp/app/page.tsx\",\n                                        lineNumber: 193,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"flex items-center\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                className: \"px-3 py-2 text-neutral-800 bg-gray-50 border border-r-0 border-gray-300 rounded-l-md\",\n                                                children: \"#\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/davidebiscuso/Documents/GitHub/color-ramp/app/page.tsx\",\n                                                lineNumber: 198,\n                                                columnNumber: 17\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                                type: \"text\",\n                                                value: lockHex.replace(\"#\", \"\"),\n                                                onChange: (e)=>{\n                                                    const value = \"#\" + e.target.value;\n                                                    if (isValidHex(value)) {\n                                                        setLockHex(value);\n                                                    }\n                                                },\n                                                className: \"px-3 py-2 w-24 rounded-r-md border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 placeholder-neutral-800 text-neutral-800\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/davidebiscuso/Documents/GitHub/color-ramp/app/page.tsx\",\n                                                lineNumber: 201,\n                                                columnNumber: 17\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/Users/davidebiscuso/Documents/GitHub/color-ramp/app/page.tsx\",\n                                        lineNumber: 197,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"ml-4 text-sm font-medium text-gray-600\",\n                                        children: \"Converted Hue:\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/davidebiscuso/Documents/GitHub/color-ramp/app/page.tsx\",\n                                        lineNumber: 214,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"font-mono text-sm text-neutral-800\",\n                                        children: [\n                                            h,\n                                            \"\\xb0\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/Users/davidebiscuso/Documents/GitHub/color-ramp/app/page.tsx\",\n                                        lineNumber: 217,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/davidebiscuso/Documents/GitHub/color-ramp/app/page.tsx\",\n                                lineNumber: 192,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ul\", {\n                                className: \"h-[632px] bg-neutral-50\",\n                                children: colorContrasts.map((param, index)=>{\n                                    let { color, contrast, textColor, step, contrastRatioWhite, contrastRatioBlack } = param;\n                                    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                        className: \"p-3 flex items-center\",\n                                        style: {\n                                            backgroundColor: color,\n                                            color: textColor\n                                        },\n                                        children: [\n                                            \"\".concat(step, \", Text: \").concat(textColor, \", Background: \").concat(color),\n                                            contrastRatioWhite > 4.5 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                className: \"ml-2\",\n                                                style: {\n                                                    color: textColor\n                                                },\n                                                children: [\n                                                    \"Contrast Ratio: \",\n                                                    contrastRatioWhite\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"/Users/davidebiscuso/Documents/GitHub/color-ramp/app/page.tsx\",\n                                                lineNumber: 225,\n                                                columnNumber: 21\n                                            }, this),\n                                            contrastRatioBlack > 4.5 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                className: \"ml-2\",\n                                                style: {\n                                                    color: textColor\n                                                },\n                                                children: [\n                                                    \"Contrast Ratio: \",\n                                                    contrastRatioBlack\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"/Users/davidebiscuso/Documents/GitHub/color-ramp/app/page.tsx\",\n                                                lineNumber: 228,\n                                                columnNumber: 21\n                                            }, this),\n                                            firstSufficientContrast && firstSufficientContrast.color === color && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                className: \"p-1 px-3 rounded-full justify-end bg-white text-black ml-auto\",\n                                                children: \"Accent Primary\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/davidebiscuso/Documents/GitHub/color-ramp/app/page.tsx\",\n                                                lineNumber: 231,\n                                                columnNumber: 21\n                                            }, this) // Badge for sufficient contrast\n                                        ]\n                                    }, color, true, {\n                                        fileName: \"/Users/davidebiscuso/Documents/GitHub/color-ramp/app/page.tsx\",\n                                        lineNumber: 222,\n                                        columnNumber: 17\n                                    }, this);\n                                })\n                            }, void 0, false, {\n                                fileName: \"/Users/davidebiscuso/Documents/GitHub/color-ramp/app/page.tsx\",\n                                lineNumber: 220,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"p-4 mt-4 bg-gray-50 rounded-md\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                        className: \"mb-2 text-sm font-medium text-gray-700\",\n                                        children: \"Color Information\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/davidebiscuso/Documents/GitHub/color-ramp/app/page.tsx\",\n                                        lineNumber: 238,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"space-y-2 text-xs text-gray-600\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                children: \"• Check the console for detailed color values\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/davidebiscuso/Documents/GitHub/color-ramp/app/page.tsx\",\n                                                lineNumber: 242,\n                                                columnNumber: 17\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                children: [\n                                                    \"• Repo used:\",\n                                                    \" \",\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                                                        className: \"underline\",\n                                                        href: \"https://github.com/k-vyn/coloralgorithm\",\n                                                        children: \"https://github.com/k-vyn/coloralgorithm\"\n                                                    }, void 0, false, {\n                                                        fileName: \"/Users/davidebiscuso/Documents/GitHub/color-ramp/app/page.tsx\",\n                                                        lineNumber: 245,\n                                                        columnNumber: 19\n                                                    }, this)\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"/Users/davidebiscuso/Documents/GitHub/color-ramp/app/page.tsx\",\n                                                lineNumber: 243,\n                                                columnNumber: 17\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                children: [\n                                                    \"• Generated \",\n                                                    colors.length,\n                                                    \" colors with\",\n                                                    \" \",\n                                                    colors.filter((c)=>c.isMajor).length,\n                                                    \" major steps\"\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"/Users/davidebiscuso/Documents/GitHub/color-ramp/app/page.tsx\",\n                                                lineNumber: 252,\n                                                columnNumber: 17\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/Users/davidebiscuso/Documents/GitHub/color-ramp/app/page.tsx\",\n                                        lineNumber: 241,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/davidebiscuso/Documents/GitHub/color-ramp/app/page.tsx\",\n                                lineNumber: 237,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/davidebiscuso/Documents/GitHub/color-ramp/app/page.tsx\",\n                        lineNumber: 191,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/davidebiscuso/Documents/GitHub/color-ramp/app/page.tsx\",\n                lineNumber: 184,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/davidebiscuso/Documents/GitHub/color-ramp/app/page.tsx\",\n            lineNumber: 183,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/davidebiscuso/Documents/GitHub/color-ramp/app/page.tsx\",\n        lineNumber: 182,\n        columnNumber: 5\n    }, this);\n}\n_s(App, \"6KskpLg4b4JpsQSwcZ6ynLAyyFI=\");\n_c = App;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (App);\nvar _c;\n$RefreshReg$(_c, \"App\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/page.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n true &&\n  (function () {\n    function getComponentNameFromType(type) {\n      if (null == type) return null;\n      if (\"function\" === typeof type)\n        return type.$$typeof === REACT_CLIENT_REFERENCE$2\n          ? null\n          : type.displayName || type.name || null;\n      if (\"string\" === typeof type) return type;\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return \"Fragment\";\n        case REACT_PORTAL_TYPE:\n          return \"Portal\";\n        case REACT_PROFILER_TYPE:\n          return \"Profiler\";\n        case REACT_STRICT_MODE_TYPE:\n          return \"StrictMode\";\n        case REACT_SUSPENSE_TYPE:\n          return \"Suspense\";\n        case REACT_SUSPENSE_LIST_TYPE:\n          return \"SuspenseList\";\n      }\n      if (\"object\" === typeof type)\n        switch (\n          (\"number\" === typeof type.tag &&\n            console.error(\n              \"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"\n            ),\n          type.$$typeof)\n        ) {\n          case REACT_CONTEXT_TYPE:\n            return (type.displayName || \"Context\") + \".Provider\";\n          case REACT_CONSUMER_TYPE:\n            return (type._context.displayName || \"Context\") + \".Consumer\";\n          case REACT_FORWARD_REF_TYPE:\n            var innerType = type.render;\n            type = type.displayName;\n            type ||\n              ((type = innerType.displayName || innerType.name || \"\"),\n              (type = \"\" !== type ? \"ForwardRef(\" + type + \")\" : \"ForwardRef\"));\n            return type;\n          case REACT_MEMO_TYPE:\n            return (\n              (innerType = type.displayName || null),\n              null !== innerType\n                ? innerType\n                : getComponentNameFromType(type.type) || \"Memo\"\n            );\n          case REACT_LAZY_TYPE:\n            innerType = type._payload;\n            type = type._init;\n            try {\n              return getComponentNameFromType(type(innerType));\n            } catch (x) {}\n        }\n      return null;\n    }\n    function testStringCoercion(value) {\n      return \"\" + value;\n    }\n    function checkKeyStringCoercion(value) {\n      try {\n        testStringCoercion(value);\n        var JSCompiler_inline_result = !1;\n      } catch (e) {\n        JSCompiler_inline_result = !0;\n      }\n      if (JSCompiler_inline_result) {\n        JSCompiler_inline_result = console;\n        var JSCompiler_temp_const = JSCompiler_inline_result.error;\n        var JSCompiler_inline_result$jscomp$0 =\n          (\"function\" === typeof Symbol &&\n            Symbol.toStringTag &&\n            value[Symbol.toStringTag]) ||\n          value.constructor.name ||\n          \"Object\";\n        JSCompiler_temp_const.call(\n          JSCompiler_inline_result,\n          \"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.\",\n          JSCompiler_inline_result$jscomp$0\n        );\n        return testStringCoercion(value);\n      }\n    }\n    function disabledLog() {}\n    function disableLogs() {\n      if (0 === disabledDepth) {\n        prevLog = console.log;\n        prevInfo = console.info;\n        prevWarn = console.warn;\n        prevError = console.error;\n        prevGroup = console.group;\n        prevGroupCollapsed = console.groupCollapsed;\n        prevGroupEnd = console.groupEnd;\n        var props = {\n          configurable: !0,\n          enumerable: !0,\n          value: disabledLog,\n          writable: !0\n        };\n        Object.defineProperties(console, {\n          info: props,\n          log: props,\n          warn: props,\n          error: props,\n          group: props,\n          groupCollapsed: props,\n          groupEnd: props\n        });\n      }\n      disabledDepth++;\n    }\n    function reenableLogs() {\n      disabledDepth--;\n      if (0 === disabledDepth) {\n        var props = { configurable: !0, enumerable: !0, writable: !0 };\n        Object.defineProperties(console, {\n          log: assign({}, props, { value: prevLog }),\n          info: assign({}, props, { value: prevInfo }),\n          warn: assign({}, props, { value: prevWarn }),\n          error: assign({}, props, { value: prevError }),\n          group: assign({}, props, { value: prevGroup }),\n          groupCollapsed: assign({}, props, { value: prevGroupCollapsed }),\n          groupEnd: assign({}, props, { value: prevGroupEnd })\n        });\n      }\n      0 > disabledDepth &&\n        console.error(\n          \"disabledDepth fell below zero. This is a bug in React. Please file an issue.\"\n        );\n    }\n    function describeBuiltInComponentFrame(name) {\n      if (void 0 === prefix)\n        try {\n          throw Error();\n        } catch (x) {\n          var match = x.stack.trim().match(/\\n( *(at )?)/);\n          prefix = (match && match[1]) || \"\";\n          suffix =\n            -1 < x.stack.indexOf(\"\\n    at\")\n              ? \" (<anonymous>)\"\n              : -1 < x.stack.indexOf(\"@\")\n                ? \"@unknown:0:0\"\n                : \"\";\n        }\n      return \"\\n\" + prefix + name + suffix;\n    }\n    function describeNativeComponentFrame(fn, construct) {\n      if (!fn || reentry) return \"\";\n      var frame = componentFrameCache.get(fn);\n      if (void 0 !== frame) return frame;\n      reentry = !0;\n      frame = Error.prepareStackTrace;\n      Error.prepareStackTrace = void 0;\n      var previousDispatcher = null;\n      previousDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = null;\n      disableLogs();\n      try {\n        var RunInRootFrame = {\n          DetermineComponentFrameRoot: function () {\n            try {\n              if (construct) {\n                var Fake = function () {\n                  throw Error();\n                };\n                Object.defineProperty(Fake.prototype, \"props\", {\n                  set: function () {\n                    throw Error();\n                  }\n                });\n                if (\"object\" === typeof Reflect && Reflect.construct) {\n                  try {\n                    Reflect.construct(Fake, []);\n                  } catch (x) {\n                    var control = x;\n                  }\n                  Reflect.construct(fn, [], Fake);\n                } else {\n                  try {\n                    Fake.call();\n                  } catch (x$0) {\n                    control = x$0;\n                  }\n                  fn.call(Fake.prototype);\n                }\n              } else {\n                try {\n                  throw Error();\n                } catch (x$1) {\n                  control = x$1;\n                }\n                (Fake = fn()) &&\n                  \"function\" === typeof Fake.catch &&\n                  Fake.catch(function () {});\n              }\n            } catch (sample) {\n              if (sample && control && \"string\" === typeof sample.stack)\n                return [sample.stack, control.stack];\n            }\n            return [null, null];\n          }\n        };\n        RunInRootFrame.DetermineComponentFrameRoot.displayName =\n          \"DetermineComponentFrameRoot\";\n        var namePropDescriptor = Object.getOwnPropertyDescriptor(\n          RunInRootFrame.DetermineComponentFrameRoot,\n          \"name\"\n        );\n        namePropDescriptor &&\n          namePropDescriptor.configurable &&\n          Object.defineProperty(\n            RunInRootFrame.DetermineComponentFrameRoot,\n            \"name\",\n            { value: \"DetermineComponentFrameRoot\" }\n          );\n        var _RunInRootFrame$Deter =\n            RunInRootFrame.DetermineComponentFrameRoot(),\n          sampleStack = _RunInRootFrame$Deter[0],\n          controlStack = _RunInRootFrame$Deter[1];\n        if (sampleStack && controlStack) {\n          var sampleLines = sampleStack.split(\"\\n\"),\n            controlLines = controlStack.split(\"\\n\");\n          for (\n            _RunInRootFrame$Deter = namePropDescriptor = 0;\n            namePropDescriptor < sampleLines.length &&\n            !sampleLines[namePropDescriptor].includes(\n              \"DetermineComponentFrameRoot\"\n            );\n\n          )\n            namePropDescriptor++;\n          for (\n            ;\n            _RunInRootFrame$Deter < controlLines.length &&\n            !controlLines[_RunInRootFrame$Deter].includes(\n              \"DetermineComponentFrameRoot\"\n            );\n\n          )\n            _RunInRootFrame$Deter++;\n          if (\n            namePropDescriptor === sampleLines.length ||\n            _RunInRootFrame$Deter === controlLines.length\n          )\n            for (\n              namePropDescriptor = sampleLines.length - 1,\n                _RunInRootFrame$Deter = controlLines.length - 1;\n              1 <= namePropDescriptor &&\n              0 <= _RunInRootFrame$Deter &&\n              sampleLines[namePropDescriptor] !==\n                controlLines[_RunInRootFrame$Deter];\n\n            )\n              _RunInRootFrame$Deter--;\n          for (\n            ;\n            1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter;\n            namePropDescriptor--, _RunInRootFrame$Deter--\n          )\n            if (\n              sampleLines[namePropDescriptor] !==\n              controlLines[_RunInRootFrame$Deter]\n            ) {\n              if (1 !== namePropDescriptor || 1 !== _RunInRootFrame$Deter) {\n                do\n                  if (\n                    (namePropDescriptor--,\n                    _RunInRootFrame$Deter--,\n                    0 > _RunInRootFrame$Deter ||\n                      sampleLines[namePropDescriptor] !==\n                        controlLines[_RunInRootFrame$Deter])\n                  ) {\n                    var _frame =\n                      \"\\n\" +\n                      sampleLines[namePropDescriptor].replace(\n                        \" at new \",\n                        \" at \"\n                      );\n                    fn.displayName &&\n                      _frame.includes(\"<anonymous>\") &&\n                      (_frame = _frame.replace(\"<anonymous>\", fn.displayName));\n                    \"function\" === typeof fn &&\n                      componentFrameCache.set(fn, _frame);\n                    return _frame;\n                  }\n                while (1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter);\n              }\n              break;\n            }\n        }\n      } finally {\n        (reentry = !1),\n          (ReactSharedInternals.H = previousDispatcher),\n          reenableLogs(),\n          (Error.prepareStackTrace = frame);\n      }\n      sampleLines = (sampleLines = fn ? fn.displayName || fn.name : \"\")\n        ? describeBuiltInComponentFrame(sampleLines)\n        : \"\";\n      \"function\" === typeof fn && componentFrameCache.set(fn, sampleLines);\n      return sampleLines;\n    }\n    function describeUnknownElementTypeFrameInDEV(type) {\n      if (null == type) return \"\";\n      if (\"function\" === typeof type) {\n        var prototype = type.prototype;\n        return describeNativeComponentFrame(\n          type,\n          !(!prototype || !prototype.isReactComponent)\n        );\n      }\n      if (\"string\" === typeof type) return describeBuiltInComponentFrame(type);\n      switch (type) {\n        case REACT_SUSPENSE_TYPE:\n          return describeBuiltInComponentFrame(\"Suspense\");\n        case REACT_SUSPENSE_LIST_TYPE:\n          return describeBuiltInComponentFrame(\"SuspenseList\");\n      }\n      if (\"object\" === typeof type)\n        switch (type.$$typeof) {\n          case REACT_FORWARD_REF_TYPE:\n            return (type = describeNativeComponentFrame(type.render, !1)), type;\n          case REACT_MEMO_TYPE:\n            return describeUnknownElementTypeFrameInDEV(type.type);\n          case REACT_LAZY_TYPE:\n            prototype = type._payload;\n            type = type._init;\n            try {\n              return describeUnknownElementTypeFrameInDEV(type(prototype));\n            } catch (x) {}\n        }\n      return \"\";\n    }\n    function getOwner() {\n      var dispatcher = ReactSharedInternals.A;\n      return null === dispatcher ? null : dispatcher.getOwner();\n    }\n    function hasValidKey(config) {\n      if (hasOwnProperty.call(config, \"key\")) {\n        var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n        if (getter && getter.isReactWarning) return !1;\n      }\n      return void 0 !== config.key;\n    }\n    function defineKeyPropWarningGetter(props, displayName) {\n      function warnAboutAccessingKey() {\n        specialPropKeyWarningShown ||\n          ((specialPropKeyWarningShown = !0),\n          console.error(\n            \"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)\",\n            displayName\n          ));\n      }\n      warnAboutAccessingKey.isReactWarning = !0;\n      Object.defineProperty(props, \"key\", {\n        get: warnAboutAccessingKey,\n        configurable: !0\n      });\n    }\n    function elementRefGetterWithDeprecationWarning() {\n      var componentName = getComponentNameFromType(this.type);\n      didWarnAboutElementRef[componentName] ||\n        ((didWarnAboutElementRef[componentName] = !0),\n        console.error(\n          \"Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.\"\n        ));\n      componentName = this.props.ref;\n      return void 0 !== componentName ? componentName : null;\n    }\n    function ReactElement(type, key, self, source, owner, props) {\n      self = props.ref;\n      type = {\n        $$typeof: REACT_ELEMENT_TYPE,\n        type: type,\n        key: key,\n        props: props,\n        _owner: owner\n      };\n      null !== (void 0 !== self ? self : null)\n        ? Object.defineProperty(type, \"ref\", {\n            enumerable: !1,\n            get: elementRefGetterWithDeprecationWarning\n          })\n        : Object.defineProperty(type, \"ref\", { enumerable: !1, value: null });\n      type._store = {};\n      Object.defineProperty(type._store, \"validated\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: 0\n      });\n      Object.defineProperty(type, \"_debugInfo\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: null\n      });\n      Object.freeze && (Object.freeze(type.props), Object.freeze(type));\n      return type;\n    }\n    function jsxDEVImpl(\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self\n    ) {\n      if (\n        \"string\" === typeof type ||\n        \"function\" === typeof type ||\n        type === REACT_FRAGMENT_TYPE ||\n        type === REACT_PROFILER_TYPE ||\n        type === REACT_STRICT_MODE_TYPE ||\n        type === REACT_SUSPENSE_TYPE ||\n        type === REACT_SUSPENSE_LIST_TYPE ||\n        type === REACT_OFFSCREEN_TYPE ||\n        (\"object\" === typeof type &&\n          null !== type &&\n          (type.$$typeof === REACT_LAZY_TYPE ||\n            type.$$typeof === REACT_MEMO_TYPE ||\n            type.$$typeof === REACT_CONTEXT_TYPE ||\n            type.$$typeof === REACT_CONSUMER_TYPE ||\n            type.$$typeof === REACT_FORWARD_REF_TYPE ||\n            type.$$typeof === REACT_CLIENT_REFERENCE$1 ||\n            void 0 !== type.getModuleId))\n      ) {\n        var children = config.children;\n        if (void 0 !== children)\n          if (isStaticChildren)\n            if (isArrayImpl(children)) {\n              for (\n                isStaticChildren = 0;\n                isStaticChildren < children.length;\n                isStaticChildren++\n              )\n                validateChildKeys(children[isStaticChildren], type);\n              Object.freeze && Object.freeze(children);\n            } else\n              console.error(\n                \"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\"\n              );\n          else validateChildKeys(children, type);\n      } else {\n        children = \"\";\n        if (\n          void 0 === type ||\n          (\"object\" === typeof type &&\n            null !== type &&\n            0 === Object.keys(type).length)\n        )\n          children +=\n            \" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\";\n        null === type\n          ? (isStaticChildren = \"null\")\n          : isArrayImpl(type)\n            ? (isStaticChildren = \"array\")\n            : void 0 !== type && type.$$typeof === REACT_ELEMENT_TYPE\n              ? ((isStaticChildren =\n                  \"<\" +\n                  (getComponentNameFromType(type.type) || \"Unknown\") +\n                  \" />\"),\n                (children =\n                  \" Did you accidentally export a JSX literal instead of a component?\"))\n              : (isStaticChildren = typeof type);\n        console.error(\n          \"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\",\n          isStaticChildren,\n          children\n        );\n      }\n      if (hasOwnProperty.call(config, \"key\")) {\n        children = getComponentNameFromType(type);\n        var keys = Object.keys(config).filter(function (k) {\n          return \"key\" !== k;\n        });\n        isStaticChildren =\n          0 < keys.length\n            ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\"\n            : \"{key: someKey}\";\n        didWarnAboutKeySpread[children + isStaticChildren] ||\n          ((keys =\n            0 < keys.length ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\"),\n          console.error(\n            'A props object containing a \"key\" prop is being spread into JSX:\\n  let props = %s;\\n  <%s {...props} />\\nReact keys must be passed directly to JSX without using spread:\\n  let props = %s;\\n  <%s key={someKey} {...props} />',\n            isStaticChildren,\n            children,\n            keys,\n            children\n          ),\n          (didWarnAboutKeySpread[children + isStaticChildren] = !0));\n      }\n      children = null;\n      void 0 !== maybeKey &&\n        (checkKeyStringCoercion(maybeKey), (children = \"\" + maybeKey));\n      hasValidKey(config) &&\n        (checkKeyStringCoercion(config.key), (children = \"\" + config.key));\n      if (\"key\" in config) {\n        maybeKey = {};\n        for (var propName in config)\n          \"key\" !== propName && (maybeKey[propName] = config[propName]);\n      } else maybeKey = config;\n      children &&\n        defineKeyPropWarningGetter(\n          maybeKey,\n          \"function\" === typeof type\n            ? type.displayName || type.name || \"Unknown\"\n            : type\n        );\n      return ReactElement(type, children, self, source, getOwner(), maybeKey);\n    }\n    function validateChildKeys(node, parentType) {\n      if (\n        \"object\" === typeof node &&\n        node &&\n        node.$$typeof !== REACT_CLIENT_REFERENCE\n      )\n        if (isArrayImpl(node))\n          for (var i = 0; i < node.length; i++) {\n            var child = node[i];\n            isValidElement(child) && validateExplicitKey(child, parentType);\n          }\n        else if (isValidElement(node))\n          node._store && (node._store.validated = 1);\n        else if (\n          (null === node || \"object\" !== typeof node\n            ? (i = null)\n            : ((i =\n                (MAYBE_ITERATOR_SYMBOL && node[MAYBE_ITERATOR_SYMBOL]) ||\n                node[\"@@iterator\"]),\n              (i = \"function\" === typeof i ? i : null)),\n          \"function\" === typeof i &&\n            i !== node.entries &&\n            ((i = i.call(node)), i !== node))\n        )\n          for (; !(node = i.next()).done; )\n            isValidElement(node.value) &&\n              validateExplicitKey(node.value, parentType);\n    }\n    function isValidElement(object) {\n      return (\n        \"object\" === typeof object &&\n        null !== object &&\n        object.$$typeof === REACT_ELEMENT_TYPE\n      );\n    }\n    function validateExplicitKey(element, parentType) {\n      if (\n        element._store &&\n        !element._store.validated &&\n        null == element.key &&\n        ((element._store.validated = 1),\n        (parentType = getCurrentComponentErrorInfo(parentType)),\n        !ownerHasKeyUseWarning[parentType])\n      ) {\n        ownerHasKeyUseWarning[parentType] = !0;\n        var childOwner = \"\";\n        element &&\n          null != element._owner &&\n          element._owner !== getOwner() &&\n          ((childOwner = null),\n          \"number\" === typeof element._owner.tag\n            ? (childOwner = getComponentNameFromType(element._owner.type))\n            : \"string\" === typeof element._owner.name &&\n              (childOwner = element._owner.name),\n          (childOwner = \" It was passed a child from \" + childOwner + \".\"));\n        var prevGetCurrentStack = ReactSharedInternals.getCurrentStack;\n        ReactSharedInternals.getCurrentStack = function () {\n          var stack = describeUnknownElementTypeFrameInDEV(element.type);\n          prevGetCurrentStack && (stack += prevGetCurrentStack() || \"\");\n          return stack;\n        };\n        console.error(\n          'Each child in a list should have a unique \"key\" prop.%s%s See https://react.dev/link/warning-keys for more information.',\n          parentType,\n          childOwner\n        );\n        ReactSharedInternals.getCurrentStack = prevGetCurrentStack;\n      }\n    }\n    function getCurrentComponentErrorInfo(parentType) {\n      var info = \"\",\n        owner = getOwner();\n      owner &&\n        (owner = getComponentNameFromType(owner.type)) &&\n        (info = \"\\n\\nCheck the render method of `\" + owner + \"`.\");\n      info ||\n        ((parentType = getComponentNameFromType(parentType)) &&\n          (info =\n            \"\\n\\nCheck the top-level render call using <\" + parentType + \">.\"));\n      return info;\n    }\n    var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"),\n      REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n      REACT_PORTAL_TYPE = Symbol.for(\"react.portal\"),\n      REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"),\n      REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\"),\n      REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n    Symbol.for(\"react.provider\");\n    var REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\"),\n      REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"),\n      REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"),\n      REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"),\n      REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"),\n      REACT_MEMO_TYPE = Symbol.for(\"react.memo\"),\n      REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"),\n      REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\"),\n      MAYBE_ITERATOR_SYMBOL = Symbol.iterator,\n      REACT_CLIENT_REFERENCE$2 = Symbol.for(\"react.client.reference\"),\n      ReactSharedInternals =\n        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,\n      hasOwnProperty = Object.prototype.hasOwnProperty,\n      assign = Object.assign,\n      REACT_CLIENT_REFERENCE$1 = Symbol.for(\"react.client.reference\"),\n      isArrayImpl = Array.isArray,\n      disabledDepth = 0,\n      prevLog,\n      prevInfo,\n      prevWarn,\n      prevError,\n      prevGroup,\n      prevGroupCollapsed,\n      prevGroupEnd;\n    disabledLog.__reactDisabledLog = !0;\n    var prefix,\n      suffix,\n      reentry = !1;\n    var componentFrameCache = new (\n      \"function\" === typeof WeakMap ? WeakMap : Map\n    )();\n    var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\"),\n      specialPropKeyWarningShown;\n    var didWarnAboutElementRef = {};\n    var didWarnAboutKeySpread = {},\n      ownerHasKeyUseWarning = {};\n    exports.Fragment = REACT_FRAGMENT_TYPE;\n    exports.jsxDEV = function (\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self\n    ) {\n      return jsxDEVImpl(type, config, maybeKey, isStaticChildren, source, self);\n    };\n  })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw4TEFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZGViaXNjdXNvL0RvY3VtZW50cy9HaXRIdWIvY29sb3ItcmFtcC9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLnByb2R1Y3Rpb24uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/chroma-js/dist/chroma.cjs":
/*!************************************************!*\
  !*** ./node_modules/chroma-js/dist/chroma.cjs ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * chroma.js - JavaScript library for color conversions\n *\n * Copyright (c) 2011-2024, Gregor Aisch\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n * list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. The name Gregor Aisch may not be used to endorse or promote products\n * derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * -------------------------------------------------------\n *\n * chroma.js includes colors from colorbrewer2.org, which are released under\n * the following license:\n *\n * Copyright (c) 2002 Cynthia Brewer, Mark Harrower,\n * and The Pennsylvania State University.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n *\n * ------------------------------------------------------\n *\n * Named colors are taken from X11 Color Names.\n * http://www.w3.org/TR/css3-color/#svg-color\n *\n * @preserve\n */\n\n(function (global, factory) {\n     true ? module.exports = factory() :\n    0;\n})(this, (function () { 'use strict';\n\n    var min$4 = Math.min;\n    var max$4 = Math.max;\n\n    function limit (x, low, high) {\n        if ( low === void 0 ) low = 0;\n        if ( high === void 0 ) high = 1;\n\n        return min$4(max$4(low, x), high);\n    }\n\n    function clip_rgb (rgb) {\n        rgb._clipped = false;\n        rgb._unclipped = rgb.slice(0);\n        for (var i = 0; i <= 3; i++) {\n            if (i < 3) {\n                if (rgb[i] < 0 || rgb[i] > 255) { rgb._clipped = true; }\n                rgb[i] = limit(rgb[i], 0, 255);\n            } else if (i === 3) {\n                rgb[i] = limit(rgb[i], 0, 1);\n            }\n        }\n        return rgb;\n    }\n\n    // ported from jQuery's $.type\n    var classToType = {};\n    for (var i = 0, list = [\n        'Boolean',\n        'Number',\n        'String',\n        'Function',\n        'Array',\n        'Date',\n        'RegExp',\n        'Undefined',\n        'Null'\n    ]; i < list.length; i += 1) {\n        var name = list[i];\n\n        classToType[(\"[object \" + name + \"]\")] = name.toLowerCase();\n    }\n    function type (obj) {\n        return classToType[Object.prototype.toString.call(obj)] || 'object';\n    }\n\n    function unpack (args, keyOrder) {\n        if ( keyOrder === void 0 ) keyOrder = null;\n\n        // if called with more than 3 arguments, we return the arguments\n        if (args.length >= 3) { return Array.prototype.slice.call(args); }\n        // with less than 3 args we check if first arg is object\n        // and use the keyOrder string to extract and sort properties\n        if (type(args[0]) == 'object' && keyOrder) {\n            return keyOrder\n                .split('')\n                .filter(function (k) { return args[0][k] !== undefined; })\n                .map(function (k) { return args[0][k]; });\n        }\n        // otherwise we just return the first argument\n        // (which we suppose is an array of args)\n        return args[0].slice(0);\n    }\n\n    function last (args) {\n        if (args.length < 2) { return null; }\n        var l = args.length - 1;\n        if (type(args[l]) == 'string') { return args[l].toLowerCase(); }\n        return null;\n    }\n\n    var PI$2 = Math.PI;\n    var min$3 = Math.min;\n    var max$3 = Math.max;\n\n    var rnd2 = function (a) { return Math.round(a * 100) / 100; };\n    var rnd3 = function (a) { return Math.round(a * 100) / 100; };\n\n    var TWOPI = PI$2 * 2;\n    var PITHIRD = PI$2 / 3;\n    var DEG2RAD = PI$2 / 180;\n    var RAD2DEG = 180 / PI$2;\n\n    /**\n     * Reverse the first three elements of an array\n     *\n     * @param {any[]} arr\n     * @returns {any[]}\n     */\n    function reverse3(arr) {\n        return arr.slice(0, 3).reverse().concat( arr.slice(3));\n    }\n\n    var input = {\n        format: {},\n        autodetect: []\n    };\n\n    var Color = function Color() {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var me = this;\n        if (\n            type(args[0]) === 'object' &&\n            args[0].constructor &&\n            args[0].constructor === this.constructor\n        ) {\n            // the argument is already a Color instance\n            return args[0];\n        }\n        // last argument could be the mode\n        var mode = last(args);\n        var autodetect = false;\n        if (!mode) {\n            autodetect = true;\n\n            if (!input.sorted) {\n                input.autodetect = input.autodetect.sort(function (a, b) { return b.p - a.p; });\n                input.sorted = true;\n            }\n\n            // auto-detect format\n            for (var i = 0, list = input.autodetect; i < list.length; i += 1) {\n                var chk = list[i];\n\n                mode = chk.test.apply(chk, args);\n                if (mode) { break; }\n            }\n        }\n        if (input.format[mode]) {\n            var rgb = input.format[mode].apply(\n                null,\n                autodetect ? args : args.slice(0, -1)\n            );\n            me._rgb = clip_rgb(rgb);\n        } else {\n            throw new Error('unknown format: ' + args);\n        }\n        // add alpha channel\n        if (me._rgb.length === 3) { me._rgb.push(1); }\n    };\n    Color.prototype.toString = function toString () {\n        if (type(this.hex) == 'function') { return this.hex(); }\n        return (\"[\" + (this._rgb.join(',')) + \"]\");\n    };\n\n    // this gets updated automatically\n    var version = '3.1.2';\n\n    var chroma = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args) ));\n    };\n\n    chroma.version = version;\n\n    var cmyk2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack(args, 'cmyk');\n        var c = args[0];\n        var m = args[1];\n        var y = args[2];\n        var k = args[3];\n        var alpha = args.length > 4 ? args[4] : 1;\n        if (k === 1) { return [0, 0, 0, alpha]; }\n        return [\n            c >= 1 ? 0 : 255 * (1 - c) * (1 - k), // r\n            m >= 1 ? 0 : 255 * (1 - m) * (1 - k), // g\n            y >= 1 ? 0 : 255 * (1 - y) * (1 - k), // b\n            alpha\n        ];\n    };\n\n    var max$2 = Math.max;\n\n    var rgb2cmyk = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        r = r / 255;\n        g = g / 255;\n        b = b / 255;\n        var k = 1 - max$2(r, max$2(g, b));\n        var f = k < 1 ? 1 / (1 - k) : 0;\n        var c = (1 - r - k) * f;\n        var m = (1 - g - k) * f;\n        var y = (1 - b - k) * f;\n        return [c, m, y, k];\n    };\n\n    Color.prototype.cmyk = function () {\n        return rgb2cmyk(this._rgb);\n    };\n\n    var cmyk = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['cmyk']) ));\n    };\n    Object.assign(chroma, { cmyk: cmyk });\n\n    input.format.cmyk = cmyk2rgb;\n\n    input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack(args, 'cmyk');\n            if (type(args) === 'array' && args.length === 4) {\n                return 'cmyk';\n            }\n        }\n    });\n\n    /*\n     * supported arguments:\n     * - hsl2css(h,s,l)\n     * - hsl2css(h,s,l,a)\n     * - hsl2css([h,s,l], mode)\n     * - hsl2css([h,s,l,a], mode)\n     * - hsl2css({h,s,l,a}, mode)\n     */\n    var hsl2css = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var hsla = unpack(args, 'hsla');\n        var mode = last(args) || 'lsa';\n        hsla[0] = rnd2(hsla[0] || 0) + 'deg';\n        hsla[1] = rnd2(hsla[1] * 100) + '%';\n        hsla[2] = rnd2(hsla[2] * 100) + '%';\n        if (mode === 'hsla' || (hsla.length > 3 && hsla[3] < 1)) {\n            hsla[3] = '/ ' + (hsla.length > 3 ? hsla[3] : 1);\n            mode = 'hsla';\n        } else {\n            hsla.length = 3;\n        }\n        return ((mode.substr(0, 3)) + \"(\" + (hsla.join(' ')) + \")\");\n    };\n\n    /*\n     * supported arguments:\n     * - rgb2hsl(r,g,b)\n     * - rgb2hsl(r,g,b,a)\n     * - rgb2hsl([r,g,b])\n     * - rgb2hsl([r,g,b,a])\n     * - rgb2hsl({r,g,b,a})\n     */\n    var rgb2hsl$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack(args, 'rgba');\n        var r = args[0];\n        var g = args[1];\n        var b = args[2];\n\n        r /= 255;\n        g /= 255;\n        b /= 255;\n\n        var minRgb = min$3(r, g, b);\n        var maxRgb = max$3(r, g, b);\n\n        var l = (maxRgb + minRgb) / 2;\n        var s, h;\n\n        if (maxRgb === minRgb) {\n            s = 0;\n            h = Number.NaN;\n        } else {\n            s =\n                l < 0.5\n                    ? (maxRgb - minRgb) / (maxRgb + minRgb)\n                    : (maxRgb - minRgb) / (2 - maxRgb - minRgb);\n        }\n\n        if (r == maxRgb) { h = (g - b) / (maxRgb - minRgb); }\n        else if (g == maxRgb) { h = 2 + (b - r) / (maxRgb - minRgb); }\n        else if (b == maxRgb) { h = 4 + (r - g) / (maxRgb - minRgb); }\n\n        h *= 60;\n        if (h < 0) { h += 360; }\n        if (args.length > 3 && args[3] !== undefined) { return [h, s, l, args[3]]; }\n        return [h, s, l];\n    };\n\n    /*\n     * supported arguments:\n     * - lab2css(l,a,b)\n     * - lab2css(l,a,b,alpha)\n     * - lab2css([l,a,b], mode)\n     * - lab2css([l,a,b,alpha], mode)\n     */\n    var lab2css = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var laba = unpack(args, 'lab');\n        var mode = last(args) || 'lab';\n        laba[0] = rnd2(laba[0]) + '%';\n        laba[1] = rnd2(laba[1]);\n        laba[2] = rnd2(laba[2]);\n        if (mode === 'laba' || (laba.length > 3 && laba[3] < 1)) {\n            laba[3] = '/ ' + (laba.length > 3 ? laba[3] : 1);\n        } else {\n            laba.length = 3;\n        }\n        return (\"lab(\" + (laba.join(' ')) + \")\");\n    };\n\n    var labConstants = {\n        // Corresponds roughly to RGB brighter/darker\n        Kn: 18,\n\n        // D65 standard referent\n        labWhitePoint: 'd65',\n        Xn: 0.95047,\n        Yn: 1,\n        Zn: 1.08883,\n\n        t0: 0.137931034, // 4 / 29\n        t1: 0.206896552, // 6 / 29\n        t2: 0.12841855, // 3 * t1 * t1\n        t3: 0.008856452, // t1 * t1 * t1,\n\n        kE: 216.0 / 24389.0,\n        kKE: 8.0,\n        kK: 24389.0 / 27.0,\n\n        RefWhiteRGB: {\n            // sRGB\n            X: 0.95047,\n            Y: 1,\n            Z: 1.08883\n        },\n\n        MtxRGB2XYZ: {\n            m00: 0.4124564390896922,\n            m01: 0.21267285140562253,\n            m02: 0.0193338955823293,\n            m10: 0.357576077643909,\n            m11: 0.715152155287818,\n            m12: 0.11919202588130297,\n            m20: 0.18043748326639894,\n            m21: 0.07217499330655958,\n            m22: 0.9503040785363679\n        },\n\n        MtxXYZ2RGB: {\n            m00: 3.2404541621141045,\n            m01: -0.9692660305051868,\n            m02: 0.055643430959114726,\n            m10: -1.5371385127977166,\n            m11: 1.8760108454466942,\n            m12: -0.2040259135167538,\n            m20: -0.498531409556016,\n            m21: 0.041556017530349834,\n            m22: 1.0572251882231791\n        },\n\n        // used in rgb2xyz\n        As: 0.9414285350000001,\n        Bs: 1.040417467,\n        Cs: 1.089532651,\n\n        MtxAdaptMa: {\n            m00: 0.8951,\n            m01: -0.7502,\n            m02: 0.0389,\n            m10: 0.2664,\n            m11: 1.7135,\n            m12: -0.0685,\n            m20: -0.1614,\n            m21: 0.0367,\n            m22: 1.0296\n        },\n\n        MtxAdaptMaI: {\n            m00: 0.9869929054667123,\n            m01: 0.43230526972339456,\n            m02: -0.008528664575177328,\n            m10: -0.14705425642099013,\n            m11: 0.5183602715367776,\n            m12: 0.04004282165408487,\n            m20: 0.15996265166373125,\n            m21: 0.0492912282128556,\n            m22: 0.9684866957875502\n        }\n    };\n\n    // taken from https://de.mathworks.com/help/images/ref/whitepoint.html\n    var ILLUMINANTS = new Map([\n        // ASTM E308-01\n        ['a', [1.0985, 0.35585]],\n        // Wyszecki & Stiles, p. 769\n        ['b', [1.0985, 0.35585]],\n        // C ASTM E308-01\n        ['c', [0.98074, 1.18232]],\n        // D50 (ASTM E308-01)\n        ['d50', [0.96422, 0.82521]],\n        // D55 (ASTM E308-01)\n        ['d55', [0.95682, 0.92149]],\n        // D65 (ASTM E308-01)\n        ['d65', [0.95047, 1.08883]],\n        // E (ASTM E308-01)\n        ['e', [1, 1, 1]],\n        // F2 (ASTM E308-01)\n        ['f2', [0.99186, 0.67393]],\n        // F7 (ASTM E308-01)\n        ['f7', [0.95041, 1.08747]],\n        // F11 (ASTM E308-01)\n        ['f11', [1.00962, 0.6435]],\n        ['icc', [0.96422, 0.82521]]\n    ]);\n\n    function setLabWhitePoint(name) {\n        var ill = ILLUMINANTS.get(String(name).toLowerCase());\n        if (!ill) {\n            throw new Error('unknown Lab illuminant ' + name);\n        }\n        labConstants.labWhitePoint = name;\n        labConstants.Xn = ill[0];\n        labConstants.Zn = ill[1];\n    }\n\n    function getLabWhitePoint() {\n        return labConstants.labWhitePoint;\n    }\n\n    var rgb2lab = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var rest = ref.slice(3);\n        var ref$1 = rgb2xyz(r, g, b);\n        var x = ref$1[0];\n        var y = ref$1[1];\n        var z = ref$1[2];\n        var ref$2 = xyz2lab(x, y, z);\n        var L = ref$2[0];\n        var a = ref$2[1];\n        var b_ = ref$2[2];\n        return [L, a, b_ ].concat( (rest.length > 0 && rest[0] < 1 ? [rest[0]] : []));\n    };\n\n    function xyz2lab(x, y, z) {\n        var Xn = labConstants.Xn;\n        var Yn = labConstants.Yn;\n        var Zn = labConstants.Zn;\n        var kE = labConstants.kE;\n        var kK = labConstants.kK;\n        var xr = x / Xn;\n        var yr = y / Yn;\n        var zr = z / Zn;\n\n        var fx = xr > kE ? Math.pow(xr, 1.0 / 3.0) : (kK * xr + 16.0) / 116.0;\n        var fy = yr > kE ? Math.pow(yr, 1.0 / 3.0) : (kK * yr + 16.0) / 116.0;\n        var fz = zr > kE ? Math.pow(zr, 1.0 / 3.0) : (kK * zr + 16.0) / 116.0;\n\n        return [116.0 * fy - 16.0, 500.0 * (fx - fy), 200.0 * (fy - fz)];\n    }\n\n    function gammaAdjustSRGB(companded) {\n        var sign = Math.sign(companded);\n        companded = Math.abs(companded);\n        var linear =\n            companded <= 0.04045\n                ? companded / 12.92\n                : Math.pow((companded + 0.055) / 1.055, 2.4);\n        return linear * sign;\n    }\n\n    var rgb2xyz = function (r, g, b) {\n        // normalize and gamma adjust\n        r = gammaAdjustSRGB(r / 255);\n        g = gammaAdjustSRGB(g / 255);\n        b = gammaAdjustSRGB(b / 255);\n\n        var MtxRGB2XYZ = labConstants.MtxRGB2XYZ;\n        var MtxAdaptMa = labConstants.MtxAdaptMa;\n        var MtxAdaptMaI = labConstants.MtxAdaptMaI;\n        var Xn = labConstants.Xn;\n        var Yn = labConstants.Yn;\n        var Zn = labConstants.Zn;\n        var As = labConstants.As;\n        var Bs = labConstants.Bs;\n        var Cs = labConstants.Cs;\n\n        var x = r * MtxRGB2XYZ.m00 + g * MtxRGB2XYZ.m10 + b * MtxRGB2XYZ.m20;\n        var y = r * MtxRGB2XYZ.m01 + g * MtxRGB2XYZ.m11 + b * MtxRGB2XYZ.m21;\n        var z = r * MtxRGB2XYZ.m02 + g * MtxRGB2XYZ.m12 + b * MtxRGB2XYZ.m22;\n\n        var Ad = Xn * MtxAdaptMa.m00 + Yn * MtxAdaptMa.m10 + Zn * MtxAdaptMa.m20;\n        var Bd = Xn * MtxAdaptMa.m01 + Yn * MtxAdaptMa.m11 + Zn * MtxAdaptMa.m21;\n        var Cd = Xn * MtxAdaptMa.m02 + Yn * MtxAdaptMa.m12 + Zn * MtxAdaptMa.m22;\n\n        var X = x * MtxAdaptMa.m00 + y * MtxAdaptMa.m10 + z * MtxAdaptMa.m20;\n        var Y = x * MtxAdaptMa.m01 + y * MtxAdaptMa.m11 + z * MtxAdaptMa.m21;\n        var Z = x * MtxAdaptMa.m02 + y * MtxAdaptMa.m12 + z * MtxAdaptMa.m22;\n\n        X *= Ad / As;\n        Y *= Bd / Bs;\n        Z *= Cd / Cs;\n\n        x = X * MtxAdaptMaI.m00 + Y * MtxAdaptMaI.m10 + Z * MtxAdaptMaI.m20;\n        y = X * MtxAdaptMaI.m01 + Y * MtxAdaptMaI.m11 + Z * MtxAdaptMaI.m21;\n        z = X * MtxAdaptMaI.m02 + Y * MtxAdaptMaI.m12 + Z * MtxAdaptMaI.m22;\n\n        return [x, y, z];\n    };\n\n    /*\n     * supported arguments:\n     * - lab2css(l,a,b)\n     * - lab2css(l,a,b,alpha)\n     * - lab2css([l,a,b], mode)\n     * - lab2css([l,a,b,alpha], mode)\n     */\n    var lch2css = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var lcha = unpack(args, 'lch');\n        var mode = last(args) || 'lab';\n        lcha[0] = rnd2(lcha[0]) + '%';\n        lcha[1] = rnd2(lcha[1]);\n        lcha[2] = isNaN(lcha[2]) ? 'none' : rnd2(lcha[2]) + 'deg'; // add deg unit to hue\n        if (mode === 'lcha' || (lcha.length > 3 && lcha[3] < 1)) {\n            lcha[3] = '/ ' + (lcha.length > 3 ? lcha[3] : 1);\n        } else {\n            lcha.length = 3;\n        }\n        return (\"lch(\" + (lcha.join(' ')) + \")\");\n    };\n\n    var sqrt$4 = Math.sqrt;\n    var atan2$2 = Math.atan2;\n    var round$5 = Math.round;\n\n    var lab2lch = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack(args, 'lab');\n        var l = ref[0];\n        var a = ref[1];\n        var b = ref[2];\n        var c = sqrt$4(a * a + b * b);\n        var h = (atan2$2(b, a) * RAD2DEG + 360) % 360;\n        if (round$5(c * 10000) === 0) { h = Number.NaN; }\n        return [l, c, h];\n    };\n\n    var rgb2lch = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var rest = ref.slice(3);\n        var ref$1 = rgb2lab(r, g, b);\n        var l = ref$1[0];\n        var a = ref$1[1];\n        var b_ = ref$1[2];\n        var ref$2 = lab2lch(l, a, b_);\n        var L = ref$2[0];\n        var c = ref$2[1];\n        var h = ref$2[2];\n        return [L, c, h ].concat( (rest.length > 0 && rest[0] < 1 ? [rest[0]] : []));\n    };\n\n    // from https://www.w3.org/TR/css-color-4/multiply-matrices.js\n    function multiplyMatrices(A, B) {\n        var m = A.length;\n\n        if (!Array.isArray(A[0])) {\n            // A is vector, convert to [[a, b, c, ...]]\n            A = [A];\n        }\n\n        if (!Array.isArray(B[0])) {\n            // B is vector, convert to [[a], [b], [c], ...]]\n            B = B.map(function (x) { return [x]; });\n        }\n\n        var p = B[0].length;\n        var B_cols = B[0].map(function (_, i) { return B.map(function (x) { return x[i]; }); }); // transpose B\n        var product = A.map(function (row) { return B_cols.map(function (col) {\n                if (!Array.isArray(row)) {\n                    return col.reduce(function (a, c) { return a + c * row; }, 0);\n                }\n\n                return row.reduce(function (a, c, i) { return a + c * (col[i] || 0); }, 0);\n            }); }\n        );\n\n        if (m === 1) {\n            product = product[0]; // Avoid [[a, b, c, ...]]\n        }\n\n        if (p === 1) {\n            return product.map(function (x) { return x[0]; }); // Avoid [[a], [b], [c], ...]]\n        }\n\n        return product;\n    }\n\n    var rgb2oklab = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var rest = ref.slice(3);\n        var xyz = rgb2xyz(r, g, b);\n        var oklab = XYZ_to_OKLab(xyz);\n        return oklab.concat( (rest.length > 0 && rest[0] < 1 ? [rest[0]] : []));\n    };\n\n    // from https://www.w3.org/TR/css-color-4/#color-conversion-code\n    function XYZ_to_OKLab(XYZ) {\n        // Given XYZ relative to D65, convert to OKLab\n        var XYZtoLMS = [\n            [0.819022437996703, 0.3619062600528904, -0.1288737815209879],\n            [0.0329836539323885, 0.9292868615863434, 0.0361446663506424],\n            [0.0481771893596242, 0.2642395317527308, 0.6335478284694309]\n        ];\n        var LMStoOKLab = [\n            [0.210454268309314, 0.7936177747023054, -0.0040720430116193],\n            [1.9779985324311684, -2.4285922420485799, 0.450593709617411],\n            [0.0259040424655478, 0.7827717124575296, -0.8086757549230774]\n        ];\n\n        var LMS = multiplyMatrices(XYZtoLMS, XYZ);\n        // JavaScript Math.cbrt returns a sign-matched cube root\n        // beware if porting to other languages\n        // especially if tempted to use a general power function\n        return multiplyMatrices(\n            LMStoOKLab,\n            LMS.map(function (c) { return Math.cbrt(c); })\n        );\n        // L in range [0,1]. For use in CSS, multiply by 100 and add a percent\n    }\n\n    var oklab2css = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var laba = unpack(args, 'lab');\n        laba[0] = rnd2(laba[0] * 100) + '%';\n        laba[1] = rnd3(laba[1]);\n        laba[2] = rnd3(laba[2]);\n        if (laba.length > 3 && laba[3] < 1) {\n            laba[3] = '/ ' + (laba.length > 3 ? laba[3] : 1);\n        } else {\n            laba.length = 3;\n        }\n        return (\"oklab(\" + (laba.join(' ')) + \")\");\n    };\n\n    var rgb2oklch = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var rest = ref.slice(3);\n        var ref$1 = rgb2oklab(r, g, b);\n        var l = ref$1[0];\n        var a = ref$1[1];\n        var b_ = ref$1[2];\n        var ref$2 = lab2lch(l, a, b_);\n        var L = ref$2[0];\n        var c = ref$2[1];\n        var h = ref$2[2];\n        return [L, c, h ].concat( (rest.length > 0 && rest[0] < 1 ? [rest[0]] : []));\n    };\n\n    var oklch2css = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var lcha = unpack(args, 'lch');\n        lcha[0] = rnd2(lcha[0] * 100) + '%';\n        lcha[1] = rnd3(lcha[1]);\n        lcha[2] = isNaN(lcha[2]) ? 'none' : rnd2(lcha[2]) + 'deg'; // add deg unit to hue\n        if (lcha.length > 3 && lcha[3] < 1) {\n            lcha[3] = '/ ' + (lcha.length > 3 ? lcha[3] : 1);\n        } else {\n            lcha.length = 3;\n        }\n        return (\"oklch(\" + (lcha.join(' ')) + \")\");\n    };\n\n    var round$4 = Math.round;\n\n    /*\n     * supported arguments:\n     * - rgb2css(r,g,b)\n     * - rgb2css(r,g,b,a)\n     * - rgb2css([r,g,b], mode)\n     * - rgb2css([r,g,b,a], mode)\n     * - rgb2css({r,g,b,a}, mode)\n     */\n    var rgb2css = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var rgba = unpack(args, 'rgba');\n        var mode = last(args) || 'rgb';\n        if (mode.substr(0, 3) === 'hsl') {\n            return hsl2css(rgb2hsl$1(rgba), mode);\n        }\n        if (mode.substr(0, 3) === 'lab') {\n            // change to D50 lab whitepoint since this is what W3C is using for CSS Lab colors\n            var prevWhitePoint = getLabWhitePoint();\n            setLabWhitePoint('d50');\n            var cssColor = lab2css(rgb2lab(rgba), mode);\n            setLabWhitePoint(prevWhitePoint);\n            return cssColor;\n        }\n        if (mode.substr(0, 3) === 'lch') {\n            // change to D50 lab whitepoint since this is what W3C is using for CSS Lab colors\n            var prevWhitePoint$1 = getLabWhitePoint();\n            setLabWhitePoint('d50');\n            var cssColor$1 = lch2css(rgb2lch(rgba), mode);\n            setLabWhitePoint(prevWhitePoint$1);\n            return cssColor$1;\n        }\n        if (mode.substr(0, 5) === 'oklab') {\n            return oklab2css(rgb2oklab(rgba));\n        }\n        if (mode.substr(0, 5) === 'oklch') {\n            return oklch2css(rgb2oklch(rgba));\n        }\n        rgba[0] = round$4(rgba[0]);\n        rgba[1] = round$4(rgba[1]);\n        rgba[2] = round$4(rgba[2]);\n        if (mode === 'rgba' || (rgba.length > 3 && rgba[3] < 1)) {\n            rgba[3] = '/ ' + (rgba.length > 3 ? rgba[3] : 1);\n            mode = 'rgba';\n        }\n        return ((mode.substr(0, 3)) + \"(\" + (rgba.slice(0, mode === 'rgb' ? 3 : 4).join(' ')) + \")\");\n    };\n\n    var hsl2rgb = function () {\n        var assign;\n\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n        args = unpack(args, 'hsl');\n        var h = args[0];\n        var s = args[1];\n        var l = args[2];\n        var r, g, b;\n        if (s === 0) {\n            r = g = b = l * 255;\n        } else {\n            var t3 = [0, 0, 0];\n            var c = [0, 0, 0];\n            var t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            var t1 = 2 * l - t2;\n            var h_ = h / 360;\n            t3[0] = h_ + 1 / 3;\n            t3[1] = h_;\n            t3[2] = h_ - 1 / 3;\n            for (var i = 0; i < 3; i++) {\n                if (t3[i] < 0) { t3[i] += 1; }\n                if (t3[i] > 1) { t3[i] -= 1; }\n                if (6 * t3[i] < 1) { c[i] = t1 + (t2 - t1) * 6 * t3[i]; }\n                else if (2 * t3[i] < 1) { c[i] = t2; }\n                else if (3 * t3[i] < 2) { c[i] = t1 + (t2 - t1) * (2 / 3 - t3[i]) * 6; }\n                else { c[i] = t1; }\n            }\n            (assign = [c[0] * 255, c[1] * 255, c[2] * 255], r = assign[0], g = assign[1], b = assign[2]);\n        }\n        if (args.length > 3) {\n            // keep alpha channel\n            return [r, g, b, args[3]];\n        }\n        return [r, g, b, 1];\n    };\n\n    /*\n     * L* [0..100]\n     * a [-100..100]\n     * b [-100..100]\n     */\n    var lab2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack(args, 'lab');\n        var L = args[0];\n        var a = args[1];\n        var b = args[2];\n        var ref = lab2xyz(L, a, b);\n        var x = ref[0];\n        var y = ref[1];\n        var z = ref[2];\n        var ref$1 = xyz2rgb(x, y, z);\n        var r = ref$1[0];\n        var g = ref$1[1];\n        var b_ = ref$1[2];\n        return [r, g, b_, args.length > 3 ? args[3] : 1];\n    };\n\n    var lab2xyz = function (L, a, b) {\n        var kE = labConstants.kE;\n        var kK = labConstants.kK;\n        var kKE = labConstants.kKE;\n        var Xn = labConstants.Xn;\n        var Yn = labConstants.Yn;\n        var Zn = labConstants.Zn;\n\n        var fy = (L + 16.0) / 116.0;\n        var fx = 0.002 * a + fy;\n        var fz = fy - 0.005 * b;\n\n        var fx3 = fx * fx * fx;\n        var fz3 = fz * fz * fz;\n\n        var xr = fx3 > kE ? fx3 : (116.0 * fx - 16.0) / kK;\n        var yr = L > kKE ? Math.pow((L + 16.0) / 116.0, 3.0) : L / kK;\n        var zr = fz3 > kE ? fz3 : (116.0 * fz - 16.0) / kK;\n\n        var x = xr * Xn;\n        var y = yr * Yn;\n        var z = zr * Zn;\n\n        return [x, y, z];\n    };\n\n    var compand = function (linear) {\n        /* sRGB */\n        var sign = Math.sign(linear);\n        linear = Math.abs(linear);\n        return (\n            (linear <= 0.0031308\n                ? linear * 12.92\n                : 1.055 * Math.pow(linear, 1.0 / 2.4) - 0.055) * sign\n        );\n    };\n\n    var xyz2rgb = function (x, y, z) {\n        var MtxAdaptMa = labConstants.MtxAdaptMa;\n        var MtxAdaptMaI = labConstants.MtxAdaptMaI;\n        var MtxXYZ2RGB = labConstants.MtxXYZ2RGB;\n        var RefWhiteRGB = labConstants.RefWhiteRGB;\n        var Xn = labConstants.Xn;\n        var Yn = labConstants.Yn;\n        var Zn = labConstants.Zn;\n\n        var As = Xn * MtxAdaptMa.m00 + Yn * MtxAdaptMa.m10 + Zn * MtxAdaptMa.m20;\n        var Bs = Xn * MtxAdaptMa.m01 + Yn * MtxAdaptMa.m11 + Zn * MtxAdaptMa.m21;\n        var Cs = Xn * MtxAdaptMa.m02 + Yn * MtxAdaptMa.m12 + Zn * MtxAdaptMa.m22;\n\n        var Ad =\n            RefWhiteRGB.X * MtxAdaptMa.m00 +\n            RefWhiteRGB.Y * MtxAdaptMa.m10 +\n            RefWhiteRGB.Z * MtxAdaptMa.m20;\n        var Bd =\n            RefWhiteRGB.X * MtxAdaptMa.m01 +\n            RefWhiteRGB.Y * MtxAdaptMa.m11 +\n            RefWhiteRGB.Z * MtxAdaptMa.m21;\n        var Cd =\n            RefWhiteRGB.X * MtxAdaptMa.m02 +\n            RefWhiteRGB.Y * MtxAdaptMa.m12 +\n            RefWhiteRGB.Z * MtxAdaptMa.m22;\n\n        var X1 =\n            (x * MtxAdaptMa.m00 + y * MtxAdaptMa.m10 + z * MtxAdaptMa.m20) *\n            (Ad / As);\n        var Y1 =\n            (x * MtxAdaptMa.m01 + y * MtxAdaptMa.m11 + z * MtxAdaptMa.m21) *\n            (Bd / Bs);\n        var Z1 =\n            (x * MtxAdaptMa.m02 + y * MtxAdaptMa.m12 + z * MtxAdaptMa.m22) *\n            (Cd / Cs);\n\n        var X2 =\n            X1 * MtxAdaptMaI.m00 + Y1 * MtxAdaptMaI.m10 + Z1 * MtxAdaptMaI.m20;\n        var Y2 =\n            X1 * MtxAdaptMaI.m01 + Y1 * MtxAdaptMaI.m11 + Z1 * MtxAdaptMaI.m21;\n        var Z2 =\n            X1 * MtxAdaptMaI.m02 + Y1 * MtxAdaptMaI.m12 + Z1 * MtxAdaptMaI.m22;\n\n        var r = compand(\n            X2 * MtxXYZ2RGB.m00 + Y2 * MtxXYZ2RGB.m10 + Z2 * MtxXYZ2RGB.m20\n        );\n        var g = compand(\n            X2 * MtxXYZ2RGB.m01 + Y2 * MtxXYZ2RGB.m11 + Z2 * MtxXYZ2RGB.m21\n        );\n        var b = compand(\n            X2 * MtxXYZ2RGB.m02 + Y2 * MtxXYZ2RGB.m12 + Z2 * MtxXYZ2RGB.m22\n        );\n\n        return [r * 255, g * 255, b * 255];\n    };\n\n    var sin$3 = Math.sin;\n    var cos$4 = Math.cos;\n\n    var lch2lab = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        /*\n        Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.\n        These formulas were invented by David Dalrymple to obtain maximum contrast without going\n        out of gamut if the parameters are in the range 0-1.\n\n        A saturation multiplier was added by Gregor Aisch\n        */\n        var ref = unpack(args, 'lch');\n        var l = ref[0];\n        var c = ref[1];\n        var h = ref[2];\n        if (isNaN(h)) { h = 0; }\n        h = h * DEG2RAD;\n        return [l, cos$4(h) * c, sin$3(h) * c];\n    };\n\n    var lch2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack(args, 'lch');\n        var l = args[0];\n        var c = args[1];\n        var h = args[2];\n        var ref = lch2lab(l, c, h);\n        var L = ref[0];\n        var a = ref[1];\n        var b_ = ref[2];\n        var ref$1 = lab2rgb(L, a, b_);\n        var r = ref$1[0];\n        var g = ref$1[1];\n        var b = ref$1[2];\n        return [r, g, b, args.length > 3 ? args[3] : 1];\n    };\n\n    var oklab2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack(args, 'lab');\n        var L = args[0];\n        var a = args[1];\n        var b = args[2];\n        var rest = args.slice(3);\n        var ref = OKLab_to_XYZ([L, a, b]);\n        var X = ref[0];\n        var Y = ref[1];\n        var Z = ref[2];\n        var ref$1 = xyz2rgb(X, Y, Z);\n        var r = ref$1[0];\n        var g = ref$1[1];\n        var b_ = ref$1[2];\n        return [r, g, b_ ].concat( (rest.length > 0 && rest[0] < 1 ? [rest[0]] : []));\n    };\n\n    // from https://www.w3.org/TR/css-color-4/#color-conversion-code\n    function OKLab_to_XYZ(OKLab) {\n        // Given OKLab, convert to XYZ relative to D65\n        var LMStoXYZ = [\n            [1.2268798758459243, -0.5578149944602171, 0.2813910456659647],\n            [-0.0405757452148008, 1.112286803280317, -0.0717110580655164],\n            [-0.0763729366746601, -0.4214933324022432, 1.5869240198367816]\n        ];\n        var OKLabtoLMS = [\n            [1.0, 0.3963377773761749, 0.2158037573099136],\n            [1.0, -0.1055613458156586, -0.0638541728258133],\n            [1.0, -0.0894841775298119, -1.2914855480194092]\n        ];\n\n        var LMSnl = multiplyMatrices(OKLabtoLMS, OKLab);\n        return multiplyMatrices(\n            LMStoXYZ,\n            LMSnl.map(function (c) { return Math.pow( c, 3 ); })\n        );\n    }\n\n    var oklch2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack(args, 'lch');\n        var l = args[0];\n        var c = args[1];\n        var h = args[2];\n        var rest = args.slice(3);\n        var ref = lch2lab(l, c, h);\n        var L = ref[0];\n        var a = ref[1];\n        var b_ = ref[2];\n        var ref$1 = oklab2rgb(L, a, b_);\n        var r = ref$1[0];\n        var g = ref$1[1];\n        var b = ref$1[2];\n        return [r, g, b ].concat( (rest.length > 0 && rest[0] < 1 ? [rest[0]] : []));\n    };\n\n    var INT_OR_PCT = /((?:-?\\d+)|(?:-?\\d+(?:\\.\\d+)?)%|none)/.source;\n    var FLOAT_OR_PCT = /((?:-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)%?)|none)/.source;\n    var PCT = /((?:-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)%)|none)/.source;\n    var RE_S = /\\s*/.source;\n    var SEP = /\\s+/.source;\n    var COMMA = /\\s*,\\s*/.source;\n    var ANLGE = /((?:-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:deg)?)|none)/.source;\n    var ALPHA = /\\s*(?:\\/\\s*((?:[01]|[01]?\\.\\d+)|\\d+(?:\\.\\d+)?%))?/.source;\n\n    // e.g. rgb(250 20 0), rgb(100% 50% 20%), rgb(100% 50% 20% / 0.5)\n    var RE_RGB = new RegExp(\n        '^rgba?\\\\(' +\n            RE_S +\n            [INT_OR_PCT, INT_OR_PCT, INT_OR_PCT].join(SEP) +\n            ALPHA +\n            '\\\\)$'\n    );\n    var RE_RGB_LEGACY = new RegExp(\n        '^rgb\\\\(' +\n            RE_S +\n            [INT_OR_PCT, INT_OR_PCT, INT_OR_PCT].join(COMMA) +\n            RE_S +\n            '\\\\)$'\n    );\n    var RE_RGBA_LEGACY = new RegExp(\n        '^rgba\\\\(' +\n            RE_S +\n            [INT_OR_PCT, INT_OR_PCT, INT_OR_PCT, FLOAT_OR_PCT].join(COMMA) +\n            RE_S +\n            '\\\\)$'\n    );\n\n    var RE_HSL = new RegExp(\n        '^hsla?\\\\(' + RE_S + [ANLGE, PCT, PCT].join(SEP) + ALPHA + '\\\\)$'\n    );\n    var RE_HSL_LEGACY = new RegExp(\n        '^hsl?\\\\(' + RE_S + [ANLGE, PCT, PCT].join(COMMA) + RE_S + '\\\\)$'\n    );\n    var RE_HSLA_LEGACY =\n        /^hsla\\(\\s*(-?\\d+(?:\\.\\d+)?),\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)$/;\n\n    var RE_LAB = new RegExp(\n        '^lab\\\\(' +\n            RE_S +\n            [FLOAT_OR_PCT, FLOAT_OR_PCT, FLOAT_OR_PCT].join(SEP) +\n            ALPHA +\n            '\\\\)$'\n    );\n    var RE_LCH = new RegExp(\n        '^lch\\\\(' +\n            RE_S +\n            [FLOAT_OR_PCT, FLOAT_OR_PCT, ANLGE].join(SEP) +\n            ALPHA +\n            '\\\\)$'\n    );\n    var RE_OKLAB = new RegExp(\n        '^oklab\\\\(' +\n            RE_S +\n            [FLOAT_OR_PCT, FLOAT_OR_PCT, FLOAT_OR_PCT].join(SEP) +\n            ALPHA +\n            '\\\\)$'\n    );\n    var RE_OKLCH = new RegExp(\n        '^oklch\\\\(' +\n            RE_S +\n            [FLOAT_OR_PCT, FLOAT_OR_PCT, ANLGE].join(SEP) +\n            ALPHA +\n            '\\\\)$'\n    );\n\n    var round$3 = Math.round;\n\n    var roundRGB = function (rgb) {\n        return rgb.map(function (v, i) { return (i <= 2 ? limit(round$3(v), 0, 255) : v); });\n    };\n\n    var percentToAbsolute = function (pct, min, max, signed) {\n        if ( min === void 0 ) min = 0;\n        if ( max === void 0 ) max = 100;\n        if ( signed === void 0 ) signed = false;\n\n        if (typeof pct === 'string' && pct.endsWith('%')) {\n            pct = parseFloat(pct.substring(0, pct.length - 1)) / 100;\n            if (signed) {\n                // signed percentages are in the range -100% to 100%\n                pct = min + (pct + 1) * 0.5 * (max - min);\n            } else {\n                pct = min + pct * (max - min);\n            }\n        }\n        return +pct;\n    };\n\n    var noneToValue = function (v, noneValue) {\n        return v === 'none' ? noneValue : v;\n    };\n\n    var css2rgb = function (css) {\n        css = css.toLowerCase().trim();\n\n        if (css === 'transparent') {\n            return [0, 0, 0, 0];\n        }\n\n        var m;\n\n        if (input.format.named) {\n            try {\n                return input.format.named(css);\n                // eslint-disable-next-line\n            } catch (e) {}\n        }\n\n        // rgb(250 20 0) or rgb(250,20,0)\n        if ((m = css.match(RE_RGB)) || (m = css.match(RE_RGB_LEGACY))) {\n            var rgb = m.slice(1, 4);\n            for (var i = 0; i < 3; i++) {\n                rgb[i] = +percentToAbsolute(noneToValue(rgb[i], 0), 0, 255);\n            }\n            rgb = roundRGB(rgb);\n            var alpha = m[4] !== undefined ? +percentToAbsolute(m[4], 0, 1) : 1;\n            rgb[3] = alpha; // default alpha\n            return rgb;\n        }\n\n        // rgba(250,20,0,0.4)\n        if ((m = css.match(RE_RGBA_LEGACY))) {\n            var rgb$1 = m.slice(1, 5);\n            for (var i$1 = 0; i$1 < 4; i$1++) {\n                rgb$1[i$1] = +percentToAbsolute(rgb$1[i$1], 0, 255);\n            }\n            return rgb$1;\n        }\n\n        // hsl(0,100%,50%)\n        if ((m = css.match(RE_HSL)) || (m = css.match(RE_HSL_LEGACY))) {\n            var hsl = m.slice(1, 4);\n            hsl[0] = +noneToValue(hsl[0].replace('deg', ''), 0);\n            hsl[1] = +percentToAbsolute(noneToValue(hsl[1], 0), 0, 100) * 0.01;\n            hsl[2] = +percentToAbsolute(noneToValue(hsl[2], 0), 0, 100) * 0.01;\n            var rgb$2 = roundRGB(hsl2rgb(hsl));\n            var alpha$1 = m[4] !== undefined ? +percentToAbsolute(m[4], 0, 1) : 1;\n            rgb$2[3] = alpha$1;\n            return rgb$2;\n        }\n\n        // hsla(0,100%,50%,0.5)\n        if ((m = css.match(RE_HSLA_LEGACY))) {\n            var hsl$1 = m.slice(1, 4);\n            hsl$1[1] *= 0.01;\n            hsl$1[2] *= 0.01;\n            var rgb$3 = hsl2rgb(hsl$1);\n            for (var i$2 = 0; i$2 < 3; i$2++) {\n                rgb$3[i$2] = round$3(rgb$3[i$2]);\n            }\n            rgb$3[3] = +m[4]; // default alpha = 1\n            return rgb$3;\n        }\n\n        if ((m = css.match(RE_LAB))) {\n            var lab = m.slice(1, 4);\n            lab[0] = percentToAbsolute(noneToValue(lab[0], 0), 0, 100);\n            lab[1] = percentToAbsolute(noneToValue(lab[1], 0), -125, 125, true);\n            lab[2] = percentToAbsolute(noneToValue(lab[2], 0), -125, 125, true);\n            // convert to D50 Lab whitepoint\n            var wp = getLabWhitePoint();\n            setLabWhitePoint('d50');\n            var rgb$4 = roundRGB(lab2rgb(lab));\n            // convert back to original Lab whitepoint\n            setLabWhitePoint(wp);\n            var alpha$2 = m[4] !== undefined ? +percentToAbsolute(m[4], 0, 1) : 1;\n            rgb$4[3] = alpha$2;\n            return rgb$4;\n        }\n\n        if ((m = css.match(RE_LCH))) {\n            var lch = m.slice(1, 4);\n            lch[0] = percentToAbsolute(lch[0], 0, 100);\n            lch[1] = percentToAbsolute(noneToValue(lch[1], 0), 0, 150, false);\n            lch[2] = +noneToValue(lch[2].replace('deg', ''), 0);\n            // convert to D50 Lab whitepoint\n            var wp$1 = getLabWhitePoint();\n            setLabWhitePoint('d50');\n            var rgb$5 = roundRGB(lch2rgb(lch));\n            // convert back to original Lab whitepoint\n            setLabWhitePoint(wp$1);\n            var alpha$3 = m[4] !== undefined ? +percentToAbsolute(m[4], 0, 1) : 1;\n            rgb$5[3] = alpha$3;\n            return rgb$5;\n        }\n\n        if ((m = css.match(RE_OKLAB))) {\n            var oklab = m.slice(1, 4);\n            oklab[0] = percentToAbsolute(noneToValue(oklab[0], 0), 0, 1);\n            oklab[1] = percentToAbsolute(noneToValue(oklab[1], 0), -0.4, 0.4, true);\n            oklab[2] = percentToAbsolute(noneToValue(oklab[2], 0), -0.4, 0.4, true);\n            var rgb$6 = roundRGB(oklab2rgb(oklab));\n            var alpha$4 = m[4] !== undefined ? +percentToAbsolute(m[4], 0, 1) : 1;\n            rgb$6[3] = alpha$4;\n            return rgb$6;\n        }\n\n        if ((m = css.match(RE_OKLCH))) {\n            var oklch = m.slice(1, 4);\n            oklch[0] = percentToAbsolute(noneToValue(oklch[0], 0), 0, 1);\n            oklch[1] = percentToAbsolute(noneToValue(oklch[1], 0), 0, 0.4, false);\n            oklch[2] = +noneToValue(oklch[2].replace('deg', ''), 0);\n            var rgb$7 = roundRGB(oklch2rgb(oklch));\n            var alpha$5 = m[4] !== undefined ? +percentToAbsolute(m[4], 0, 1) : 1;\n            rgb$7[3] = alpha$5;\n            return rgb$7;\n        }\n    };\n\n    css2rgb.test = function (s) {\n        return (\n            // modern\n            RE_RGB.test(s) ||\n            RE_HSL.test(s) ||\n            RE_LAB.test(s) ||\n            RE_LCH.test(s) ||\n            RE_OKLAB.test(s) ||\n            RE_OKLCH.test(s) ||\n            // legacy\n            RE_RGB_LEGACY.test(s) ||\n            RE_RGBA_LEGACY.test(s) ||\n            RE_HSL_LEGACY.test(s) ||\n            RE_HSLA_LEGACY.test(s) ||\n            s === 'transparent'\n        );\n    };\n\n    Color.prototype.css = function (mode) {\n        return rgb2css(this._rgb, mode);\n    };\n\n    var css = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['css']) ));\n    };\n    chroma.css = css;\n\n    input.format.css = css2rgb;\n\n    input.autodetect.push({\n        p: 5,\n        test: function (h) {\n            var rest = [], len = arguments.length - 1;\n            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];\n\n            if (!rest.length && type(h) === 'string' && css2rgb.test(h)) {\n                return 'css';\n            }\n        }\n    });\n\n    input.format.gl = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var rgb = unpack(args, 'rgba');\n        rgb[0] *= 255;\n        rgb[1] *= 255;\n        rgb[2] *= 255;\n        return rgb;\n    };\n\n    var gl = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['gl']) ));\n    };\n    chroma.gl = gl;\n\n    Color.prototype.gl = function () {\n        var rgb = this._rgb;\n        return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255, rgb[3]];\n    };\n\n    var floor$3 = Math.floor;\n\n    /*\n     * this is basically just HSV with some minor tweaks\n     *\n     * hue.. [0..360]\n     * chroma .. [0..1]\n     * grayness .. [0..1]\n     */\n\n    var hcg2rgb = function () {\n        var assign, assign$1, assign$2, assign$3, assign$4, assign$5;\n\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n        args = unpack(args, 'hcg');\n        var h = args[0];\n        var c = args[1];\n        var _g = args[2];\n        var r, g, b;\n        _g = _g * 255;\n        var _c = c * 255;\n        if (c === 0) {\n            r = g = b = _g;\n        } else {\n            if (h === 360) { h = 0; }\n            if (h > 360) { h -= 360; }\n            if (h < 0) { h += 360; }\n            h /= 60;\n            var i = floor$3(h);\n            var f = h - i;\n            var p = _g * (1 - c);\n            var q = p + _c * (1 - f);\n            var t = p + _c * f;\n            var v = p + _c;\n            switch (i) {\n                case 0:\n                    (assign = [v, t, p], r = assign[0], g = assign[1], b = assign[2]);\n                    break;\n                case 1:\n                    (assign$1 = [q, v, p], r = assign$1[0], g = assign$1[1], b = assign$1[2]);\n                    break;\n                case 2:\n                    (assign$2 = [p, v, t], r = assign$2[0], g = assign$2[1], b = assign$2[2]);\n                    break;\n                case 3:\n                    (assign$3 = [p, q, v], r = assign$3[0], g = assign$3[1], b = assign$3[2]);\n                    break;\n                case 4:\n                    (assign$4 = [t, p, v], r = assign$4[0], g = assign$4[1], b = assign$4[2]);\n                    break;\n                case 5:\n                    (assign$5 = [v, p, q], r = assign$5[0], g = assign$5[1], b = assign$5[2]);\n                    break;\n            }\n        }\n        return [r, g, b, args.length > 3 ? args[3] : 1];\n    };\n\n    var rgb2hcg = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var minRgb = min$3(r, g, b);\n        var maxRgb = max$3(r, g, b);\n        var delta = maxRgb - minRgb;\n        var c = (delta * 100) / 255;\n        var _g = (minRgb / (255 - delta)) * 100;\n        var h;\n        if (delta === 0) {\n            h = Number.NaN;\n        } else {\n            if (r === maxRgb) { h = (g - b) / delta; }\n            if (g === maxRgb) { h = 2 + (b - r) / delta; }\n            if (b === maxRgb) { h = 4 + (r - g) / delta; }\n            h *= 60;\n            if (h < 0) { h += 360; }\n        }\n        return [h, c, _g];\n    };\n\n    Color.prototype.hcg = function () {\n        return rgb2hcg(this._rgb);\n    };\n\n    var hcg$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['hcg']) ));\n    };\n    chroma.hcg = hcg$1;\n\n    input.format.hcg = hcg2rgb;\n\n    input.autodetect.push({\n        p: 1,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack(args, 'hcg');\n            if (type(args) === 'array' && args.length === 3) {\n                return 'hcg';\n            }\n        }\n    });\n\n    var RE_HEX = /^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n    var RE_HEXA = /^#?([A-Fa-f0-9]{8}|[A-Fa-f0-9]{4})$/;\n\n    var hex2rgb = function (hex) {\n        if (hex.match(RE_HEX)) {\n            // remove optional leading #\n            if (hex.length === 4 || hex.length === 7) {\n                hex = hex.substr(1);\n            }\n            // expand short-notation to full six-digit\n            if (hex.length === 3) {\n                hex = hex.split('');\n                hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n            }\n            var u = parseInt(hex, 16);\n            var r = u >> 16;\n            var g = (u >> 8) & 0xff;\n            var b = u & 0xff;\n            return [r, g, b, 1];\n        }\n\n        // match rgba hex format, eg #FF000077\n        if (hex.match(RE_HEXA)) {\n            if (hex.length === 5 || hex.length === 9) {\n                // remove optional leading #\n                hex = hex.substr(1);\n            }\n            // expand short-notation to full eight-digit\n            if (hex.length === 4) {\n                hex = hex.split('');\n                hex =\n                    hex[0] +\n                    hex[0] +\n                    hex[1] +\n                    hex[1] +\n                    hex[2] +\n                    hex[2] +\n                    hex[3] +\n                    hex[3];\n            }\n            var u$1 = parseInt(hex, 16);\n            var r$1 = (u$1 >> 24) & 0xff;\n            var g$1 = (u$1 >> 16) & 0xff;\n            var b$1 = (u$1 >> 8) & 0xff;\n            var a = Math.round(((u$1 & 0xff) / 0xff) * 100) / 100;\n            return [r$1, g$1, b$1, a];\n        }\n\n        // we used to check for css colors here\n        // if _input.css? and rgb = _input.css hex\n        //     return rgb\n\n        throw new Error((\"unknown hex color: \" + hex));\n    };\n\n    var round$2 = Math.round;\n\n    var rgb2hex = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack(args, 'rgba');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        var a = ref[3];\n        var mode = last(args) || 'auto';\n        if (a === undefined) { a = 1; }\n        if (mode === 'auto') {\n            mode = a < 1 ? 'rgba' : 'rgb';\n        }\n        r = round$2(r);\n        g = round$2(g);\n        b = round$2(b);\n        var u = (r << 16) | (g << 8) | b;\n        var str = '000000' + u.toString(16); //#.toUpperCase();\n        str = str.substr(str.length - 6);\n        var hxa = '0' + round$2(a * 255).toString(16);\n        hxa = hxa.substr(hxa.length - 2);\n        switch (mode.toLowerCase()) {\n            case 'rgba':\n                return (\"#\" + str + hxa);\n            case 'argb':\n                return (\"#\" + hxa + str);\n            default:\n                return (\"#\" + str);\n        }\n    };\n\n    Color.prototype.hex = function (mode) {\n        return rgb2hex(this._rgb, mode);\n    };\n\n    var hex = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['hex']) ));\n    };\n    chroma.hex = hex;\n\n    input.format.hex = hex2rgb;\n    input.autodetect.push({\n        p: 4,\n        test: function (h) {\n            var rest = [], len = arguments.length - 1;\n            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];\n\n            if (\n                !rest.length &&\n                type(h) === 'string' &&\n                [3, 4, 5, 6, 7, 8, 9].indexOf(h.length) >= 0\n            ) {\n                return 'hex';\n            }\n        }\n    });\n\n    var cos$3 = Math.cos;\n\n    /*\n     * hue [0..360]\n     * saturation [0..1]\n     * intensity [0..1]\n     */\n    var hsi2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        /*\n        borrowed from here:\n        http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp\n        */\n        args = unpack(args, 'hsi');\n        var h = args[0];\n        var s = args[1];\n        var i = args[2];\n        var r, g, b;\n\n        if (isNaN(h)) { h = 0; }\n        if (isNaN(s)) { s = 0; }\n        // normalize hue\n        if (h > 360) { h -= 360; }\n        if (h < 0) { h += 360; }\n        h /= 360;\n        if (h < 1 / 3) {\n            b = (1 - s) / 3;\n            r = (1 + (s * cos$3(TWOPI * h)) / cos$3(PITHIRD - TWOPI * h)) / 3;\n            g = 1 - (b + r);\n        } else if (h < 2 / 3) {\n            h -= 1 / 3;\n            r = (1 - s) / 3;\n            g = (1 + (s * cos$3(TWOPI * h)) / cos$3(PITHIRD - TWOPI * h)) / 3;\n            b = 1 - (r + g);\n        } else {\n            h -= 2 / 3;\n            g = (1 - s) / 3;\n            b = (1 + (s * cos$3(TWOPI * h)) / cos$3(PITHIRD - TWOPI * h)) / 3;\n            r = 1 - (g + b);\n        }\n        r = limit(i * r * 3);\n        g = limit(i * g * 3);\n        b = limit(i * b * 3);\n        return [r * 255, g * 255, b * 255, args.length > 3 ? args[3] : 1];\n    };\n\n    var min$2 = Math.min;\n    var sqrt$3 = Math.sqrt;\n    var acos = Math.acos;\n\n    var rgb2hsi = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        /*\n        borrowed from here:\n        http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp\n        */\n        var ref = unpack(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        r /= 255;\n        g /= 255;\n        b /= 255;\n        var h;\n        var min_ = min$2(r, g, b);\n        var i = (r + g + b) / 3;\n        var s = i > 0 ? 1 - min_ / i : 0;\n        if (s === 0) {\n            h = NaN;\n        } else {\n            h = (r - g + (r - b)) / 2;\n            h /= sqrt$3((r - g) * (r - g) + (r - b) * (g - b));\n            h = acos(h);\n            if (b > g) {\n                h = TWOPI - h;\n            }\n            h /= TWOPI;\n        }\n        return [h * 360, s, i];\n    };\n\n    Color.prototype.hsi = function () {\n        return rgb2hsi(this._rgb);\n    };\n\n    var hsi$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['hsi']) ));\n    };\n    chroma.hsi = hsi$1;\n\n    input.format.hsi = hsi2rgb;\n\n    input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack(args, 'hsi');\n            if (type(args) === 'array' && args.length === 3) {\n                return 'hsi';\n            }\n        }\n    });\n\n    Color.prototype.hsl = function () {\n        return rgb2hsl$1(this._rgb);\n    };\n\n    var hsl$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['hsl']) ));\n    };\n    chroma.hsl = hsl$1;\n\n    input.format.hsl = hsl2rgb;\n\n    input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack(args, 'hsl');\n            if (type(args) === 'array' && args.length === 3) {\n                return 'hsl';\n            }\n        }\n    });\n\n    var floor$2 = Math.floor;\n\n    var hsv2rgb = function () {\n        var assign, assign$1, assign$2, assign$3, assign$4, assign$5;\n\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n        args = unpack(args, 'hsv');\n        var h = args[0];\n        var s = args[1];\n        var v = args[2];\n        var r, g, b;\n        v *= 255;\n        if (s === 0) {\n            r = g = b = v;\n        } else {\n            if (h === 360) { h = 0; }\n            if (h > 360) { h -= 360; }\n            if (h < 0) { h += 360; }\n            h /= 60;\n\n            var i = floor$2(h);\n            var f = h - i;\n            var p = v * (1 - s);\n            var q = v * (1 - s * f);\n            var t = v * (1 - s * (1 - f));\n\n            switch (i) {\n                case 0:\n                    (assign = [v, t, p], r = assign[0], g = assign[1], b = assign[2]);\n                    break;\n                case 1:\n                    (assign$1 = [q, v, p], r = assign$1[0], g = assign$1[1], b = assign$1[2]);\n                    break;\n                case 2:\n                    (assign$2 = [p, v, t], r = assign$2[0], g = assign$2[1], b = assign$2[2]);\n                    break;\n                case 3:\n                    (assign$3 = [p, q, v], r = assign$3[0], g = assign$3[1], b = assign$3[2]);\n                    break;\n                case 4:\n                    (assign$4 = [t, p, v], r = assign$4[0], g = assign$4[1], b = assign$4[2]);\n                    break;\n                case 5:\n                    (assign$5 = [v, p, q], r = assign$5[0], g = assign$5[1], b = assign$5[2]);\n                    break;\n            }\n        }\n        return [r, g, b, args.length > 3 ? args[3] : 1];\n    };\n\n    var min$1 = Math.min;\n    var max$1 = Math.max;\n\n    /*\n     * supported arguments:\n     * - rgb2hsv(r,g,b)\n     * - rgb2hsv([r,g,b])\n     * - rgb2hsv({r,g,b})\n     */\n    var rgb2hsl = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        args = unpack(args, 'rgb');\n        var r = args[0];\n        var g = args[1];\n        var b = args[2];\n        var min_ = min$1(r, g, b);\n        var max_ = max$1(r, g, b);\n        var delta = max_ - min_;\n        var h, s, v;\n        v = max_ / 255.0;\n        if (max_ === 0) {\n            h = Number.NaN;\n            s = 0;\n        } else {\n            s = delta / max_;\n            if (r === max_) { h = (g - b) / delta; }\n            if (g === max_) { h = 2 + (b - r) / delta; }\n            if (b === max_) { h = 4 + (r - g) / delta; }\n            h *= 60;\n            if (h < 0) { h += 360; }\n        }\n        return [h, s, v];\n    };\n\n    Color.prototype.hsv = function () {\n        return rgb2hsl(this._rgb);\n    };\n\n    var hsv$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['hsv']) ));\n    };\n    chroma.hsv = hsv$1;\n\n    input.format.hsv = hsv2rgb;\n\n    input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack(args, 'hsv');\n            if (type(args) === 'array' && args.length === 3) {\n                return 'hsv';\n            }\n        }\n    });\n\n    Color.prototype.lab = function () {\n        return rgb2lab(this._rgb);\n    };\n\n    var lab$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['lab']) ));\n    };\n    Object.assign(chroma, { lab: lab$1, getLabWhitePoint: getLabWhitePoint, setLabWhitePoint: setLabWhitePoint });\n\n    input.format.lab = lab2rgb;\n\n    input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack(args, 'lab');\n            if (type(args) === 'array' && args.length === 3) {\n                return 'lab';\n            }\n        }\n    });\n\n    var hcl2rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var hcl = reverse3(unpack(args, 'hcl'));\n        return lch2rgb.apply(void 0, hcl);\n    };\n\n    Color.prototype.lch = function () {\n        return rgb2lch(this._rgb);\n    };\n    Color.prototype.hcl = function () {\n        return reverse3(rgb2lch(this._rgb));\n    };\n\n    var lch$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['lch']) ));\n    };\n    var hcl = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['hcl']) ));\n    };\n\n    Object.assign(chroma, { lch: lch$1, hcl: hcl });\n\n    input.format.lch = lch2rgb;\n    input.format.hcl = hcl2rgb;\n    ['lch', 'hcl'].forEach(function (m) { return input.autodetect.push({\n            p: 2,\n            test: function () {\n                var args = [], len = arguments.length;\n                while ( len-- ) args[ len ] = arguments[ len ];\n\n                args = unpack(args, m);\n                if (type(args) === 'array' && args.length === 3) {\n                    return m;\n                }\n            }\n        }); }\n    );\n\n    var num2rgb = function (num) {\n        if (type(num) == 'number' && num >= 0 && num <= 0xffffff) {\n            var r = num >> 16;\n            var g = (num >> 8) & 0xff;\n            var b = num & 0xff;\n            return [r, g, b, 1];\n        }\n        throw new Error('unknown num color: ' + num);\n    };\n\n    var rgb2num = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var ref = unpack(args, 'rgb');\n        var r = ref[0];\n        var g = ref[1];\n        var b = ref[2];\n        return (r << 16) + (g << 8) + b;\n    };\n\n    Color.prototype.num = function () {\n        return rgb2num(this._rgb);\n    };\n\n    var num$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['num']) ));\n    };\n\n    Object.assign(chroma, { num: num$1 });\n\n    input.format.num = num2rgb;\n\n    input.autodetect.push({\n        p: 5,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            if (\n                args.length === 1 &&\n                type(args[0]) === 'number' &&\n                args[0] >= 0 &&\n                args[0] <= 0xffffff\n            ) {\n                return 'num';\n            }\n        }\n    });\n\n    var round$1 = Math.round;\n\n    Color.prototype.rgb = function (rnd) {\n        if ( rnd === void 0 ) rnd = true;\n\n        if (rnd === false) { return this._rgb.slice(0, 3); }\n        return this._rgb.slice(0, 3).map(round$1);\n    };\n\n    Color.prototype.rgba = function (rnd) {\n        if ( rnd === void 0 ) rnd = true;\n\n        return this._rgb.slice(0, 4).map(function (v, i) {\n            return i < 3 ? (rnd === false ? v : round$1(v)) : v;\n        });\n    };\n\n    var rgb$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['rgb']) ));\n    };\n    Object.assign(chroma, { rgb: rgb$1 });\n\n    input.format.rgb = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var rgba = unpack(args, 'rgba');\n        if (rgba[3] === undefined) { rgba[3] = 1; }\n        return rgba;\n    };\n\n    input.autodetect.push({\n        p: 3,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack(args, 'rgba');\n            if (\n                type(args) === 'array' &&\n                (args.length === 3 ||\n                    (args.length === 4 &&\n                        type(args[3]) == 'number' &&\n                        args[3] >= 0 &&\n                        args[3] <= 1))\n            ) {\n                return 'rgb';\n            }\n        }\n    });\n\n    /*\n     * Based on implementation by Neil Bartlett\n     * https://github.com/neilbartlett/color-temperature\n     */\n\n    var log$1 = Math.log;\n\n    var temperature2rgb = function (kelvin) {\n        var temp = kelvin / 100;\n        var r, g, b;\n        if (temp < 66) {\n            r = 255;\n            g =\n                temp < 6\n                    ? 0\n                    : -155.25485562709179 -\n                      0.44596950469579133 * (g = temp - 2) +\n                      104.49216199393888 * log$1(g);\n            b =\n                temp < 20\n                    ? 0\n                    : -254.76935184120902 +\n                      0.8274096064007395 * (b = temp - 10) +\n                      115.67994401066147 * log$1(b);\n        } else {\n            r =\n                351.97690566805693 +\n                0.114206453784165 * (r = temp - 55) -\n                40.25366309332127 * log$1(r);\n            g =\n                325.4494125711974 +\n                0.07943456536662342 * (g = temp - 50) -\n                28.0852963507957 * log$1(g);\n            b = 255;\n        }\n        return [r, g, b, 1];\n    };\n\n    /*\n     * Based on implementation by Neil Bartlett\n     * https://github.com/neilbartlett/color-temperature\n     **/\n\n    var round = Math.round;\n\n    var rgb2temperature = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var rgb = unpack(args, 'rgb');\n        var r = rgb[0],\n            b = rgb[2];\n        var minTemp = 1000;\n        var maxTemp = 40000;\n        var eps = 0.4;\n        var temp;\n        while (maxTemp - minTemp > eps) {\n            temp = (maxTemp + minTemp) * 0.5;\n            var rgb$1 = temperature2rgb(temp);\n            if (rgb$1[2] / rgb$1[0] >= b / r) {\n                maxTemp = temp;\n            } else {\n                minTemp = temp;\n            }\n        }\n        return round(temp);\n    };\n\n    Color.prototype.temp =\n        Color.prototype.kelvin =\n        Color.prototype.temperature =\n            function () {\n                return rgb2temperature(this._rgb);\n            };\n\n    var temp = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['temp']) ));\n    };\n    Object.assign(chroma, { temp: temp, kelvin: temp, temperature: temp });\n\n    input.format.temp =\n        input.format.kelvin =\n        input.format.temperature =\n            temperature2rgb;\n\n    Color.prototype.oklab = function () {\n        return rgb2oklab(this._rgb);\n    };\n\n    var oklab$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['oklab']) ));\n    };\n    Object.assign(chroma, { oklab: oklab$1 });\n\n    input.format.oklab = oklab2rgb;\n\n    input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack(args, 'oklab');\n            if (type(args) === 'array' && args.length === 3) {\n                return 'oklab';\n            }\n        }\n    });\n\n    Color.prototype.oklch = function () {\n        return rgb2oklch(this._rgb);\n    };\n\n    var oklch$1 = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        return new (Function.prototype.bind.apply( Color, [ null ].concat( args, ['oklch']) ));\n    };\n    Object.assign(chroma, { oklch: oklch$1 });\n\n    input.format.oklch = oklch2rgb;\n\n    input.autodetect.push({\n        p: 2,\n        test: function () {\n            var args = [], len = arguments.length;\n            while ( len-- ) args[ len ] = arguments[ len ];\n\n            args = unpack(args, 'oklch');\n            if (type(args) === 'array' && args.length === 3) {\n                return 'oklch';\n            }\n        }\n    });\n\n    /**\n    \tX11 color names\n\n    \thttp://www.w3.org/TR/css3-color/#svg-color\n    */\n\n    var w3cx11 = {\n        aliceblue: '#f0f8ff',\n        antiquewhite: '#faebd7',\n        aqua: '#00ffff',\n        aquamarine: '#7fffd4',\n        azure: '#f0ffff',\n        beige: '#f5f5dc',\n        bisque: '#ffe4c4',\n        black: '#000000',\n        blanchedalmond: '#ffebcd',\n        blue: '#0000ff',\n        blueviolet: '#8a2be2',\n        brown: '#a52a2a',\n        burlywood: '#deb887',\n        cadetblue: '#5f9ea0',\n        chartreuse: '#7fff00',\n        chocolate: '#d2691e',\n        coral: '#ff7f50',\n        cornflowerblue: '#6495ed',\n        cornsilk: '#fff8dc',\n        crimson: '#dc143c',\n        cyan: '#00ffff',\n        darkblue: '#00008b',\n        darkcyan: '#008b8b',\n        darkgoldenrod: '#b8860b',\n        darkgray: '#a9a9a9',\n        darkgreen: '#006400',\n        darkgrey: '#a9a9a9',\n        darkkhaki: '#bdb76b',\n        darkmagenta: '#8b008b',\n        darkolivegreen: '#556b2f',\n        darkorange: '#ff8c00',\n        darkorchid: '#9932cc',\n        darkred: '#8b0000',\n        darksalmon: '#e9967a',\n        darkseagreen: '#8fbc8f',\n        darkslateblue: '#483d8b',\n        darkslategray: '#2f4f4f',\n        darkslategrey: '#2f4f4f',\n        darkturquoise: '#00ced1',\n        darkviolet: '#9400d3',\n        deeppink: '#ff1493',\n        deepskyblue: '#00bfff',\n        dimgray: '#696969',\n        dimgrey: '#696969',\n        dodgerblue: '#1e90ff',\n        firebrick: '#b22222',\n        floralwhite: '#fffaf0',\n        forestgreen: '#228b22',\n        fuchsia: '#ff00ff',\n        gainsboro: '#dcdcdc',\n        ghostwhite: '#f8f8ff',\n        gold: '#ffd700',\n        goldenrod: '#daa520',\n        gray: '#808080',\n        green: '#008000',\n        greenyellow: '#adff2f',\n        grey: '#808080',\n        honeydew: '#f0fff0',\n        hotpink: '#ff69b4',\n        indianred: '#cd5c5c',\n        indigo: '#4b0082',\n        ivory: '#fffff0',\n        khaki: '#f0e68c',\n        laserlemon: '#ffff54',\n        lavender: '#e6e6fa',\n        lavenderblush: '#fff0f5',\n        lawngreen: '#7cfc00',\n        lemonchiffon: '#fffacd',\n        lightblue: '#add8e6',\n        lightcoral: '#f08080',\n        lightcyan: '#e0ffff',\n        lightgoldenrod: '#fafad2',\n        lightgoldenrodyellow: '#fafad2',\n        lightgray: '#d3d3d3',\n        lightgreen: '#90ee90',\n        lightgrey: '#d3d3d3',\n        lightpink: '#ffb6c1',\n        lightsalmon: '#ffa07a',\n        lightseagreen: '#20b2aa',\n        lightskyblue: '#87cefa',\n        lightslategray: '#778899',\n        lightslategrey: '#778899',\n        lightsteelblue: '#b0c4de',\n        lightyellow: '#ffffe0',\n        lime: '#00ff00',\n        limegreen: '#32cd32',\n        linen: '#faf0e6',\n        magenta: '#ff00ff',\n        maroon: '#800000',\n        maroon2: '#7f0000',\n        maroon3: '#b03060',\n        mediumaquamarine: '#66cdaa',\n        mediumblue: '#0000cd',\n        mediumorchid: '#ba55d3',\n        mediumpurple: '#9370db',\n        mediumseagreen: '#3cb371',\n        mediumslateblue: '#7b68ee',\n        mediumspringgreen: '#00fa9a',\n        mediumturquoise: '#48d1cc',\n        mediumvioletred: '#c71585',\n        midnightblue: '#191970',\n        mintcream: '#f5fffa',\n        mistyrose: '#ffe4e1',\n        moccasin: '#ffe4b5',\n        navajowhite: '#ffdead',\n        navy: '#000080',\n        oldlace: '#fdf5e6',\n        olive: '#808000',\n        olivedrab: '#6b8e23',\n        orange: '#ffa500',\n        orangered: '#ff4500',\n        orchid: '#da70d6',\n        palegoldenrod: '#eee8aa',\n        palegreen: '#98fb98',\n        paleturquoise: '#afeeee',\n        palevioletred: '#db7093',\n        papayawhip: '#ffefd5',\n        peachpuff: '#ffdab9',\n        peru: '#cd853f',\n        pink: '#ffc0cb',\n        plum: '#dda0dd',\n        powderblue: '#b0e0e6',\n        purple: '#800080',\n        purple2: '#7f007f',\n        purple3: '#a020f0',\n        rebeccapurple: '#663399',\n        red: '#ff0000',\n        rosybrown: '#bc8f8f',\n        royalblue: '#4169e1',\n        saddlebrown: '#8b4513',\n        salmon: '#fa8072',\n        sandybrown: '#f4a460',\n        seagreen: '#2e8b57',\n        seashell: '#fff5ee',\n        sienna: '#a0522d',\n        silver: '#c0c0c0',\n        skyblue: '#87ceeb',\n        slateblue: '#6a5acd',\n        slategray: '#708090',\n        slategrey: '#708090',\n        snow: '#fffafa',\n        springgreen: '#00ff7f',\n        steelblue: '#4682b4',\n        tan: '#d2b48c',\n        teal: '#008080',\n        thistle: '#d8bfd8',\n        tomato: '#ff6347',\n        turquoise: '#40e0d0',\n        violet: '#ee82ee',\n        wheat: '#f5deb3',\n        white: '#ffffff',\n        whitesmoke: '#f5f5f5',\n        yellow: '#ffff00',\n        yellowgreen: '#9acd32'\n    };\n\n    Color.prototype.name = function () {\n        var hex = rgb2hex(this._rgb, 'rgb');\n        for (var i = 0, list = Object.keys(w3cx11); i < list.length; i += 1) {\n            var n = list[i];\n\n            if (w3cx11[n] === hex) { return n.toLowerCase(); }\n        }\n        return hex;\n    };\n\n    input.format.named = function (name) {\n        name = name.toLowerCase();\n        if (w3cx11[name]) { return hex2rgb(w3cx11[name]); }\n        throw new Error('unknown color name: ' + name);\n    };\n\n    input.autodetect.push({\n        p: 5,\n        test: function (h) {\n            var rest = [], len = arguments.length - 1;\n            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];\n\n            if (!rest.length && type(h) === 'string' && w3cx11[h.toLowerCase()]) {\n                return 'named';\n            }\n        }\n    });\n\n    Color.prototype.alpha = function (a, mutate) {\n        if ( mutate === void 0 ) mutate = false;\n\n        if (a !== undefined && type(a) === 'number') {\n            if (mutate) {\n                this._rgb[3] = a;\n                return this;\n            }\n            return new Color([this._rgb[0], this._rgb[1], this._rgb[2], a], 'rgb');\n        }\n        return this._rgb[3];\n    };\n\n    Color.prototype.clipped = function () {\n        return this._rgb._clipped || false;\n    };\n\n    Color.prototype.darken = function (amount) {\n        if ( amount === void 0 ) amount = 1;\n\n        var me = this;\n        var lab = me.lab();\n        lab[0] -= labConstants.Kn * amount;\n        return new Color(lab, 'lab').alpha(me.alpha(), true);\n    };\n\n    Color.prototype.brighten = function (amount) {\n        if ( amount === void 0 ) amount = 1;\n\n        return this.darken(-amount);\n    };\n\n    Color.prototype.darker = Color.prototype.darken;\n    Color.prototype.brighter = Color.prototype.brighten;\n\n    Color.prototype.get = function (mc) {\n        var ref = mc.split('.');\n        var mode = ref[0];\n        var channel = ref[1];\n        var src = this[mode]();\n        if (channel) {\n            var i = mode.indexOf(channel) - (mode.substr(0, 2) === 'ok' ? 2 : 0);\n            if (i > -1) { return src[i]; }\n            throw new Error((\"unknown channel \" + channel + \" in mode \" + mode));\n        } else {\n            return src;\n        }\n    };\n\n    var pow$6 = Math.pow;\n\n    var EPS = 1e-7;\n    var MAX_ITER = 20;\n\n    Color.prototype.luminance = function (lum, mode) {\n        if ( mode === void 0 ) mode = 'rgb';\n\n        if (lum !== undefined && type(lum) === 'number') {\n            if (lum === 0) {\n                // return pure black\n                return new Color([0, 0, 0, this._rgb[3]], 'rgb');\n            }\n            if (lum === 1) {\n                // return pure white\n                return new Color([255, 255, 255, this._rgb[3]], 'rgb');\n            }\n            // compute new color using...\n            var cur_lum = this.luminance();\n            var max_iter = MAX_ITER;\n\n            var test = function (low, high) {\n                var mid = low.interpolate(high, 0.5, mode);\n                var lm = mid.luminance();\n                if (Math.abs(lum - lm) < EPS || !max_iter--) {\n                    // close enough\n                    return mid;\n                }\n                return lm > lum ? test(low, mid) : test(mid, high);\n            };\n\n            var rgb = (\n                cur_lum > lum\n                    ? test(new Color([0, 0, 0]), this)\n                    : test(this, new Color([255, 255, 255]))\n            ).rgb();\n            return new Color(rgb.concat( [this._rgb[3]]));\n        }\n        return rgb2luminance.apply(void 0, this._rgb.slice(0, 3));\n    };\n\n    var rgb2luminance = function (r, g, b) {\n        // relative luminance\n        // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        r = luminance_x(r);\n        g = luminance_x(g);\n        b = luminance_x(b);\n        return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n    };\n\n    var luminance_x = function (x) {\n        x /= 255;\n        return x <= 0.03928 ? x / 12.92 : pow$6((x + 0.055) / 1.055, 2.4);\n    };\n\n    var index = {};\n\n    function mix (col1, col2, f) {\n        if ( f === void 0 ) f = 0.5;\n        var rest = [], len = arguments.length - 3;\n        while ( len-- > 0 ) rest[ len ] = arguments[ len + 3 ];\n\n        var mode = rest[0] || 'lrgb';\n        if (!index[mode] && !rest.length) {\n            // fall back to the first supported mode\n            mode = Object.keys(index)[0];\n        }\n        if (!index[mode]) {\n            throw new Error((\"interpolation mode \" + mode + \" is not defined\"));\n        }\n        if (type(col1) !== 'object') { col1 = new Color(col1); }\n        if (type(col2) !== 'object') { col2 = new Color(col2); }\n        return index[mode](col1, col2, f).alpha(\n            col1.alpha() + f * (col2.alpha() - col1.alpha())\n        );\n    }\n\n    Color.prototype.mix = Color.prototype.interpolate = function (\n        col2,\n        f\n    ) {\n        if ( f === void 0 ) f = 0.5;\n        var rest = [], len = arguments.length - 2;\n        while ( len-- > 0 ) rest[ len ] = arguments[ len + 2 ];\n\n        return mix.apply(void 0, [ this, col2, f ].concat( rest ));\n    };\n\n    Color.prototype.premultiply = function (mutate) {\n        if ( mutate === void 0 ) mutate = false;\n\n        var rgb = this._rgb;\n        var a = rgb[3];\n        if (mutate) {\n            this._rgb = [rgb[0] * a, rgb[1] * a, rgb[2] * a, a];\n            return this;\n        } else {\n            return new Color([rgb[0] * a, rgb[1] * a, rgb[2] * a, a], 'rgb');\n        }\n    };\n\n    Color.prototype.saturate = function (amount) {\n        if ( amount === void 0 ) amount = 1;\n\n        var me = this;\n        var lch = me.lch();\n        lch[1] += labConstants.Kn * amount;\n        if (lch[1] < 0) { lch[1] = 0; }\n        return new Color(lch, 'lch').alpha(me.alpha(), true);\n    };\n\n    Color.prototype.desaturate = function (amount) {\n        if ( amount === void 0 ) amount = 1;\n\n        return this.saturate(-amount);\n    };\n\n    Color.prototype.set = function (mc, value, mutate) {\n        if ( mutate === void 0 ) mutate = false;\n\n        var ref = mc.split('.');\n        var mode = ref[0];\n        var channel = ref[1];\n        var src = this[mode]();\n        if (channel) {\n            var i = mode.indexOf(channel) - (mode.substr(0, 2) === 'ok' ? 2 : 0);\n            if (i > -1) {\n                if (type(value) == 'string') {\n                    switch (value.charAt(0)) {\n                        case '+':\n                            src[i] += +value;\n                            break;\n                        case '-':\n                            src[i] += +value;\n                            break;\n                        case '*':\n                            src[i] *= +value.substr(1);\n                            break;\n                        case '/':\n                            src[i] /= +value.substr(1);\n                            break;\n                        default:\n                            src[i] = +value;\n                    }\n                } else if (type(value) === 'number') {\n                    src[i] = value;\n                } else {\n                    throw new Error(\"unsupported value for Color.set\");\n                }\n                var out = new Color(src, mode);\n                if (mutate) {\n                    this._rgb = out._rgb;\n                    return this;\n                }\n                return out;\n            }\n            throw new Error((\"unknown channel \" + channel + \" in mode \" + mode));\n        } else {\n            return src;\n        }\n    };\n\n    Color.prototype.tint = function (f) {\n        if ( f === void 0 ) f = 0.5;\n        var rest = [], len = arguments.length - 1;\n        while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];\n\n        return mix.apply(void 0, [ this, 'white', f ].concat( rest ));\n    };\n\n    Color.prototype.shade = function (f) {\n        if ( f === void 0 ) f = 0.5;\n        var rest = [], len = arguments.length - 1;\n        while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];\n\n        return mix.apply(void 0, [ this, 'black', f ].concat( rest ));\n    };\n\n    var rgb = function (col1, col2, f) {\n        var xyz0 = col1._rgb;\n        var xyz1 = col2._rgb;\n        return new Color(\n            xyz0[0] + f * (xyz1[0] - xyz0[0]),\n            xyz0[1] + f * (xyz1[1] - xyz0[1]),\n            xyz0[2] + f * (xyz1[2] - xyz0[2]),\n            'rgb'\n        );\n    };\n\n    // register interpolator\n    index.rgb = rgb;\n\n    var sqrt$2 = Math.sqrt;\n    var pow$5 = Math.pow;\n\n    var lrgb = function (col1, col2, f) {\n        var ref = col1._rgb;\n        var x1 = ref[0];\n        var y1 = ref[1];\n        var z1 = ref[2];\n        var ref$1 = col2._rgb;\n        var x2 = ref$1[0];\n        var y2 = ref$1[1];\n        var z2 = ref$1[2];\n        return new Color(\n            sqrt$2(pow$5(x1, 2) * (1 - f) + pow$5(x2, 2) * f),\n            sqrt$2(pow$5(y1, 2) * (1 - f) + pow$5(y2, 2) * f),\n            sqrt$2(pow$5(z1, 2) * (1 - f) + pow$5(z2, 2) * f),\n            'rgb'\n        );\n    };\n\n    // register interpolator\n    index.lrgb = lrgb;\n\n    var lab = function (col1, col2, f) {\n        var xyz0 = col1.lab();\n        var xyz1 = col2.lab();\n        return new Color(\n            xyz0[0] + f * (xyz1[0] - xyz0[0]),\n            xyz0[1] + f * (xyz1[1] - xyz0[1]),\n            xyz0[2] + f * (xyz1[2] - xyz0[2]),\n            'lab'\n        );\n    };\n\n    // register interpolator\n    index.lab = lab;\n\n    function interpolate_hsx (col1, col2, f, m) {\n        var assign, assign$1;\n\n        var xyz0, xyz1;\n        if (m === 'hsl') {\n            xyz0 = col1.hsl();\n            xyz1 = col2.hsl();\n        } else if (m === 'hsv') {\n            xyz0 = col1.hsv();\n            xyz1 = col2.hsv();\n        } else if (m === 'hcg') {\n            xyz0 = col1.hcg();\n            xyz1 = col2.hcg();\n        } else if (m === 'hsi') {\n            xyz0 = col1.hsi();\n            xyz1 = col2.hsi();\n        } else if (m === 'lch' || m === 'hcl') {\n            m = 'hcl';\n            xyz0 = col1.hcl();\n            xyz1 = col2.hcl();\n        } else if (m === 'oklch') {\n            xyz0 = col1.oklch().reverse();\n            xyz1 = col2.oklch().reverse();\n        }\n\n        var hue0, hue1, sat0, sat1, lbv0, lbv1;\n        if (m.substr(0, 1) === 'h' || m === 'oklch') {\n            (assign = xyz0, hue0 = assign[0], sat0 = assign[1], lbv0 = assign[2]);\n            (assign$1 = xyz1, hue1 = assign$1[0], sat1 = assign$1[1], lbv1 = assign$1[2]);\n        }\n\n        var sat, hue, lbv, dh;\n\n        if (!isNaN(hue0) && !isNaN(hue1)) {\n            // both colors have hue\n            if (hue1 > hue0 && hue1 - hue0 > 180) {\n                dh = hue1 - (hue0 + 360);\n            } else if (hue1 < hue0 && hue0 - hue1 > 180) {\n                dh = hue1 + 360 - hue0;\n            } else {\n                dh = hue1 - hue0;\n            }\n            hue = hue0 + f * dh;\n        } else if (!isNaN(hue0)) {\n            hue = hue0;\n            if ((lbv1 == 1 || lbv1 == 0) && m != 'hsv') { sat = sat0; }\n        } else if (!isNaN(hue1)) {\n            hue = hue1;\n            if ((lbv0 == 1 || lbv0 == 0) && m != 'hsv') { sat = sat1; }\n        } else {\n            hue = Number.NaN;\n        }\n\n        if (sat === undefined) { sat = sat0 + f * (sat1 - sat0); }\n        lbv = lbv0 + f * (lbv1 - lbv0);\n        return m === 'oklch'\n            ? new Color([lbv, sat, hue], m)\n            : new Color([hue, sat, lbv], m);\n    }\n\n    var lch = function (col1, col2, f) {\n        return interpolate_hsx(col1, col2, f, 'lch');\n    };\n\n    // register interpolator\n    index.lch = lch;\n    index.hcl = lch;\n\n    var num = function (col1, col2, f) {\n        var c1 = col1.num();\n        var c2 = col2.num();\n        return new Color(c1 + f * (c2 - c1), 'num');\n    };\n\n    // register interpolator\n    index.num = num;\n\n    var hcg = function (col1, col2, f) {\n        return interpolate_hsx(col1, col2, f, 'hcg');\n    };\n\n    // register interpolator\n    index.hcg = hcg;\n\n    var hsi = function (col1, col2, f) {\n        return interpolate_hsx(col1, col2, f, 'hsi');\n    };\n\n    // register interpolator\n    index.hsi = hsi;\n\n    var hsl = function (col1, col2, f) {\n        return interpolate_hsx(col1, col2, f, 'hsl');\n    };\n\n    // register interpolator\n    index.hsl = hsl;\n\n    var hsv = function (col1, col2, f) {\n        return interpolate_hsx(col1, col2, f, 'hsv');\n    };\n\n    // register interpolator\n    index.hsv = hsv;\n\n    var oklab = function (col1, col2, f) {\n        var xyz0 = col1.oklab();\n        var xyz1 = col2.oklab();\n        return new Color(\n            xyz0[0] + f * (xyz1[0] - xyz0[0]),\n            xyz0[1] + f * (xyz1[1] - xyz0[1]),\n            xyz0[2] + f * (xyz1[2] - xyz0[2]),\n            'oklab'\n        );\n    };\n\n    // register interpolator\n    index.oklab = oklab;\n\n    var oklch = function (col1, col2, f) {\n        return interpolate_hsx(col1, col2, f, 'oklch');\n    };\n\n    // register interpolator\n    index.oklch = oklch;\n\n    var pow$4 = Math.pow;\n    var sqrt$1 = Math.sqrt;\n    var PI$1 = Math.PI;\n    var cos$2 = Math.cos;\n    var sin$2 = Math.sin;\n    var atan2$1 = Math.atan2;\n\n    function average (colors, mode, weights) {\n        if ( mode === void 0 ) mode = 'lrgb';\n        if ( weights === void 0 ) weights = null;\n\n        var l = colors.length;\n        if (!weights) { weights = Array.from(new Array(l)).map(function () { return 1; }); }\n        // normalize weights\n        var k =\n            l /\n            weights.reduce(function (a, b) {\n                return a + b;\n            });\n        weights.forEach(function (w, i) {\n            weights[i] *= k;\n        });\n        // convert colors to Color objects\n        colors = colors.map(function (c) { return new Color(c); });\n        if (mode === 'lrgb') {\n            return _average_lrgb(colors, weights);\n        }\n        var first = colors.shift();\n        var xyz = first.get(mode);\n        var cnt = [];\n        var dx = 0;\n        var dy = 0;\n        // initial color\n        for (var i = 0; i < xyz.length; i++) {\n            xyz[i] = (xyz[i] || 0) * weights[0];\n            cnt.push(isNaN(xyz[i]) ? 0 : weights[0]);\n            if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {\n                var A = (xyz[i] / 180) * PI$1;\n                dx += cos$2(A) * weights[0];\n                dy += sin$2(A) * weights[0];\n            }\n        }\n\n        var alpha = first.alpha() * weights[0];\n        colors.forEach(function (c, ci) {\n            var xyz2 = c.get(mode);\n            alpha += c.alpha() * weights[ci + 1];\n            for (var i = 0; i < xyz.length; i++) {\n                if (!isNaN(xyz2[i])) {\n                    cnt[i] += weights[ci + 1];\n                    if (mode.charAt(i) === 'h') {\n                        var A = (xyz2[i] / 180) * PI$1;\n                        dx += cos$2(A) * weights[ci + 1];\n                        dy += sin$2(A) * weights[ci + 1];\n                    } else {\n                        xyz[i] += xyz2[i] * weights[ci + 1];\n                    }\n                }\n            }\n        });\n\n        for (var i$1 = 0; i$1 < xyz.length; i$1++) {\n            if (mode.charAt(i$1) === 'h') {\n                var A$1 = (atan2$1(dy / cnt[i$1], dx / cnt[i$1]) / PI$1) * 180;\n                while (A$1 < 0) { A$1 += 360; }\n                while (A$1 >= 360) { A$1 -= 360; }\n                xyz[i$1] = A$1;\n            } else {\n                xyz[i$1] = xyz[i$1] / cnt[i$1];\n            }\n        }\n        alpha /= l;\n        return new Color(xyz, mode).alpha(alpha > 0.99999 ? 1 : alpha, true);\n    }\n    var _average_lrgb = function (colors, weights) {\n        var l = colors.length;\n        var xyz = [0, 0, 0, 0];\n        for (var i = 0; i < colors.length; i++) {\n            var col = colors[i];\n            var f = weights[i] / l;\n            var rgb = col._rgb;\n            xyz[0] += pow$4(rgb[0], 2) * f;\n            xyz[1] += pow$4(rgb[1], 2) * f;\n            xyz[2] += pow$4(rgb[2], 2) * f;\n            xyz[3] += rgb[3] * f;\n        }\n        xyz[0] = sqrt$1(xyz[0]);\n        xyz[1] = sqrt$1(xyz[1]);\n        xyz[2] = sqrt$1(xyz[2]);\n        if (xyz[3] > 0.9999999) { xyz[3] = 1; }\n        return new Color(clip_rgb(xyz));\n    };\n\n    // minimal multi-purpose interface\n\n\n    var pow$3 = Math.pow;\n\n    function scale (colors) {\n        // constructor\n        var _mode = 'rgb';\n        var _nacol = chroma('#ccc');\n        var _spread = 0;\n        // const _fixed = false;\n        var _domain = [0, 1];\n        var _pos = [];\n        var _padding = [0, 0];\n        var _classes = false;\n        var _colors = [];\n        var _out = false;\n        var _min = 0;\n        var _max = 1;\n        var _correctLightness = false;\n        var _colorCache = {};\n        var _useCache = true;\n        var _gamma = 1;\n\n        // private methods\n\n        var setColors = function (colors) {\n            colors = colors || ['#fff', '#000'];\n            if (\n                colors &&\n                type(colors) === 'string' &&\n                chroma.brewer &&\n                chroma.brewer[colors.toLowerCase()]\n            ) {\n                colors = chroma.brewer[colors.toLowerCase()];\n            }\n            if (type(colors) === 'array') {\n                // handle single color\n                if (colors.length === 1) {\n                    colors = [colors[0], colors[0]];\n                }\n                // make a copy of the colors\n                colors = colors.slice(0);\n                // convert to chroma classes\n                for (var c = 0; c < colors.length; c++) {\n                    colors[c] = chroma(colors[c]);\n                }\n                // auto-fill color position\n                _pos.length = 0;\n                for (var c$1 = 0; c$1 < colors.length; c$1++) {\n                    _pos.push(c$1 / (colors.length - 1));\n                }\n            }\n            resetCache();\n            return (_colors = colors);\n        };\n\n        var getClass = function (value) {\n            if (_classes != null) {\n                var n = _classes.length - 1;\n                var i = 0;\n                while (i < n && value >= _classes[i]) {\n                    i++;\n                }\n                return i - 1;\n            }\n            return 0;\n        };\n\n        var tMapLightness = function (t) { return t; };\n        var tMapDomain = function (t) { return t; };\n\n        // const classifyValue = function(value) {\n        //     let val = value;\n        //     if (_classes.length > 2) {\n        //         const n = _classes.length-1;\n        //         const i = getClass(value);\n        //         const minc = _classes[0] + ((_classes[1]-_classes[0]) * (0 + (_spread * 0.5)));  // center of 1st class\n        //         const maxc = _classes[n-1] + ((_classes[n]-_classes[n-1]) * (1 - (_spread * 0.5)));  // center of last class\n        //         val = _min + ((((_classes[i] + ((_classes[i+1] - _classes[i]) * 0.5)) - minc) / (maxc-minc)) * (_max - _min));\n        //     }\n        //     return val;\n        // };\n\n        var getColor = function (val, bypassMap) {\n            var col, t;\n            if (bypassMap == null) {\n                bypassMap = false;\n            }\n            if (isNaN(val) || val === null) {\n                return _nacol;\n            }\n            if (!bypassMap) {\n                if (_classes && _classes.length > 2) {\n                    // find the class\n                    var c = getClass(val);\n                    t = c / (_classes.length - 2);\n                } else if (_max !== _min) {\n                    // just interpolate between min/max\n                    t = (val - _min) / (_max - _min);\n                } else {\n                    t = 1;\n                }\n            } else {\n                t = val;\n            }\n\n            // domain map\n            t = tMapDomain(t);\n\n            if (!bypassMap) {\n                t = tMapLightness(t); // lightness correction\n            }\n\n            if (_gamma !== 1) {\n                t = pow$3(t, _gamma);\n            }\n\n            t = _padding[0] + t * (1 - _padding[0] - _padding[1]);\n\n            t = limit(t, 0, 1);\n\n            var k = Math.floor(t * 10000);\n\n            if (_useCache && _colorCache[k]) {\n                col = _colorCache[k];\n            } else {\n                if (type(_colors) === 'array') {\n                    //for i in [0.._pos.length-1]\n                    for (var i = 0; i < _pos.length; i++) {\n                        var p = _pos[i];\n                        if (t <= p) {\n                            col = _colors[i];\n                            break;\n                        }\n                        if (t >= p && i === _pos.length - 1) {\n                            col = _colors[i];\n                            break;\n                        }\n                        if (t > p && t < _pos[i + 1]) {\n                            t = (t - p) / (_pos[i + 1] - p);\n                            col = chroma.interpolate(\n                                _colors[i],\n                                _colors[i + 1],\n                                t,\n                                _mode\n                            );\n                            break;\n                        }\n                    }\n                } else if (type(_colors) === 'function') {\n                    col = _colors(t);\n                }\n                if (_useCache) {\n                    _colorCache[k] = col;\n                }\n            }\n            return col;\n        };\n\n        var resetCache = function () { return (_colorCache = {}); };\n\n        setColors(colors);\n\n        // public interface\n\n        var f = function (v) {\n            var c = chroma(getColor(v));\n            if (_out && c[_out]) {\n                return c[_out]();\n            } else {\n                return c;\n            }\n        };\n\n        f.classes = function (classes) {\n            if (classes != null) {\n                if (type(classes) === 'array') {\n                    _classes = classes;\n                    _domain = [classes[0], classes[classes.length - 1]];\n                } else {\n                    var d = chroma.analyze(_domain);\n                    if (classes === 0) {\n                        _classes = [d.min, d.max];\n                    } else {\n                        _classes = chroma.limits(d, 'e', classes);\n                    }\n                }\n                return f;\n            }\n            return _classes;\n        };\n\n        f.domain = function (domain) {\n            if (!arguments.length) {\n                return _domain;\n            }\n            _min = domain[0];\n            _max = domain[domain.length - 1];\n            _pos = [];\n            var k = _colors.length;\n            if (domain.length === k && _min !== _max) {\n                // update positions\n                for (var i = 0, list = Array.from(domain); i < list.length; i += 1) {\n                    var d = list[i];\n\n                    _pos.push((d - _min) / (_max - _min));\n                }\n            } else {\n                for (var c = 0; c < k; c++) {\n                    _pos.push(c / (k - 1));\n                }\n                if (domain.length > 2) {\n                    // set domain map\n                    var tOut = domain.map(function (d, i) { return i / (domain.length - 1); });\n                    var tBreaks = domain.map(function (d) { return (d - _min) / (_max - _min); });\n                    if (!tBreaks.every(function (val, i) { return tOut[i] === val; })) {\n                        tMapDomain = function (t) {\n                            if (t <= 0 || t >= 1) { return t; }\n                            var i = 0;\n                            while (t >= tBreaks[i + 1]) { i++; }\n                            var f =\n                                (t - tBreaks[i]) / (tBreaks[i + 1] - tBreaks[i]);\n                            var out = tOut[i] + f * (tOut[i + 1] - tOut[i]);\n                            return out;\n                        };\n                    }\n                }\n            }\n            _domain = [_min, _max];\n            return f;\n        };\n\n        f.mode = function (_m) {\n            if (!arguments.length) {\n                return _mode;\n            }\n            _mode = _m;\n            resetCache();\n            return f;\n        };\n\n        f.range = function (colors, _pos) {\n            setColors(colors);\n            return f;\n        };\n\n        f.out = function (_o) {\n            _out = _o;\n            return f;\n        };\n\n        f.spread = function (val) {\n            if (!arguments.length) {\n                return _spread;\n            }\n            _spread = val;\n            return f;\n        };\n\n        f.correctLightness = function (v) {\n            if (v == null) {\n                v = true;\n            }\n            _correctLightness = v;\n            resetCache();\n            if (_correctLightness) {\n                tMapLightness = function (t) {\n                    var L0 = getColor(0, true).lab()[0];\n                    var L1 = getColor(1, true).lab()[0];\n                    var pol = L0 > L1;\n                    var L_actual = getColor(t, true).lab()[0];\n                    var L_ideal = L0 + (L1 - L0) * t;\n                    var L_diff = L_actual - L_ideal;\n                    var t0 = 0;\n                    var t1 = 1;\n                    var max_iter = 20;\n                    while (Math.abs(L_diff) > 1e-2 && max_iter-- > 0) {\n                        (function () {\n                            if (pol) {\n                                L_diff *= -1;\n                            }\n                            if (L_diff < 0) {\n                                t0 = t;\n                                t += (t1 - t) * 0.5;\n                            } else {\n                                t1 = t;\n                                t += (t0 - t) * 0.5;\n                            }\n                            L_actual = getColor(t, true).lab()[0];\n                            return (L_diff = L_actual - L_ideal);\n                        })();\n                    }\n                    return t;\n                };\n            } else {\n                tMapLightness = function (t) { return t; };\n            }\n            return f;\n        };\n\n        f.padding = function (p) {\n            if (p != null) {\n                if (type(p) === 'number') {\n                    p = [p, p];\n                }\n                _padding = p;\n                return f;\n            } else {\n                return _padding;\n            }\n        };\n\n        f.colors = function (numColors, out) {\n            // If no arguments are given, return the original colors that were provided\n            if (arguments.length < 2) {\n                out = 'hex';\n            }\n            var result = [];\n\n            if (arguments.length === 0) {\n                result = _colors.slice(0);\n            } else if (numColors === 1) {\n                result = [f(0.5)];\n            } else if (numColors > 1) {\n                var dm = _domain[0];\n                var dd = _domain[1] - dm;\n                result = __range__(0, numColors).map(function (i) { return f(dm + (i / (numColors - 1)) * dd); }\n                );\n            } else {\n                // returns all colors based on the defined classes\n                colors = [];\n                var samples = [];\n                if (_classes && _classes.length > 2) {\n                    for (\n                        var i = 1, end = _classes.length, asc = 1 <= end;\n                        asc ? i < end : i > end;\n                        asc ? i++ : i--\n                    ) {\n                        samples.push((_classes[i - 1] + _classes[i]) * 0.5);\n                    }\n                } else {\n                    samples = _domain;\n                }\n                result = samples.map(function (v) { return f(v); });\n            }\n\n            if (chroma[out]) {\n                result = result.map(function (c) { return c[out](); });\n            }\n            return result;\n        };\n\n        f.cache = function (c) {\n            if (c != null) {\n                _useCache = c;\n                return f;\n            } else {\n                return _useCache;\n            }\n        };\n\n        f.gamma = function (g) {\n            if (g != null) {\n                _gamma = g;\n                return f;\n            } else {\n                return _gamma;\n            }\n        };\n\n        f.nodata = function (d) {\n            if (d != null) {\n                _nacol = chroma(d);\n                return f;\n            } else {\n                return _nacol;\n            }\n        };\n\n        return f;\n    }\n\n    function __range__(left, right, inclusive) {\n        var range = [];\n        var ascending = left < right;\n        var end = right ;\n        for (var i = left; ascending ? i < end : i > end; ascending ? i++ : i--) {\n            range.push(i);\n        }\n        return range;\n    }\n\n    //\n    // interpolates between a set of colors uzing a bezier spline\n    //\n\n\n    // nth row of the pascal triangle\n    var binom_row = function (n) {\n        var row = [1, 1];\n        for (var i = 1; i < n; i++) {\n            var newrow = [1];\n            for (var j = 1; j <= row.length; j++) {\n                newrow[j] = (row[j] || 0) + row[j - 1];\n            }\n            row = newrow;\n        }\n        return row;\n    };\n\n    var bezier = function (colors) {\n        var assign, assign$1, assign$2;\n\n        var I, lab0, lab1, lab2;\n        colors = colors.map(function (c) { return new Color(c); });\n        if (colors.length === 2) {\n            // linear interpolation\n            (assign = colors.map(function (c) { return c.lab(); }), lab0 = assign[0], lab1 = assign[1]);\n            I = function (t) {\n                var lab = [0, 1, 2].map(function (i) { return lab0[i] + t * (lab1[i] - lab0[i]); });\n                return new Color(lab, 'lab');\n            };\n        } else if (colors.length === 3) {\n            // quadratic bezier interpolation\n            (assign$1 = colors.map(function (c) { return c.lab(); }), lab0 = assign$1[0], lab1 = assign$1[1], lab2 = assign$1[2]);\n            I = function (t) {\n                var lab = [0, 1, 2].map(\n                    function (i) { return (1 - t) * (1 - t) * lab0[i] +\n                        2 * (1 - t) * t * lab1[i] +\n                        t * t * lab2[i]; }\n                );\n                return new Color(lab, 'lab');\n            };\n        } else if (colors.length === 4) {\n            // cubic bezier interpolation\n            var lab3;\n            (assign$2 = colors.map(function (c) { return c.lab(); }), lab0 = assign$2[0], lab1 = assign$2[1], lab2 = assign$2[2], lab3 = assign$2[3]);\n            I = function (t) {\n                var lab = [0, 1, 2].map(\n                    function (i) { return (1 - t) * (1 - t) * (1 - t) * lab0[i] +\n                        3 * (1 - t) * (1 - t) * t * lab1[i] +\n                        3 * (1 - t) * t * t * lab2[i] +\n                        t * t * t * lab3[i]; }\n                );\n                return new Color(lab, 'lab');\n            };\n        } else if (colors.length >= 5) {\n            // general case (degree n bezier)\n            var labs, row, n;\n            labs = colors.map(function (c) { return c.lab(); });\n            n = colors.length - 1;\n            row = binom_row(n);\n            I = function (t) {\n                var u = 1 - t;\n                var lab = [0, 1, 2].map(function (i) { return labs.reduce(\n                        function (sum, el, j) { return sum + row[j] * Math.pow( u, (n - j) ) * Math.pow( t, j ) * el[i]; },\n                        0\n                    ); }\n                );\n                return new Color(lab, 'lab');\n            };\n        } else {\n            throw new RangeError('No point in running bezier with only one color.');\n        }\n        return I;\n    };\n\n    function bezier$1 (colors) {\n        var f = bezier(colors);\n        f.scale = function () { return scale(f); };\n        return f;\n    }\n\n    /*\n     * interpolates between a set of colors uzing a bezier spline\n     * blend mode formulas taken from https://web.archive.org/web/20180110014946/http://www.venture-ware.com/kevin/coding/lets-learn-math-photoshop-blend-modes/\n     */\n\n\n    var blend = function (bottom, top, mode) {\n        if (!blend[mode]) {\n            throw new Error('unknown blend mode ' + mode);\n        }\n        return blend[mode](bottom, top);\n    };\n\n    var blend_f = function (f) { return function (bottom, top) {\n        var c0 = chroma(top).rgb();\n        var c1 = chroma(bottom).rgb();\n        return chroma.rgb(f(c0, c1));\n    }; };\n\n    var each = function (f) { return function (c0, c1) {\n        var out = [];\n        out[0] = f(c0[0], c1[0]);\n        out[1] = f(c0[1], c1[1]);\n        out[2] = f(c0[2], c1[2]);\n        return out;\n    }; };\n\n    var normal = function (a) { return a; };\n    var multiply = function (a, b) { return (a * b) / 255; };\n    var darken = function (a, b) { return (a > b ? b : a); };\n    var lighten = function (a, b) { return (a > b ? a : b); };\n    var screen = function (a, b) { return 255 * (1 - (1 - a / 255) * (1 - b / 255)); };\n    var overlay = function (a, b) { return b < 128 ? (2 * a * b) / 255 : 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255)); };\n    var burn = function (a, b) { return 255 * (1 - (1 - b / 255) / (a / 255)); };\n    var dodge = function (a, b) {\n        if (a === 255) { return 255; }\n        a = (255 * (b / 255)) / (1 - a / 255);\n        return a > 255 ? 255 : a;\n    };\n\n    // # add = (a,b) ->\n    // #     if (a + b > 255) then 255 else a + b\n\n    blend.normal = blend_f(each(normal));\n    blend.multiply = blend_f(each(multiply));\n    blend.screen = blend_f(each(screen));\n    blend.overlay = blend_f(each(overlay));\n    blend.darken = blend_f(each(darken));\n    blend.lighten = blend_f(each(lighten));\n    blend.dodge = blend_f(each(dodge));\n    blend.burn = blend_f(each(burn));\n\n    // cubehelix interpolation\n    // based on D.A. Green \"A colour scheme for the display of astronomical intensity images\"\n    // http://astron-soc.in/bulletin/11June/289392011.pdf\n    var pow$2 = Math.pow;\n    var sin$1 = Math.sin;\n    var cos$1 = Math.cos;\n\n    function cubehelix (\n        start,\n        rotations,\n        hue,\n        gamma,\n        lightness\n    ) {\n        if ( start === void 0 ) start = 300;\n        if ( rotations === void 0 ) rotations = -1.5;\n        if ( hue === void 0 ) hue = 1;\n        if ( gamma === void 0 ) gamma = 1;\n        if ( lightness === void 0 ) lightness = [0, 1];\n\n        var dh = 0,\n            dl;\n        if (type(lightness) === 'array') {\n            dl = lightness[1] - lightness[0];\n        } else {\n            dl = 0;\n            lightness = [lightness, lightness];\n        }\n        var f = function (fract) {\n            var a = TWOPI * ((start + 120) / 360 + rotations * fract);\n            var l = pow$2(lightness[0] + dl * fract, gamma);\n            var h = dh !== 0 ? hue[0] + fract * dh : hue;\n            var amp = (h * l * (1 - l)) / 2;\n            var cos_a = cos$1(a);\n            var sin_a = sin$1(a);\n            var r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);\n            var g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);\n            var b = l + amp * (+1.97294 * cos_a);\n            return chroma(clip_rgb([r * 255, g * 255, b * 255, 1]));\n        };\n        f.start = function (s) {\n            if (s == null) {\n                return start;\n            }\n            start = s;\n            return f;\n        };\n        f.rotations = function (r) {\n            if (r == null) {\n                return rotations;\n            }\n            rotations = r;\n            return f;\n        };\n        f.gamma = function (g) {\n            if (g == null) {\n                return gamma;\n            }\n            gamma = g;\n            return f;\n        };\n        f.hue = function (h) {\n            if (h == null) {\n                return hue;\n            }\n            hue = h;\n            if (type(hue) === 'array') {\n                dh = hue[1] - hue[0];\n                if (dh === 0) {\n                    hue = hue[1];\n                }\n            } else {\n                dh = 0;\n            }\n            return f;\n        };\n        f.lightness = function (h) {\n            if (h == null) {\n                return lightness;\n            }\n            if (type(h) === 'array') {\n                lightness = h;\n                dl = h[1] - h[0];\n            } else {\n                lightness = [h, h];\n                dl = 0;\n            }\n            return f;\n        };\n        f.scale = function () { return chroma.scale(f); };\n        f.hue(hue);\n        return f;\n    }\n\n    var digits = '0123456789abcdef';\n\n    var floor$1 = Math.floor;\n    var random = Math.random;\n\n    function random$1 () {\n        var code = '#';\n        for (var i = 0; i < 6; i++) {\n            code += digits.charAt(floor$1(random() * 16));\n        }\n        return new Color(code, 'hex');\n    }\n\n    var log = Math.log;\n    var pow$1 = Math.pow;\n    var floor = Math.floor;\n    var abs$1 = Math.abs;\n\n    function analyze(data, key) {\n        if ( key === void 0 ) key = null;\n\n        var r = {\n            min: Number.MAX_VALUE,\n            max: Number.MAX_VALUE * -1,\n            sum: 0,\n            values: [],\n            count: 0\n        };\n        if (type(data) === 'object') {\n            data = Object.values(data);\n        }\n        data.forEach(function (val) {\n            if (key && type(val) === 'object') { val = val[key]; }\n            if (val !== undefined && val !== null && !isNaN(val)) {\n                r.values.push(val);\n                r.sum += val;\n                if (val < r.min) { r.min = val; }\n                if (val > r.max) { r.max = val; }\n                r.count += 1;\n            }\n        });\n\n        r.domain = [r.min, r.max];\n\n        r.limits = function (mode, num) { return limits(r, mode, num); };\n\n        return r;\n    }\n\n    function limits(data, mode, num) {\n        if ( mode === void 0 ) mode = 'equal';\n        if ( num === void 0 ) num = 7;\n\n        if (type(data) == 'array') {\n            data = analyze(data);\n        }\n        var min = data.min;\n        var max = data.max;\n        var values = data.values.sort(function (a, b) { return a - b; });\n\n        if (num === 1) {\n            return [min, max];\n        }\n\n        var limits = [];\n\n        if (mode.substr(0, 1) === 'c') {\n            // continuous\n            limits.push(min);\n            limits.push(max);\n        }\n\n        if (mode.substr(0, 1) === 'e') {\n            // equal interval\n            limits.push(min);\n            for (var i = 1; i < num; i++) {\n                limits.push(min + (i / num) * (max - min));\n            }\n            limits.push(max);\n        } else if (mode.substr(0, 1) === 'l') {\n            // log scale\n            if (min <= 0) {\n                throw new Error(\n                    'Logarithmic scales are only possible for values > 0'\n                );\n            }\n            var min_log = Math.LOG10E * log(min);\n            var max_log = Math.LOG10E * log(max);\n            limits.push(min);\n            for (var i$1 = 1; i$1 < num; i$1++) {\n                limits.push(pow$1(10, min_log + (i$1 / num) * (max_log - min_log)));\n            }\n            limits.push(max);\n        } else if (mode.substr(0, 1) === 'q') {\n            // quantile scale\n            limits.push(min);\n            for (var i$2 = 1; i$2 < num; i$2++) {\n                var p = ((values.length - 1) * i$2) / num;\n                var pb = floor(p);\n                if (pb === p) {\n                    limits.push(values[pb]);\n                } else {\n                    // p > pb\n                    var pr = p - pb;\n                    limits.push(values[pb] * (1 - pr) + values[pb + 1] * pr);\n                }\n            }\n            limits.push(max);\n        } else if (mode.substr(0, 1) === 'k') {\n            // k-means clustering\n            /*\n            implementation based on\n            http://code.google.com/p/figue/source/browse/trunk/figue.js#336\n            simplified for 1-d input values\n            */\n            var cluster;\n            var n = values.length;\n            var assignments = new Array(n);\n            var clusterSizes = new Array(num);\n            var repeat = true;\n            var nb_iters = 0;\n            var centroids = null;\n\n            // get seed values\n            centroids = [];\n            centroids.push(min);\n            for (var i$3 = 1; i$3 < num; i$3++) {\n                centroids.push(min + (i$3 / num) * (max - min));\n            }\n            centroids.push(max);\n\n            while (repeat) {\n                // assignment step\n                for (var j = 0; j < num; j++) {\n                    clusterSizes[j] = 0;\n                }\n                for (var i$4 = 0; i$4 < n; i$4++) {\n                    var value = values[i$4];\n                    var mindist = Number.MAX_VALUE;\n                    var best = (void 0);\n                    for (var j$1 = 0; j$1 < num; j$1++) {\n                        var dist = abs$1(centroids[j$1] - value);\n                        if (dist < mindist) {\n                            mindist = dist;\n                            best = j$1;\n                        }\n                        clusterSizes[best]++;\n                        assignments[i$4] = best;\n                    }\n                }\n\n                // update centroids step\n                var newCentroids = new Array(num);\n                for (var j$2 = 0; j$2 < num; j$2++) {\n                    newCentroids[j$2] = null;\n                }\n                for (var i$5 = 0; i$5 < n; i$5++) {\n                    cluster = assignments[i$5];\n                    if (newCentroids[cluster] === null) {\n                        newCentroids[cluster] = values[i$5];\n                    } else {\n                        newCentroids[cluster] += values[i$5];\n                    }\n                }\n                for (var j$3 = 0; j$3 < num; j$3++) {\n                    newCentroids[j$3] *= 1 / clusterSizes[j$3];\n                }\n\n                // check convergence\n                repeat = false;\n                for (var j$4 = 0; j$4 < num; j$4++) {\n                    if (newCentroids[j$4] !== centroids[j$4]) {\n                        repeat = true;\n                        break;\n                    }\n                }\n\n                centroids = newCentroids;\n                nb_iters++;\n\n                if (nb_iters > 200) {\n                    repeat = false;\n                }\n            }\n\n            // finished k-means clustering\n            // the next part is borrowed from gabrielflor.it\n            var kClusters = {};\n            for (var j$5 = 0; j$5 < num; j$5++) {\n                kClusters[j$5] = [];\n            }\n            for (var i$6 = 0; i$6 < n; i$6++) {\n                cluster = assignments[i$6];\n                kClusters[cluster].push(values[i$6]);\n            }\n            var tmpKMeansBreaks = [];\n            for (var j$6 = 0; j$6 < num; j$6++) {\n                tmpKMeansBreaks.push(kClusters[j$6][0]);\n                tmpKMeansBreaks.push(kClusters[j$6][kClusters[j$6].length - 1]);\n            }\n            tmpKMeansBreaks = tmpKMeansBreaks.sort(function (a, b) { return a - b; });\n            limits.push(tmpKMeansBreaks[0]);\n            for (var i$7 = 1; i$7 < tmpKMeansBreaks.length; i$7 += 2) {\n                var v = tmpKMeansBreaks[i$7];\n                if (!isNaN(v) && limits.indexOf(v) === -1) {\n                    limits.push(v);\n                }\n            }\n        }\n        return limits;\n    }\n\n    function contrast (a, b) {\n        // WCAG contrast ratio\n        // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n        a = new Color(a);\n        b = new Color(b);\n        var l1 = a.luminance();\n        var l2 = b.luminance();\n        return l1 > l2 ? (l1 + 0.05) / (l2 + 0.05) : (l2 + 0.05) / (l1 + 0.05);\n    }\n\n    /**\n     * @license\n     *\n     * The APCA contrast prediction algorithm is based of the formulas published\n     * in the APCA-1.0.98G specification by Myndex. The specification is available at:\n     * https://raw.githubusercontent.com/Myndex/apca-w3/master/images/APCAw3_0.1.17_APCA0.0.98G.svg\n     *\n     * Note that the APCA implementation is still beta, so please update to\n     * future versions of chroma.js when they become available.\n     *\n     * You can read more about the APCA Readability Criterion at\n     * https://readtech.org/ARC/\n     */\n\n    // constants\n    var W_offset = 0.027;\n    var P_in = 0.0005;\n    var P_out = 0.1;\n    var R_scale = 1.14;\n    var B_threshold = 0.022;\n    var B_exp = 1.414;\n\n    function contrastAPCA (text, bg) {\n        // parse input colors\n        text = new Color(text);\n        bg = new Color(bg);\n        // if text color has alpha, blend against background\n        if (text.alpha() < 1) {\n            text = mix(bg, text, text.alpha(), 'rgb');\n        }\n        var l_text = lum.apply(void 0, text.rgb());\n        var l_bg = lum.apply(void 0, bg.rgb());\n\n        // soft clamp black levels\n        var Y_text =\n            l_text >= B_threshold\n                ? l_text\n                : l_text + Math.pow(B_threshold - l_text, B_exp);\n        var Y_bg =\n            l_bg >= B_threshold ? l_bg : l_bg + Math.pow(B_threshold - l_bg, B_exp);\n\n        // normal polarity (dark text on light background)\n        var S_norm = Math.pow(Y_bg, 0.56) - Math.pow(Y_text, 0.57);\n        // reverse polarity (light text on dark background)\n        var S_rev = Math.pow(Y_bg, 0.65) - Math.pow(Y_text, 0.62);\n        // clamp noise then scale\n        var C =\n            Math.abs(Y_bg - Y_text) < P_in\n                ? 0\n                : Y_text < Y_bg\n                  ? S_norm * R_scale\n                  : S_rev * R_scale;\n        // clamp minimum contrast then offset\n        var S_apc = Math.abs(C) < P_out ? 0 : C > 0 ? C - W_offset : C + W_offset;\n        // scale to 100\n        return S_apc * 100;\n    }\n    function lum(r, g, b) {\n        return (\n            0.2126729 * Math.pow(r / 255, 2.4) +\n            0.7151522 * Math.pow(g / 255, 2.4) +\n            0.072175 * Math.pow(b / 255, 2.4)\n        );\n    }\n\n    var sqrt = Math.sqrt;\n    var pow = Math.pow;\n    var min = Math.min;\n    var max = Math.max;\n    var atan2 = Math.atan2;\n    var abs = Math.abs;\n    var cos = Math.cos;\n    var sin = Math.sin;\n    var exp = Math.exp;\n    var PI = Math.PI;\n\n    function deltaE (a, b, Kl, Kc, Kh) {\n        if ( Kl === void 0 ) Kl = 1;\n        if ( Kc === void 0 ) Kc = 1;\n        if ( Kh === void 0 ) Kh = 1;\n\n        // Delta E (CIE 2000)\n        // see http://www.brucelindbloom.com/index.html?Eqn_DeltaE_CIE2000.html\n        var rad2deg = function (rad) {\n            return (360 * rad) / (2 * PI);\n        };\n        var deg2rad = function (deg) {\n            return (2 * PI * deg) / 360;\n        };\n        a = new Color(a);\n        b = new Color(b);\n        var ref = Array.from(a.lab());\n        var L1 = ref[0];\n        var a1 = ref[1];\n        var b1 = ref[2];\n        var ref$1 = Array.from(b.lab());\n        var L2 = ref$1[0];\n        var a2 = ref$1[1];\n        var b2 = ref$1[2];\n        var avgL = (L1 + L2) / 2;\n        var C1 = sqrt(pow(a1, 2) + pow(b1, 2));\n        var C2 = sqrt(pow(a2, 2) + pow(b2, 2));\n        var avgC = (C1 + C2) / 2;\n        var G = 0.5 * (1 - sqrt(pow(avgC, 7) / (pow(avgC, 7) + pow(25, 7))));\n        var a1p = a1 * (1 + G);\n        var a2p = a2 * (1 + G);\n        var C1p = sqrt(pow(a1p, 2) + pow(b1, 2));\n        var C2p = sqrt(pow(a2p, 2) + pow(b2, 2));\n        var avgCp = (C1p + C2p) / 2;\n        var arctan1 = rad2deg(atan2(b1, a1p));\n        var arctan2 = rad2deg(atan2(b2, a2p));\n        var h1p = arctan1 >= 0 ? arctan1 : arctan1 + 360;\n        var h2p = arctan2 >= 0 ? arctan2 : arctan2 + 360;\n        var avgHp =\n            abs(h1p - h2p) > 180 ? (h1p + h2p + 360) / 2 : (h1p + h2p) / 2;\n        var T =\n            1 -\n            0.17 * cos(deg2rad(avgHp - 30)) +\n            0.24 * cos(deg2rad(2 * avgHp)) +\n            0.32 * cos(deg2rad(3 * avgHp + 6)) -\n            0.2 * cos(deg2rad(4 * avgHp - 63));\n        var deltaHp = h2p - h1p;\n        deltaHp =\n            abs(deltaHp) <= 180\n                ? deltaHp\n                : h2p <= h1p\n                  ? deltaHp + 360\n                  : deltaHp - 360;\n        deltaHp = 2 * sqrt(C1p * C2p) * sin(deg2rad(deltaHp) / 2);\n        var deltaL = L2 - L1;\n        var deltaCp = C2p - C1p;\n        var sl = 1 + (0.015 * pow(avgL - 50, 2)) / sqrt(20 + pow(avgL - 50, 2));\n        var sc = 1 + 0.045 * avgCp;\n        var sh = 1 + 0.015 * avgCp * T;\n        var deltaTheta = 30 * exp(-pow((avgHp - 275) / 25, 2));\n        var Rc = 2 * sqrt(pow(avgCp, 7) / (pow(avgCp, 7) + pow(25, 7)));\n        var Rt = -Rc * sin(2 * deg2rad(deltaTheta));\n        var result = sqrt(\n            pow(deltaL / (Kl * sl), 2) +\n                pow(deltaCp / (Kc * sc), 2) +\n                pow(deltaHp / (Kh * sh), 2) +\n                Rt * (deltaCp / (Kc * sc)) * (deltaHp / (Kh * sh))\n        );\n        return max(0, min(100, result));\n    }\n\n    // simple Euclidean distance\n    function distance (a, b, mode) {\n        if ( mode === void 0 ) mode = 'lab';\n\n        // Delta E (CIE 1976)\n        // see http://www.brucelindbloom.com/index.html?Equations.html\n        a = new Color(a);\n        b = new Color(b);\n        var l1 = a.get(mode);\n        var l2 = b.get(mode);\n        var sum_sq = 0;\n        for (var i in l1) {\n            var d = (l1[i] || 0) - (l2[i] || 0);\n            sum_sq += d * d;\n        }\n        return Math.sqrt(sum_sq);\n    }\n\n    function valid () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        try {\n            new (Function.prototype.bind.apply( Color, [ null ].concat( args) ));\n            return true;\n            // eslint-disable-next-line\n        } catch (e) {\n            return false;\n        }\n    }\n\n    // some pre-defined color scales:\n\n    var scales = {\n        cool: function cool() {\n            return scale([chroma.hsl(180, 1, 0.9), chroma.hsl(250, 0.7, 0.4)]);\n        },\n        hot: function hot() {\n            return scale(['#000', '#f00', '#ff0', '#fff']).mode(\n                'rgb'\n            );\n        }\n    };\n\n    /**\n        ColorBrewer colors for chroma.js\n\n        Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The\n        Pennsylvania State University.\n\n        Licensed under the Apache License, Version 2.0 (the \"License\");\n        you may not use this file except in compliance with the License.\n        You may obtain a copy of the License at\n        http://www.apache.org/licenses/LICENSE-2.0\n\n        Unless required by applicable law or agreed to in writing, software distributed\n        under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n        CONDITIONS OF ANY KIND, either express or implied. See the License for the\n        specific language governing permissions and limitations under the License.\n    */\n\n    var colorbrewer = {\n        // sequential\n        OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],\n        PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],\n        BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],\n        Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],\n        BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],\n        YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],\n        YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],\n        Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],\n        RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],\n        Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],\n        YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],\n        Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],\n        GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],\n        Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],\n        YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],\n        PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],\n        Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],\n        PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],\n        Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],\n\n        // diverging\n        Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],\n        RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],\n        RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],\n        PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],\n        PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],\n        RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],\n        BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],\n        RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],\n        PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],\n\n        // qualitative\n        Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],\n        Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],\n        Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],\n        Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],\n        Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],\n        Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],\n        Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],\n        Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2']\n    };\n\n    var colorbrewerTypes = Object.keys(colorbrewer);\n    var typeMap = new Map(colorbrewerTypes.map(function (key) { return [key.toLowerCase(), key]; }));\n\n    // use Proxy to allow case-insensitive access to palettes\n    var colorbrewerProxy =\n        typeof Proxy === 'function'\n            ? new Proxy(colorbrewer, {\n                  get: function get(target, prop) {\n                      var lower = prop.toLowerCase();\n                      if (typeMap.has(lower)) {\n                          return target[typeMap.get(lower)];\n                      }\n                  },\n                  getOwnPropertyNames: function getOwnPropertyNames() {\n                      return Object.getOwnPropertyNames(colorbrewerTypes);\n                  }\n              })\n            : colorbrewer;\n\n    // feel free to comment out anything to rollup\n    // a smaller chroma.js bundle\n\n    Object.assign(chroma, {\n        analyze: analyze,\n        average: average,\n        bezier: bezier$1,\n        blend: blend,\n        brewer: colorbrewerProxy,\n        Color: Color,\n        colors: w3cx11,\n        contrast: contrast,\n        contrastAPCA: contrastAPCA,\n        cubehelix: cubehelix,\n        deltaE: deltaE,\n        distance: distance,\n        input: input,\n        interpolate: mix,\n        limits: limits,\n        mix: mix,\n        random: random$1,\n        scale: scale,\n        scales: scales,\n        valid: valid,\n        cmyk: cmyk,\n        css: css,\n        gl: gl,\n        hcg: hcg$1,\n        hex: hex,\n        hsi: hsi$1,\n        hsl: hsl$1,\n        hsv: hsv$1,\n        lab: lab$1,\n        lch: lch$1,\n        hcl: hcl,\n        num: num$1,\n        rgb: rgb$1,\n        temp: temp,\n        kelvin: temp,\n        temperature: temp,\n        oklab: oklab$1,\n        oklch: oklch$1,\n        getLabWhitePoint: getLabWhitePoint,\n        setLabWhitePoint: setLabWhitePoint\n    });\n\n    return chroma;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/chroma-js/dist/chroma.cjs\n"));

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["main-app"], () => (__webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fdavidebiscuso%2FDocuments%2FGitHub%2Fcolor-ramp%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);